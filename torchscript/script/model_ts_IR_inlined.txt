graph(%self : __torch__.ScriptableAdapter,
      %inputs.1 : (Dict(str, Tensor))):
  %2 : bool = prim::Constant[value=1]() # export_model.py:91:23
  %3 : NoneType = prim::Constant()
  %4 : bool = prim::Constant[value=0]() # export_model.py:90:72
  %model : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self)
  %6 : Dict(str, Tensor) = prim::TupleUnpack(%inputs.1)
  %7 : Dict(str, Tensor)[] = prim::ListConstruct(%6)
  %15 : str = prim::Constant[value="Empty Instances does not support __len__!"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:173:34
  %16 : str = prim::Constant[value="unequal value, x[0] batch dim 0 is {}, but box_list has length {}"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:233:11
  %17 : str = prim::Constant[value="unequal value, num_level_assignments={}, but x is list of {} Tensors"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:227:11
  %18 : float = prim::Constant[value=1e-08]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:70
  %19 : str = prim::Constant[value="AssertionError: The shape of the tensor in the boxes list is not correct as List[Tensor[L, 4]]"]()
  %20 : str = prim::Constant[value="AssertionError: The boxes tensor shape is not correct as Tensor[K, 5]"]()
  %21 : str = prim::Constant[value="AssertionError: proposal_boxes is None and cannot be accessed!"]()
  %22 : str = prim::Constant[value="AssertionError: pred_boxes is None and cannot be accessed!"]()
  %23 : str = prim::Constant[value="AssertionError: pred_classes is None and cannot be accessed!"]()
  %24 : int = prim::Constant[value=6]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:44:78
  %25 : str = prim::Constant[value="Indexing on Boxes with {} failed to return a matrix!"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:29
  %26 : str = prim::Constant[value="AssertionError: Box tensor contains infinite or NaN!"]()
  %27 : int = prim::Constant[value=4000]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:23
  %28 : int = prim::Constant[value=11]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:99:47
  %29 : (str, str, str, str, str, str, str, str) = prim::Constant[value=("proposal_boxes", "objectness_logits", "pred_boxes", "scores", "pred_classes", "pred_masks", "pred_keypoints", "pred_keypoint_heatmaps")]()
  %30 : float = prim::Constant[value=0.5]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:30
  %31 : int = prim::Constant[value=-4]()
  %32 : int = prim::Constant[value=-3]()
  %33 : str = prim::Constant[value="nearest"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:88
  %34 : float = prim::Constant[value=2.]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:78
  %35 : int = prim::Constant[value=3]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:40
  %36 : float = prim::Constant[value=1.0000000000000001e-05]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:179:12
  %37 : float = prim::Constant[value=0.10000000000000001]()
  %38 : str = prim::Constant[value="Expected more than 1 value per channel when training, got input size {}"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
  %39 : str = prim::Constant[value="ResNet takes an input of shape (N, C, H, W). Got {} instead!"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
  %40 : str = prim::Constant[value="stem"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
  %41 : int = prim::Constant[value=5]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:22
  %42 : str = prim::Constant[value="area"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:27
  %43 : str = prim::Constant[value="Default upsampling behavior when mode={} is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details."]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3632:16
  %44 : int = prim::Constant[value=9223372036854775807]()
  %45 : str = prim::Constant[value="The default behavior for interpolate/upsample with float scale_factor changed in 1.6.0 to align with other frameworks/libraries, and now uses scale_factor directly, instead of relying on the computed output size. If you wish to restore the old behavior, please set recompute_scale_factor=True. See the documentation of nn.Upsample for details. "]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3680:24
  %46 : str = prim::Constant[value="Input Error: Only 3D, 4D and 5D input Tensors supported (got {}D) for the modes: nearest | linear | bilinear | bicubic | trilinear (got {})"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3753:8
  %47 : float = prim::Constant[value=0.]()
  %48 : int = prim::Constant[value=1]()
  %49 : str = prim::Constant[value="image"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:49
  %50 : bool = prim::Constant[value=0]()
  %51 : str = prim::Constant[value="square_size"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:124:16
  %52 : int = prim::Constant[value=2]()
  %53 : str = prim::Constant[value="AssertionError: Padding length too large"]()
  %54 : int = prim::Constant[value=0]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:30
  %55 : str = prim::Constant[value="AssertionError: "]()
  %56 : int = prim::Constant[value=-2]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:28
  %57 : int = prim::Constant[value=-1]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:47
  %58 : str = prim::Constant[value="size_divisibility"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:96:15
  %59 : str = prim::Constant[value="floor"]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:75
  %60 : int = prim::Constant[value=4]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:52
  %61 : NoneType = prim::Constant() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:206:33
  %62 : bool = prim::Constant[value=1]() # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:33
  %63 : str = prim::Constant[value="AssertionError: Scripting is not supported for postprocess."]()
  %images.1 : Tensor[] = prim::ListConstruct()
  %65 : int = aten::len(%7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:17
   = prim::Loop(%65, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:17
    block0(%66 : int):
      %x.59 : Dict(str, Tensor) = aten::__getitem__(%7, %66) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:17
      %68 : Tensor = aten::__getitem__(%x.59, %49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:47
      %pixel_mean.2 : Tensor = prim::GetAttr[name="pixel_mean"](%model)
      %70 : Device = prim::device(%pixel_mean.2)
      %71 : Tensor = aten::to(%68, %70, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
      %72 : Tensor[] = aten::append(%images.1, %71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:227:17
      -> (%62)
  %images.5 : Tensor[] = prim::ListConstruct()
  %74 : int = aten::len(%images.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:17
   = prim::Loop(%74, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:17
    block0(%75 : int):
      %x.50 : Tensor = aten::__getitem__(%images.1, %75) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:17
      %pixel_mean.1 : Tensor = prim::GetAttr[name="pixel_mean"](%model)
      %78 : Tensor = aten::sub(%x.50, %pixel_mean.1, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:19
      %pixel_std : Tensor = prim::GetAttr[name="pixel_std"](%model)
      %80 : Tensor = aten::div(%78, %pixel_std) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:19
      %81 : Tensor[] = aten::append(%images.5, %80) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:228:17
      -> (%62)
  %backbone.1 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %_size_divisibility : int = prim::GetAttr[name="_size_divisibility"](%backbone.1)
  %backbone : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %_square_pad : int = prim::GetAttr[name="_square_pad"](%backbone)
  %86 : Dict(str, int) = prim::DictConstruct(%51, %_square_pad)
  %87 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:15
  %88 : bool = aten::gt(%87, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:15
   = prim::If(%88) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:8
      -> ()
  %89 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:83:8
   = prim::Loop(%89, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:83:8
    block0(%90 : int):
      %t.4 : Tensor = aten::__getitem__(%images.5, %90) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:83:8
      %92 : int[] = aten::size(%t.4) # <string>:7:9
      %93 : int[] = aten::slice(%92, %61, %56, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:19
      %94 : Tensor = aten::__getitem__(%images.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:35
      %95 : int[] = aten::size(%94) # <string>:7:9
      %96 : int[] = aten::slice(%95, %61, %56, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:35
      %97 : bool = aten::eq(%93, %96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:19
       = prim::If(%97) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:12
        block0():
          -> ()
        block1():
          %98 : int[] = aten::size(%t.4) # <string>:7:9
          %99 : str = aten::str(%98) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:12
          %100 : str = aten::add(%55, %99) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:12
           = prim::RaiseException(%100) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:12
          -> ()
      -> (%62)
  %image_sizes.1 : (int, int)[] = prim::ListConstruct()
  %102 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:22
   = prim::Loop(%102, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:22
    block0(%103 : int):
      %im.1 : Tensor = aten::__getitem__(%images.5, %103) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:22
      %105 : int[] = aten::size(%im.1) # <string>:7:9
      %106 : int = aten::__getitem__(%105, %56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:24
      %107 : int[] = aten::size(%im.1) # <string>:7:9
      %108 : int = aten::__getitem__(%107, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:38
      %109 : (int, int) = prim::TupleConstruct(%106, %108)
      %110 : (int, int)[] = aten::append(%image_sizes.1, %109) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:87:22
      -> (%62)
  %image_sizes_tensor.1 : Tensor[] = prim::ListConstruct()
  %112 : int = aten::len(%image_sizes.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:29
   = prim::Loop(%112, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:29
    block0(%113 : int):
      %x.55 : (int, int) = aten::__getitem__(%image_sizes.1, %113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:29
      %115 : int, %116 : int = prim::TupleUnpack(%x.55)
      %117 : int[] = prim::ListConstruct(%115, %116)
      %118 : Tensor = aten::as_tensor(%117, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
      %119 : Tensor[] = aten::append(%image_sizes_tensor.1, %118) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:29
      -> (%62)
  %120 : Tensor = aten::stack(%image_sizes_tensor.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:89:19
  %121 : Tensor, %122 : Tensor = aten::max(%120, %54, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:89:19
  %square_size.1 : int = aten::get(%86, %51, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:92:26
  %124 : bool = aten::gt(%square_size.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:93:15
   = prim::If(%124) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:93:12
    block0():
      %125 : Tensor = aten::select(%121, %54, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:95:16
      %126 : int = prim::dtype(%125)
      %127 : Device = prim::device(%125)
      %128 : Tensor = aten::tensor(%square_size.1, %126, %127, %50)
      %129 : Tensor = aten::copy_(%125, %128, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:95:16
      %130 : Tensor = aten::select(%121, %54, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:95:30
      %131 : int = prim::dtype(%130)
      %132 : Device = prim::device(%130)
      %133 : Tensor = aten::tensor(%square_size.1, %131, %132, %50)
      %134 : Tensor = aten::copy_(%130, %133, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:95:16
      -> ()
    block1():
      -> ()
  %135 : bool = aten::__contains__(%86, %58) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:96:15
  %size_divisibility.27 : int = prim::If(%135) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:96:12
    block0():
      %size_divisibility.3 : int = aten::__getitem__(%86, %58) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:97:36
      -> (%size_divisibility.3)
    block1():
      -> (%_size_divisibility)
  %138 : bool = aten::gt(%size_divisibility.27, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:98:11
  %max_size : Tensor = prim::If(%138) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:98:8
    block0():
      %140 : int = aten::sub(%size_divisibility.27, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:36
      %141 : Tensor = aten::add(%121, %140, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:24
      %142 : Tensor = aten::div(%141, %size_divisibility.27, %59) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:24
      %max_size.9 : Tensor = aten::mul(%142, %size_divisibility.27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:24
      -> (%max_size.9)
    block1():
      -> (%121)
  %144 : Tensor = aten::to(%max_size, %60, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:34
  %max_size.25 : int[] = prim::tolist(%144, %48, %54)
  %146 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:110:11
  %147 : bool = aten::eq(%146, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:110:11
  %batched_imgs : Tensor = prim::If(%147) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:110:8
    block0():
      %image_size.2 : (int, int) = aten::__getitem__(%image_sizes.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:113:25
      %150 : int = aten::__getitem__(%max_size.25, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:114:31
      %151 : int = prim::TupleIndex(%image_size.2, %48)
      %152 : int = aten::sub(%150, %151) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:114:31
      %153 : int = aten::__getitem__(%max_size.25, %56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:114:64
      %154 : int = prim::TupleIndex(%image_size.2, %54)
      %155 : int = aten::sub(%153, %154) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:114:64
      %padding_size.1 : int[] = prim::ListConstruct(%54, %152, %54, %155)
      %157 : Tensor = aten::__getitem__(%images.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:115:33
      %158 : int = aten::dim(%157) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:4172:28
      %159 : bool = aten::le(%52, %158) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:4172:11
       = prim::If(%159) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:4172:4
        block0():
          -> ()
        block1():
           = prim::RaiseException(%53) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:4172:4
          -> ()
      %160 : Tensor = aten::constant_pad_nd(%157, %padding_size.1, %47) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:4174:15
      %batched_imgs.1 : Tensor = aten::unsqueeze_(%160, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:115:27
      -> (%batched_imgs.1)
    block1():
      %162 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:27
      %163 : int[] = prim::ListConstruct(%162)
      %164 : Tensor = aten::__getitem__(%images.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:48
      %165 : int[] = aten::size(%164) # <string>:7:9
      %166 : int[] = aten::slice(%165, %61, %56, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:48
      %167 : int[] = aten::list(%166) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:43
      %168 : int[] = aten::add(%163, %167) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:26
      %169 : int[] = aten::list(%max_size.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:73
      %batch_shape.1 : int[] = aten::add(%168, %169) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:118:26
      %171 : Tensor = aten::__getitem__(%images.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:122:27
      %batched_imgs.3 : Tensor = aten::new_full(%171, %batch_shape.1, %47, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:122:27
      %173 : Tensor = aten::__getitem__(%images.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:123:58
      %174 : Device = prim::device(%173)
      %batched_imgs.7 : Tensor = aten::to(%batched_imgs.3, %174, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
      %176 : int = aten::len(%images.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
      %177 : int = aten::len(%batched_imgs.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
      %178 : int[] = prim::ListConstruct(%176, %177)
      %179 : int = prim::min(%178) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
       = prim::Loop(%179, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
        block0(%180 : int):
          %img.1 : Tensor = aten::__getitem__(%images.5, %180) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
          %pad_img.1 : Tensor = aten::select(%batched_imgs.7, %54, %180) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:124:12
          %183 : int[] = aten::size(%img.1) # <string>:7:9
          %184 : int = aten::__getitem__(%183, %56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:125:31
          %185 : Tensor = aten::slice(%pad_img.1, %56, %61, %184, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:125:16
          %186 : int[] = aten::size(%img.1) # <string>:7:9
          %187 : int = aten::__getitem__(%186, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:125:48
          %188 : Tensor = aten::slice(%185, %57, %61, %187, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:125:16
          %189 : Tensor = aten::copy_(%188, %img.1, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:125:16
          -> (%62)
      -> (%batched_imgs.7)
  %190 : Tensor = aten::contiguous(%batched_imgs, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/image_list.py:127:25
  %images.2 : __torch__.detectron2.structures.image_list.ImageList = prim::CreateObject()
   = prim::SetAttr[name="tensor"](%images.2, %190)
   = prim::SetAttr[name="image_sizes"](%images.2, %image_sizes.1)
  %backbone.2 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %tensor.43 : Tensor = prim::GetAttr[name="tensor"](%images.2)
  %bottom_up : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%backbone.2)
  %195 : int = aten::dim(%tensor.43) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
  %196 : bool = aten::eq(%195, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
   = prim::If(%196) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
    block0():
      -> ()
    block1():
      %197 : int[] = aten::size(%tensor.43) # <string>:7:9
      %198 : str = aten::format(%39, %197) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
      %199 : str = aten::add(%55, %198) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
       = prim::RaiseException(%199) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
      -> ()
  %bottom_up_features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %stem : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%bottom_up)
  %conv1.2 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="conv1"](%stem)
  %weight.14 : Tensor = prim::GetAttr[name="weight"](%conv1.2)
  %bias.14 : Tensor? = prim::GetAttr[name="bias"](%conv1.2)
  %205 : int[] = prim::ListConstruct(%52, %52)
  %206 : int[] = prim::ListConstruct(%35, %35)
  %207 : int[] = prim::ListConstruct(%48, %48)
  %x.63 : Tensor = aten::conv2d(%tensor.43, %weight.14, %bias.14, %205, %206, %207, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.7 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.2)
  %training.14 : bool = prim::GetAttr[name="training"](%norm.7)
   = prim::If(%training.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.14 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.7)
      %212 : Tensor = aten::add(%num_batches_tracked.14, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.7, %212)
      -> ()
    block1():
      -> ()
  %training.16 : bool = prim::GetAttr[name="training"](%norm.7)
  %running_mean.7 : Tensor = prim::GetAttr[name="running_mean"](%norm.7)
  %running_var.7 : Tensor = prim::GetAttr[name="running_var"](%norm.7)
  %weight.16 : Tensor = prim::GetAttr[name="weight"](%norm.7)
  %bias.16 : Tensor = prim::GetAttr[name="bias"](%norm.7)
   = prim::If(%training.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %218 : int[] = aten::size(%x.63) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.7 : int = aten::__getitem__(%218, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %220 : int = aten::len(%218) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %221 : int = aten::sub(%220, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.9 : int = prim::Loop(%221, %62, %size_prods.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.61 : int, %size_prods.32 : int):
          %225 : int = aten::add(%i.61, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %226 : int = aten::__getitem__(%218, %225) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.34 : int = aten::mul(%size_prods.32, %226) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.34)
      %228 : bool = aten::eq(%size_prods.9, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%228) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %229 : str = aten::format(%38, %218) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%229) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %x.97 : Tensor = aten::batch_norm(%x.63, %weight.16, %bias.16, %running_mean.7, %running_var.7, %training.16, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %x.75 : Tensor = aten::relu_(%x.97) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:357:12
  %232 : int[] = prim::ListConstruct(%35, %35)
  %233 : int[] = prim::ListConstruct(%52, %52)
  %234 : int[] = prim::ListConstruct(%48, %48)
  %235 : int[] = prim::ListConstruct(%48, %48)
  %x.93 : Tensor = aten::max_pool2d(%x.75, %232, %233, %234, %235, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:719:11
  %_out_features.1 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %238 : bool = aten::__contains__(%_out_features.1, %40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
   = prim::If(%238) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:8
    block0():
       = aten::_set_item(%bottom_up_features.1, %40, %x.93) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:447:12
      -> ()
    block1():
      -> ()
  %stage_names : (str, str, str, str) = prim::GetAttr[name="stage_names"](%bottom_up)
  %name.1 : str, %name.7 : str, %name.13 : str, %name.19 : str = prim::TupleUnpack(%stage_names)
  %stages : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="stages"](%bottom_up)
  %_0.1 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="0"](%stages)
  %_1.1 : __torch__.torch.nn.modules.container.___torch_mangle_15.Sequential = prim::GetAttr[name="1"](%stages)
  %_2.1 : __torch__.torch.nn.modules.container.___torch_mangle_24.Sequential = prim::GetAttr[name="2"](%stages)
  %_3.1 : __torch__.torch.nn.modules.container.___torch_mangle_33.Sequential = prim::GetAttr[name="3"](%stages)
  %_0.3 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%_0.1)
  %_1.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_5.BottleneckBlock = prim::GetAttr[name="1"](%_0.1)
  %_2.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_5.BottleneckBlock = prim::GetAttr[name="2"](%_0.1)
  %conv1.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv1"](%_0.3)
  %weight.18 : Tensor = prim::GetAttr[name="weight"](%conv1.4)
  %bias.18 : Tensor? = prim::GetAttr[name="bias"](%conv1.4)
  %255 : int[] = prim::ListConstruct(%48, %48)
  %256 : int[] = prim::ListConstruct(%54, %54)
  %257 : int[] = prim::ListConstruct(%48, %48)
  %x.73 : Tensor = aten::conv2d(%x.93, %weight.18, %bias.18, %255, %256, %257, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.9 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.4)
  %training.18 : bool = prim::GetAttr[name="training"](%norm.9)
   = prim::If(%training.18) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.16 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.9)
      %262 : Tensor = aten::add(%num_batches_tracked.16, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.9, %262)
      -> ()
    block1():
      -> ()
  %training.20 : bool = prim::GetAttr[name="training"](%norm.9)
  %running_mean.9 : Tensor = prim::GetAttr[name="running_mean"](%norm.9)
  %running_var.9 : Tensor = prim::GetAttr[name="running_var"](%norm.9)
  %weight.20 : Tensor = prim::GetAttr[name="weight"](%norm.9)
  %bias.20 : Tensor = prim::GetAttr[name="bias"](%norm.9)
   = prim::If(%training.20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %268 : int[] = aten::size(%x.73) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.36 : int = aten::__getitem__(%268, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %270 : int = aten::len(%268) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %271 : int = aten::sub(%270, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.38 : int = prim::Loop(%271, %62, %size_prods.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.10 : int, %size_prods.40 : int):
          %275 : int = aten::add(%i.10, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %276 : int = aten::__getitem__(%268, %275) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.42 : int = aten::mul(%size_prods.40, %276) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.42)
      %278 : bool = aten::eq(%size_prods.38, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%278) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %279 : str = aten::format(%38, %268) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%279) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.3 : Tensor = aten::batch_norm(%x.73, %weight.20, %bias.20, %running_mean.9, %running_var.9, %training.20, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.7 : Tensor = aten::relu_(%out.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv2"](%_0.3)
  %weight.22 : Tensor = prim::GetAttr[name="weight"](%conv2.2)
  %bias.22 : Tensor? = prim::GetAttr[name="bias"](%conv2.2)
  %285 : int[] = prim::ListConstruct(%48, %48)
  %286 : int[] = prim::ListConstruct(%48, %48)
  %287 : int[] = prim::ListConstruct(%48, %48)
  %x.101 : Tensor = aten::conv2d(%out.7, %weight.22, %bias.22, %285, %286, %287, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.11 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.2)
  %training.22 : bool = prim::GetAttr[name="training"](%norm.11)
   = prim::If(%training.22) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.18 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.11)
      %292 : Tensor = aten::add(%num_batches_tracked.18, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.11, %292)
      -> ()
    block1():
      -> ()
  %training.24 : bool = prim::GetAttr[name="training"](%norm.11)
  %running_mean.11 : Tensor = prim::GetAttr[name="running_mean"](%norm.11)
  %running_var.11 : Tensor = prim::GetAttr[name="running_var"](%norm.11)
  %weight.24 : Tensor = prim::GetAttr[name="weight"](%norm.11)
  %bias.24 : Tensor = prim::GetAttr[name="bias"](%norm.11)
   = prim::If(%training.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %298 : int[] = aten::size(%x.101) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.44 : int = aten::__getitem__(%298, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %300 : int = aten::len(%298) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %301 : int = aten::sub(%300, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.46 : int = prim::Loop(%301, %62, %size_prods.44) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.12 : int, %size_prods.48 : int):
          %305 : int = aten::add(%i.12, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %306 : int = aten::__getitem__(%298, %305) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.50 : int = aten::mul(%size_prods.48, %306) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.50)
      %308 : bool = aten::eq(%size_prods.46, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%308) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %309 : str = aten::format(%38, %298) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%309) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.11 : Tensor = aten::batch_norm(%x.101, %weight.24, %bias.24, %running_mean.11, %running_var.11, %training.24, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.15 : Tensor = aten::relu_(%out.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv3"](%_0.3)
  %weight.26 : Tensor = prim::GetAttr[name="weight"](%conv3.2)
  %bias.26 : Tensor? = prim::GetAttr[name="bias"](%conv3.2)
  %315 : int[] = prim::ListConstruct(%48, %48)
  %316 : int[] = prim::ListConstruct(%54, %54)
  %317 : int[] = prim::ListConstruct(%48, %48)
  %x.32 : Tensor = aten::conv2d(%out.15, %weight.26, %bias.26, %315, %316, %317, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.13 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.2)
  %training.26 : bool = prim::GetAttr[name="training"](%norm.13)
   = prim::If(%training.26) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.20 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.13)
      %322 : Tensor = aten::add(%num_batches_tracked.20, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.13, %322)
      -> ()
    block1():
      -> ()
  %training.28 : bool = prim::GetAttr[name="training"](%norm.13)
  %running_mean.13 : Tensor = prim::GetAttr[name="running_mean"](%norm.13)
  %running_var.13 : Tensor = prim::GetAttr[name="running_var"](%norm.13)
  %weight.28 : Tensor = prim::GetAttr[name="weight"](%norm.13)
  %bias.28 : Tensor = prim::GetAttr[name="bias"](%norm.13)
   = prim::If(%training.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %328 : int[] = aten::size(%x.32) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.52 : int = aten::__getitem__(%328, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %330 : int = aten::len(%328) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %331 : int = aten::sub(%330, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.54 : int = prim::Loop(%331, %62, %size_prods.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.14 : int, %size_prods.56 : int):
          %335 : int = aten::add(%i.14, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %336 : int = aten::__getitem__(%328, %335) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.58 : int = aten::mul(%size_prods.56, %336) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.58)
      %338 : bool = aten::eq(%size_prods.54, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%338) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %339 : str = aten::format(%38, %328) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%339) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.19 : Tensor = aten::batch_norm(%x.32, %weight.28, %bias.28, %running_mean.13, %running_var.13, %training.28, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %shortcut.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="shortcut"](%_0.3)
  %weight.30 : Tensor = prim::GetAttr[name="weight"](%shortcut.4)
  %bias.30 : Tensor? = prim::GetAttr[name="bias"](%shortcut.4)
  %344 : int[] = prim::ListConstruct(%48, %48)
  %345 : int[] = prim::ListConstruct(%54, %54)
  %346 : int[] = prim::ListConstruct(%48, %48)
  %x.34 : Tensor = aten::conv2d(%x.93, %weight.30, %bias.30, %344, %345, %346, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.15 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%shortcut.4)
  %training.30 : bool = prim::GetAttr[name="training"](%norm.15)
   = prim::If(%training.30) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.22 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.15)
      %351 : Tensor = aten::add(%num_batches_tracked.22, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.15, %351)
      -> ()
    block1():
      -> ()
  %training.32 : bool = prim::GetAttr[name="training"](%norm.15)
  %running_mean.15 : Tensor = prim::GetAttr[name="running_mean"](%norm.15)
  %running_var.15 : Tensor = prim::GetAttr[name="running_var"](%norm.15)
  %weight.32 : Tensor = prim::GetAttr[name="weight"](%norm.15)
  %bias.32 : Tensor = prim::GetAttr[name="bias"](%norm.15)
   = prim::If(%training.32) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %357 : int[] = aten::size(%x.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.60 : int = aten::__getitem__(%357, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %359 : int = aten::len(%357) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %360 : int = aten::sub(%359, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.62 : int = prim::Loop(%360, %62, %size_prods.60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.16 : int, %size_prods.64 : int):
          %364 : int = aten::add(%i.16, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %365 : int = aten::__getitem__(%357, %364) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.66 : int = aten::mul(%size_prods.64, %365) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.66)
      %367 : bool = aten::eq(%size_prods.62, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%367) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %368 : str = aten::format(%38, %357) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%368) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %shortcut.6 : Tensor = aten::batch_norm(%x.34, %weight.32, %bias.32, %running_mean.15, %running_var.15, %training.32, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.23 : Tensor = aten::add_(%out.19, %shortcut.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.6 : Tensor = aten::relu_(%out.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d = prim::GetAttr[name="conv1"](%_1.3)
  %weight.34 : Tensor = prim::GetAttr[name="weight"](%conv1.6)
  %bias.34 : Tensor? = prim::GetAttr[name="bias"](%conv1.6)
  %375 : int[] = prim::ListConstruct(%48, %48)
  %376 : int[] = prim::ListConstruct(%54, %54)
  %377 : int[] = prim::ListConstruct(%48, %48)
  %x.36 : Tensor = aten::conv2d(%input.6, %weight.34, %bias.34, %375, %376, %377, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.17 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.6)
  %training.34 : bool = prim::GetAttr[name="training"](%norm.17)
   = prim::If(%training.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.24 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.17)
      %382 : Tensor = aten::add(%num_batches_tracked.24, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.17, %382)
      -> ()
    block1():
      -> ()
  %training.36 : bool = prim::GetAttr[name="training"](%norm.17)
  %running_mean.17 : Tensor = prim::GetAttr[name="running_mean"](%norm.17)
  %running_var.17 : Tensor = prim::GetAttr[name="running_var"](%norm.17)
  %weight.36 : Tensor = prim::GetAttr[name="weight"](%norm.17)
  %bias.36 : Tensor = prim::GetAttr[name="bias"](%norm.17)
   = prim::If(%training.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %388 : int[] = aten::size(%x.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.68 : int = aten::__getitem__(%388, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %390 : int = aten::len(%388) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %391 : int = aten::sub(%390, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.70 : int = prim::Loop(%391, %62, %size_prods.68) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.18 : int, %size_prods.72 : int):
          %395 : int = aten::add(%i.18, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %396 : int = aten::__getitem__(%388, %395) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.74 : int = aten::mul(%size_prods.72, %396) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.74)
      %398 : bool = aten::eq(%size_prods.70, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%398) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %399 : str = aten::format(%38, %388) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%399) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.25 : Tensor = aten::batch_norm(%x.36, %weight.36, %bias.36, %running_mean.17, %running_var.17, %training.36, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.27 : Tensor = aten::relu_(%out.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv2"](%_1.3)
  %weight.38 : Tensor = prim::GetAttr[name="weight"](%conv2.4)
  %bias.38 : Tensor? = prim::GetAttr[name="bias"](%conv2.4)
  %405 : int[] = prim::ListConstruct(%48, %48)
  %406 : int[] = prim::ListConstruct(%48, %48)
  %407 : int[] = prim::ListConstruct(%48, %48)
  %x.38 : Tensor = aten::conv2d(%out.27, %weight.38, %bias.38, %405, %406, %407, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.19 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.4)
  %training.38 : bool = prim::GetAttr[name="training"](%norm.19)
   = prim::If(%training.38) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.26 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.19)
      %412 : Tensor = aten::add(%num_batches_tracked.26, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.19, %412)
      -> ()
    block1():
      -> ()
  %training.40 : bool = prim::GetAttr[name="training"](%norm.19)
  %running_mean.19 : Tensor = prim::GetAttr[name="running_mean"](%norm.19)
  %running_var.19 : Tensor = prim::GetAttr[name="running_var"](%norm.19)
  %weight.40 : Tensor = prim::GetAttr[name="weight"](%norm.19)
  %bias.40 : Tensor = prim::GetAttr[name="bias"](%norm.19)
   = prim::If(%training.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %418 : int[] = aten::size(%x.38) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.76 : int = aten::__getitem__(%418, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %420 : int = aten::len(%418) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %421 : int = aten::sub(%420, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.78 : int = prim::Loop(%421, %62, %size_prods.76) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.20 : int, %size_prods.80 : int):
          %425 : int = aten::add(%i.20, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %426 : int = aten::__getitem__(%418, %425) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.82 : int = aten::mul(%size_prods.80, %426) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.82)
      %428 : bool = aten::eq(%size_prods.78, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%428) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %429 : str = aten::format(%38, %418) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%429) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.29 : Tensor = aten::batch_norm(%x.38, %weight.40, %bias.40, %running_mean.19, %running_var.19, %training.40, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.31 : Tensor = aten::relu_(%out.29) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv3"](%_1.3)
  %weight.42 : Tensor = prim::GetAttr[name="weight"](%conv3.4)
  %bias.42 : Tensor? = prim::GetAttr[name="bias"](%conv3.4)
  %435 : int[] = prim::ListConstruct(%48, %48)
  %436 : int[] = prim::ListConstruct(%54, %54)
  %437 : int[] = prim::ListConstruct(%48, %48)
  %x.40 : Tensor = aten::conv2d(%out.31, %weight.42, %bias.42, %435, %436, %437, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.21 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.4)
  %training.42 : bool = prim::GetAttr[name="training"](%norm.21)
   = prim::If(%training.42) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.28 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.21)
      %442 : Tensor = aten::add(%num_batches_tracked.28, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.21, %442)
      -> ()
    block1():
      -> ()
  %training.44 : bool = prim::GetAttr[name="training"](%norm.21)
  %running_mean.21 : Tensor = prim::GetAttr[name="running_mean"](%norm.21)
  %running_var.21 : Tensor = prim::GetAttr[name="running_var"](%norm.21)
  %weight.44 : Tensor = prim::GetAttr[name="weight"](%norm.21)
  %bias.44 : Tensor = prim::GetAttr[name="bias"](%norm.21)
   = prim::If(%training.44) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %448 : int[] = aten::size(%x.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.84 : int = aten::__getitem__(%448, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %450 : int = aten::len(%448) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %451 : int = aten::sub(%450, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.86 : int = prim::Loop(%451, %62, %size_prods.84) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.22 : int, %size_prods.88 : int):
          %455 : int = aten::add(%i.22, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %456 : int = aten::__getitem__(%448, %455) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.90 : int = aten::mul(%size_prods.88, %456) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.90)
      %458 : bool = aten::eq(%size_prods.86, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%458) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %459 : str = aten::format(%38, %448) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%459) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.33 : Tensor = aten::batch_norm(%x.40, %weight.44, %bias.44, %running_mean.21, %running_var.21, %training.44, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.35 : Tensor = aten::add_(%out.33, %input.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.31 : Tensor = aten::relu_(%out.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d = prim::GetAttr[name="conv1"](%_2.3)
  %weight.46 : Tensor = prim::GetAttr[name="weight"](%conv1.8)
  %bias.46 : Tensor? = prim::GetAttr[name="bias"](%conv1.8)
  %466 : int[] = prim::ListConstruct(%48, %48)
  %467 : int[] = prim::ListConstruct(%54, %54)
  %468 : int[] = prim::ListConstruct(%48, %48)
  %x.44 : Tensor = aten::conv2d(%input.31, %weight.46, %bias.46, %466, %467, %468, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.23 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.8)
  %training.46 : bool = prim::GetAttr[name="training"](%norm.23)
   = prim::If(%training.46) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.30 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.23)
      %473 : Tensor = aten::add(%num_batches_tracked.30, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.23, %473)
      -> ()
    block1():
      -> ()
  %training.48 : bool = prim::GetAttr[name="training"](%norm.23)
  %running_mean.23 : Tensor = prim::GetAttr[name="running_mean"](%norm.23)
  %running_var.23 : Tensor = prim::GetAttr[name="running_var"](%norm.23)
  %weight.48 : Tensor = prim::GetAttr[name="weight"](%norm.23)
  %bias.48 : Tensor = prim::GetAttr[name="bias"](%norm.23)
   = prim::If(%training.48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %479 : int[] = aten::size(%x.44) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.92 : int = aten::__getitem__(%479, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %481 : int = aten::len(%479) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %482 : int = aten::sub(%481, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.94 : int = prim::Loop(%482, %62, %size_prods.92) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.24 : int, %size_prods.96 : int):
          %486 : int = aten::add(%i.24, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %487 : int = aten::__getitem__(%479, %486) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.98 : int = aten::mul(%size_prods.96, %487) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.98)
      %489 : bool = aten::eq(%size_prods.94, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%489) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %490 : str = aten::format(%38, %479) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%490) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.37 : Tensor = aten::batch_norm(%x.44, %weight.48, %bias.48, %running_mean.23, %running_var.23, %training.48, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.39 : Tensor = aten::relu_(%out.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv2"](%_2.3)
  %weight.50 : Tensor = prim::GetAttr[name="weight"](%conv2.6)
  %bias.50 : Tensor? = prim::GetAttr[name="bias"](%conv2.6)
  %496 : int[] = prim::ListConstruct(%48, %48)
  %497 : int[] = prim::ListConstruct(%48, %48)
  %498 : int[] = prim::ListConstruct(%48, %48)
  %x.46 : Tensor = aten::conv2d(%out.39, %weight.50, %bias.50, %496, %497, %498, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.25 : __torch__.torch.nn.modules.batchnorm.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.6)
  %training.50 : bool = prim::GetAttr[name="training"](%norm.25)
   = prim::If(%training.50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.32 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.25)
      %503 : Tensor = aten::add(%num_batches_tracked.32, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.25, %503)
      -> ()
    block1():
      -> ()
  %training.52 : bool = prim::GetAttr[name="training"](%norm.25)
  %running_mean.25 : Tensor = prim::GetAttr[name="running_mean"](%norm.25)
  %running_var.25 : Tensor = prim::GetAttr[name="running_var"](%norm.25)
  %weight.52 : Tensor = prim::GetAttr[name="weight"](%norm.25)
  %bias.52 : Tensor = prim::GetAttr[name="bias"](%norm.25)
   = prim::If(%training.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %509 : int[] = aten::size(%x.46) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.100 : int = aten::__getitem__(%509, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %511 : int = aten::len(%509) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %512 : int = aten::sub(%511, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.102 : int = prim::Loop(%512, %62, %size_prods.100) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.26 : int, %size_prods.104 : int):
          %516 : int = aten::add(%i.26, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %517 : int = aten::__getitem__(%509, %516) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.106 : int = aten::mul(%size_prods.104, %517) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.106)
      %519 : bool = aten::eq(%size_prods.102, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%519) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %520 : str = aten::format(%38, %509) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%520) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.41 : Tensor = aten::batch_norm(%x.46, %weight.52, %bias.52, %running_mean.25, %running_var.25, %training.52, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.43 : Tensor = aten::relu_(%out.41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv3"](%_2.3)
  %weight.54 : Tensor = prim::GetAttr[name="weight"](%conv3.6)
  %bias.54 : Tensor? = prim::GetAttr[name="bias"](%conv3.6)
  %526 : int[] = prim::ListConstruct(%48, %48)
  %527 : int[] = prim::ListConstruct(%54, %54)
  %528 : int[] = prim::ListConstruct(%48, %48)
  %x.48 : Tensor = aten::conv2d(%out.43, %weight.54, %bias.54, %526, %527, %528, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.27 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.6)
  %training.54 : bool = prim::GetAttr[name="training"](%norm.27)
   = prim::If(%training.54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.34 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.27)
      %533 : Tensor = aten::add(%num_batches_tracked.34, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.27, %533)
      -> ()
    block1():
      -> ()
  %training.56 : bool = prim::GetAttr[name="training"](%norm.27)
  %running_mean.27 : Tensor = prim::GetAttr[name="running_mean"](%norm.27)
  %running_var.27 : Tensor = prim::GetAttr[name="running_var"](%norm.27)
  %weight.56 : Tensor = prim::GetAttr[name="weight"](%norm.27)
  %bias.56 : Tensor = prim::GetAttr[name="bias"](%norm.27)
   = prim::If(%training.56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %539 : int[] = aten::size(%x.48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.108 : int = aten::__getitem__(%539, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %541 : int = aten::len(%539) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %542 : int = aten::sub(%541, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.110 : int = prim::Loop(%542, %62, %size_prods.108) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.28 : int, %size_prods.112 : int):
          %546 : int = aten::add(%i.28, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %547 : int = aten::__getitem__(%539, %546) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.114 : int = aten::mul(%size_prods.112, %547) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.114)
      %549 : bool = aten::eq(%size_prods.110, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%549) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %550 : str = aten::format(%38, %539) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%550) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.45 : Tensor = aten::batch_norm(%x.48, %weight.56, %bias.56, %running_mean.27, %running_var.27, %training.56, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.47 : Tensor = aten::add_(%out.45, %input.31, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.65 : Tensor = aten::relu_(%out.47) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.3 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %555 : bool = aten::__contains__(%_out_features.3, %name.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%555) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.1, %x.65) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_12.BottleneckBlock = prim::GetAttr[name="0"](%_1.1)
  %_1.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_14.BottleneckBlock = prim::GetAttr[name="1"](%_1.1)
  %_2.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_14.BottleneckBlock = prim::GetAttr[name="2"](%_1.1)
  %_3.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_14.BottleneckBlock = prim::GetAttr[name="3"](%_1.1)
  %conv1.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d = prim::GetAttr[name="conv1"](%_0.5)
  %weight.58 : Tensor = prim::GetAttr[name="weight"](%conv1.10)
  %bias.58 : Tensor? = prim::GetAttr[name="bias"](%conv1.10)
  %563 : int[] = prim::ListConstruct(%52, %52)
  %564 : int[] = prim::ListConstruct(%54, %54)
  %565 : int[] = prim::ListConstruct(%48, %48)
  %x.52 : Tensor = aten::conv2d(%x.65, %weight.58, %bias.58, %563, %564, %565, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.29 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.10)
  %training.58 : bool = prim::GetAttr[name="training"](%norm.29)
   = prim::If(%training.58) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.36 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.29)
      %570 : Tensor = aten::add(%num_batches_tracked.36, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.29, %570)
      -> ()
    block1():
      -> ()
  %training.60 : bool = prim::GetAttr[name="training"](%norm.29)
  %running_mean.29 : Tensor = prim::GetAttr[name="running_mean"](%norm.29)
  %running_var.29 : Tensor = prim::GetAttr[name="running_var"](%norm.29)
  %weight.60 : Tensor = prim::GetAttr[name="weight"](%norm.29)
  %bias.60 : Tensor = prim::GetAttr[name="bias"](%norm.29)
   = prim::If(%training.60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %576 : int[] = aten::size(%x.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.116 : int = aten::__getitem__(%576, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %578 : int = aten::len(%576) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %579 : int = aten::sub(%578, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.118 : int = prim::Loop(%579, %62, %size_prods.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.30 : int, %size_prods.120 : int):
          %583 : int = aten::add(%i.30, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %584 : int = aten::__getitem__(%576, %583) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.122 : int = aten::mul(%size_prods.120, %584) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.122)
      %586 : bool = aten::eq(%size_prods.118, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%586) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %587 : str = aten::format(%38, %576) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%587) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.49 : Tensor = aten::batch_norm(%x.52, %weight.60, %bias.60, %running_mean.29, %running_var.29, %training.60, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.51 : Tensor = aten::relu_(%out.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv2"](%_0.5)
  %weight.62 : Tensor = prim::GetAttr[name="weight"](%conv2.8)
  %bias.62 : Tensor? = prim::GetAttr[name="bias"](%conv2.8)
  %593 : int[] = prim::ListConstruct(%48, %48)
  %594 : int[] = prim::ListConstruct(%48, %48)
  %595 : int[] = prim::ListConstruct(%48, %48)
  %x.54 : Tensor = aten::conv2d(%out.51, %weight.62, %bias.62, %593, %594, %595, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.31 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.8)
  %training.62 : bool = prim::GetAttr[name="training"](%norm.31)
   = prim::If(%training.62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.38 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.31)
      %600 : Tensor = aten::add(%num_batches_tracked.38, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.31, %600)
      -> ()
    block1():
      -> ()
  %training.64 : bool = prim::GetAttr[name="training"](%norm.31)
  %running_mean.31 : Tensor = prim::GetAttr[name="running_mean"](%norm.31)
  %running_var.31 : Tensor = prim::GetAttr[name="running_var"](%norm.31)
  %weight.64 : Tensor = prim::GetAttr[name="weight"](%norm.31)
  %bias.64 : Tensor = prim::GetAttr[name="bias"](%norm.31)
   = prim::If(%training.64) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %606 : int[] = aten::size(%x.54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.124 : int = aten::__getitem__(%606, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %608 : int = aten::len(%606) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %609 : int = aten::sub(%608, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.126 : int = prim::Loop(%609, %62, %size_prods.124) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.32 : int, %size_prods.128 : int):
          %613 : int = aten::add(%i.32, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %614 : int = aten::__getitem__(%606, %613) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.130 : int = aten::mul(%size_prods.128, %614) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.130)
      %616 : bool = aten::eq(%size_prods.126, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%616) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %617 : str = aten::format(%38, %606) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%617) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.53 : Tensor = aten::batch_norm(%x.54, %weight.64, %bias.64, %running_mean.31, %running_var.31, %training.64, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.55 : Tensor = aten::relu_(%out.53) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv3"](%_0.5)
  %weight.66 : Tensor = prim::GetAttr[name="weight"](%conv3.8)
  %bias.66 : Tensor? = prim::GetAttr[name="bias"](%conv3.8)
  %623 : int[] = prim::ListConstruct(%48, %48)
  %624 : int[] = prim::ListConstruct(%54, %54)
  %625 : int[] = prim::ListConstruct(%48, %48)
  %x.56 : Tensor = aten::conv2d(%out.55, %weight.66, %bias.66, %623, %624, %625, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.33 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.8)
  %training.66 : bool = prim::GetAttr[name="training"](%norm.33)
   = prim::If(%training.66) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.40 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.33)
      %630 : Tensor = aten::add(%num_batches_tracked.40, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.33, %630)
      -> ()
    block1():
      -> ()
  %training.68 : bool = prim::GetAttr[name="training"](%norm.33)
  %running_mean.33 : Tensor = prim::GetAttr[name="running_mean"](%norm.33)
  %running_var.33 : Tensor = prim::GetAttr[name="running_var"](%norm.33)
  %weight.68 : Tensor = prim::GetAttr[name="weight"](%norm.33)
  %bias.68 : Tensor = prim::GetAttr[name="bias"](%norm.33)
   = prim::If(%training.68) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %636 : int[] = aten::size(%x.56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.132 : int = aten::__getitem__(%636, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %638 : int = aten::len(%636) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %639 : int = aten::sub(%638, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.134 : int = prim::Loop(%639, %62, %size_prods.132) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.34 : int, %size_prods.136 : int):
          %643 : int = aten::add(%i.34, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %644 : int = aten::__getitem__(%636, %643) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.138 : int = aten::mul(%size_prods.136, %644) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.138)
      %646 : bool = aten::eq(%size_prods.134, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%646) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %647 : str = aten::format(%38, %636) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%647) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.57 : Tensor = aten::batch_norm(%x.56, %weight.68, %bias.68, %running_mean.33, %running_var.33, %training.68, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %shortcut.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="shortcut"](%_0.5)
  %weight.70 : Tensor = prim::GetAttr[name="weight"](%shortcut.8)
  %bias.70 : Tensor? = prim::GetAttr[name="bias"](%shortcut.8)
  %652 : int[] = prim::ListConstruct(%52, %52)
  %653 : int[] = prim::ListConstruct(%54, %54)
  %654 : int[] = prim::ListConstruct(%48, %48)
  %x.58 : Tensor = aten::conv2d(%x.65, %weight.70, %bias.70, %652, %653, %654, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.35 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%shortcut.8)
  %training.70 : bool = prim::GetAttr[name="training"](%norm.35)
   = prim::If(%training.70) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.42 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.35)
      %659 : Tensor = aten::add(%num_batches_tracked.42, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.35, %659)
      -> ()
    block1():
      -> ()
  %training.72 : bool = prim::GetAttr[name="training"](%norm.35)
  %running_mean.35 : Tensor = prim::GetAttr[name="running_mean"](%norm.35)
  %running_var.35 : Tensor = prim::GetAttr[name="running_var"](%norm.35)
  %weight.72 : Tensor = prim::GetAttr[name="weight"](%norm.35)
  %bias.72 : Tensor = prim::GetAttr[name="bias"](%norm.35)
   = prim::If(%training.72) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %665 : int[] = aten::size(%x.58) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.140 : int = aten::__getitem__(%665, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %667 : int = aten::len(%665) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %668 : int = aten::sub(%667, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.142 : int = prim::Loop(%668, %62, %size_prods.140) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.36 : int, %size_prods.144 : int):
          %672 : int = aten::add(%i.36, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %673 : int = aten::__getitem__(%665, %672) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.146 : int = aten::mul(%size_prods.144, %673) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.146)
      %675 : bool = aten::eq(%size_prods.142, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%675) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %676 : str = aten::format(%38, %665) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%676) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %shortcut.10 : Tensor = aten::batch_norm(%x.58, %weight.72, %bias.72, %running_mean.35, %running_var.35, %training.72, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.59 : Tensor = aten::add_(%out.57, %shortcut.10, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.33 : Tensor = aten::relu_(%out.59) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="conv1"](%_1.5)
  %weight.74 : Tensor = prim::GetAttr[name="weight"](%conv1.12)
  %bias.74 : Tensor? = prim::GetAttr[name="bias"](%conv1.12)
  %683 : int[] = prim::ListConstruct(%48, %48)
  %684 : int[] = prim::ListConstruct(%54, %54)
  %685 : int[] = prim::ListConstruct(%48, %48)
  %x.60 : Tensor = aten::conv2d(%input.33, %weight.74, %bias.74, %683, %684, %685, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.37 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.12)
  %training.74 : bool = prim::GetAttr[name="training"](%norm.37)
   = prim::If(%training.74) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.44 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.37)
      %690 : Tensor = aten::add(%num_batches_tracked.44, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.37, %690)
      -> ()
    block1():
      -> ()
  %training.76 : bool = prim::GetAttr[name="training"](%norm.37)
  %running_mean.37 : Tensor = prim::GetAttr[name="running_mean"](%norm.37)
  %running_var.37 : Tensor = prim::GetAttr[name="running_var"](%norm.37)
  %weight.76 : Tensor = prim::GetAttr[name="weight"](%norm.37)
  %bias.76 : Tensor = prim::GetAttr[name="bias"](%norm.37)
   = prim::If(%training.76) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %696 : int[] = aten::size(%x.60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.148 : int = aten::__getitem__(%696, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %698 : int = aten::len(%696) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %699 : int = aten::sub(%698, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.150 : int = prim::Loop(%699, %62, %size_prods.148) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.38 : int, %size_prods.152 : int):
          %703 : int = aten::add(%i.38, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %704 : int = aten::__getitem__(%696, %703) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.154 : int = aten::mul(%size_prods.152, %704) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.154)
      %706 : bool = aten::eq(%size_prods.150, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%706) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %707 : str = aten::format(%38, %696) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%707) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.61 : Tensor = aten::batch_norm(%x.60, %weight.76, %bias.76, %running_mean.37, %running_var.37, %training.76, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.63 : Tensor = aten::relu_(%out.61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv2"](%_1.5)
  %weight.78 : Tensor = prim::GetAttr[name="weight"](%conv2.10)
  %bias.78 : Tensor? = prim::GetAttr[name="bias"](%conv2.10)
  %713 : int[] = prim::ListConstruct(%48, %48)
  %714 : int[] = prim::ListConstruct(%48, %48)
  %715 : int[] = prim::ListConstruct(%48, %48)
  %x.62 : Tensor = aten::conv2d(%out.63, %weight.78, %bias.78, %713, %714, %715, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.39 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.10)
  %training.78 : bool = prim::GetAttr[name="training"](%norm.39)
   = prim::If(%training.78) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.46 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.39)
      %720 : Tensor = aten::add(%num_batches_tracked.46, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.39, %720)
      -> ()
    block1():
      -> ()
  %training.80 : bool = prim::GetAttr[name="training"](%norm.39)
  %running_mean.39 : Tensor = prim::GetAttr[name="running_mean"](%norm.39)
  %running_var.39 : Tensor = prim::GetAttr[name="running_var"](%norm.39)
  %weight.80 : Tensor = prim::GetAttr[name="weight"](%norm.39)
  %bias.80 : Tensor = prim::GetAttr[name="bias"](%norm.39)
   = prim::If(%training.80) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %726 : int[] = aten::size(%x.62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.156 : int = aten::__getitem__(%726, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %728 : int = aten::len(%726) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %729 : int = aten::sub(%728, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.158 : int = prim::Loop(%729, %62, %size_prods.156) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.40 : int, %size_prods.160 : int):
          %733 : int = aten::add(%i.40, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %734 : int = aten::__getitem__(%726, %733) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.162 : int = aten::mul(%size_prods.160, %734) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.162)
      %736 : bool = aten::eq(%size_prods.158, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%736) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %737 : str = aten::format(%38, %726) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%737) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.65 : Tensor = aten::batch_norm(%x.62, %weight.80, %bias.80, %running_mean.39, %running_var.39, %training.80, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.67 : Tensor = aten::relu_(%out.65) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv3"](%_1.5)
  %weight.82 : Tensor = prim::GetAttr[name="weight"](%conv3.10)
  %bias.82 : Tensor? = prim::GetAttr[name="bias"](%conv3.10)
  %743 : int[] = prim::ListConstruct(%48, %48)
  %744 : int[] = prim::ListConstruct(%54, %54)
  %745 : int[] = prim::ListConstruct(%48, %48)
  %x.64 : Tensor = aten::conv2d(%out.67, %weight.82, %bias.82, %743, %744, %745, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.41 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.10)
  %training.82 : bool = prim::GetAttr[name="training"](%norm.41)
   = prim::If(%training.82) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.48 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.41)
      %750 : Tensor = aten::add(%num_batches_tracked.48, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.41, %750)
      -> ()
    block1():
      -> ()
  %training.84 : bool = prim::GetAttr[name="training"](%norm.41)
  %running_mean.41 : Tensor = prim::GetAttr[name="running_mean"](%norm.41)
  %running_var.41 : Tensor = prim::GetAttr[name="running_var"](%norm.41)
  %weight.84 : Tensor = prim::GetAttr[name="weight"](%norm.41)
  %bias.84 : Tensor = prim::GetAttr[name="bias"](%norm.41)
   = prim::If(%training.84) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %756 : int[] = aten::size(%x.64) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.164 : int = aten::__getitem__(%756, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %758 : int = aten::len(%756) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %759 : int = aten::sub(%758, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.166 : int = prim::Loop(%759, %62, %size_prods.164) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.42 : int, %size_prods.168 : int):
          %763 : int = aten::add(%i.42, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %764 : int = aten::__getitem__(%756, %763) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.170 : int = aten::mul(%size_prods.168, %764) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.170)
      %766 : bool = aten::eq(%size_prods.166, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%766) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %767 : str = aten::format(%38, %756) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%767) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.69 : Tensor = aten::batch_norm(%x.64, %weight.84, %bias.84, %running_mean.41, %running_var.41, %training.84, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.71 : Tensor = aten::add_(%out.69, %input.33, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.35 : Tensor = aten::relu_(%out.71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="conv1"](%_2.5)
  %weight.86 : Tensor = prim::GetAttr[name="weight"](%conv1.14)
  %bias.86 : Tensor? = prim::GetAttr[name="bias"](%conv1.14)
  %774 : int[] = prim::ListConstruct(%48, %48)
  %775 : int[] = prim::ListConstruct(%54, %54)
  %776 : int[] = prim::ListConstruct(%48, %48)
  %x.66 : Tensor = aten::conv2d(%input.35, %weight.86, %bias.86, %774, %775, %776, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.43 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.14)
  %training.86 : bool = prim::GetAttr[name="training"](%norm.43)
   = prim::If(%training.86) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.50 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.43)
      %781 : Tensor = aten::add(%num_batches_tracked.50, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.43, %781)
      -> ()
    block1():
      -> ()
  %training.88 : bool = prim::GetAttr[name="training"](%norm.43)
  %running_mean.43 : Tensor = prim::GetAttr[name="running_mean"](%norm.43)
  %running_var.43 : Tensor = prim::GetAttr[name="running_var"](%norm.43)
  %weight.88 : Tensor = prim::GetAttr[name="weight"](%norm.43)
  %bias.88 : Tensor = prim::GetAttr[name="bias"](%norm.43)
   = prim::If(%training.88) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %787 : int[] = aten::size(%x.66) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.172 : int = aten::__getitem__(%787, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %789 : int = aten::len(%787) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %790 : int = aten::sub(%789, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.174 : int = prim::Loop(%790, %62, %size_prods.172) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.44 : int, %size_prods.176 : int):
          %794 : int = aten::add(%i.44, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %795 : int = aten::__getitem__(%787, %794) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.178 : int = aten::mul(%size_prods.176, %795) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.178)
      %797 : bool = aten::eq(%size_prods.174, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%797) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %798 : str = aten::format(%38, %787) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%798) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.73 : Tensor = aten::batch_norm(%x.66, %weight.88, %bias.88, %running_mean.43, %running_var.43, %training.88, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.75 : Tensor = aten::relu_(%out.73) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv2"](%_2.5)
  %weight.90 : Tensor = prim::GetAttr[name="weight"](%conv2.12)
  %bias.90 : Tensor? = prim::GetAttr[name="bias"](%conv2.12)
  %804 : int[] = prim::ListConstruct(%48, %48)
  %805 : int[] = prim::ListConstruct(%48, %48)
  %806 : int[] = prim::ListConstruct(%48, %48)
  %x.68 : Tensor = aten::conv2d(%out.75, %weight.90, %bias.90, %804, %805, %806, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.45 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.12)
  %training.90 : bool = prim::GetAttr[name="training"](%norm.45)
   = prim::If(%training.90) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.52 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.45)
      %811 : Tensor = aten::add(%num_batches_tracked.52, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.45, %811)
      -> ()
    block1():
      -> ()
  %training.92 : bool = prim::GetAttr[name="training"](%norm.45)
  %running_mean.45 : Tensor = prim::GetAttr[name="running_mean"](%norm.45)
  %running_var.45 : Tensor = prim::GetAttr[name="running_var"](%norm.45)
  %weight.92 : Tensor = prim::GetAttr[name="weight"](%norm.45)
  %bias.92 : Tensor = prim::GetAttr[name="bias"](%norm.45)
   = prim::If(%training.92) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %817 : int[] = aten::size(%x.68) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.180 : int = aten::__getitem__(%817, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %819 : int = aten::len(%817) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %820 : int = aten::sub(%819, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.182 : int = prim::Loop(%820, %62, %size_prods.180) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.46 : int, %size_prods.184 : int):
          %824 : int = aten::add(%i.46, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %825 : int = aten::__getitem__(%817, %824) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.186 : int = aten::mul(%size_prods.184, %825) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.186)
      %827 : bool = aten::eq(%size_prods.182, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%827) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %828 : str = aten::format(%38, %817) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%828) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.77 : Tensor = aten::batch_norm(%x.68, %weight.92, %bias.92, %running_mean.45, %running_var.45, %training.92, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.79 : Tensor = aten::relu_(%out.77) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv3"](%_2.5)
  %weight.94 : Tensor = prim::GetAttr[name="weight"](%conv3.12)
  %bias.94 : Tensor? = prim::GetAttr[name="bias"](%conv3.12)
  %834 : int[] = prim::ListConstruct(%48, %48)
  %835 : int[] = prim::ListConstruct(%54, %54)
  %836 : int[] = prim::ListConstruct(%48, %48)
  %x.70 : Tensor = aten::conv2d(%out.79, %weight.94, %bias.94, %834, %835, %836, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.47 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.12)
  %training.94 : bool = prim::GetAttr[name="training"](%norm.47)
   = prim::If(%training.94) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.54 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.47)
      %841 : Tensor = aten::add(%num_batches_tracked.54, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.47, %841)
      -> ()
    block1():
      -> ()
  %training.96 : bool = prim::GetAttr[name="training"](%norm.47)
  %running_mean.47 : Tensor = prim::GetAttr[name="running_mean"](%norm.47)
  %running_var.47 : Tensor = prim::GetAttr[name="running_var"](%norm.47)
  %weight.96 : Tensor = prim::GetAttr[name="weight"](%norm.47)
  %bias.96 : Tensor = prim::GetAttr[name="bias"](%norm.47)
   = prim::If(%training.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %847 : int[] = aten::size(%x.70) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.188 : int = aten::__getitem__(%847, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %849 : int = aten::len(%847) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %850 : int = aten::sub(%849, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.190 : int = prim::Loop(%850, %62, %size_prods.188) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.48 : int, %size_prods.192 : int):
          %854 : int = aten::add(%i.48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %855 : int = aten::__getitem__(%847, %854) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.194 : int = aten::mul(%size_prods.192, %855) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.194)
      %857 : bool = aten::eq(%size_prods.190, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%857) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %858 : str = aten::format(%38, %847) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%858) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.81 : Tensor = aten::batch_norm(%x.70, %weight.96, %bias.96, %running_mean.47, %running_var.47, %training.96, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.83 : Tensor = aten::add_(%out.81, %input.35, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.37 : Tensor = aten::relu_(%out.83) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="conv1"](%_3.3)
  %weight.98 : Tensor = prim::GetAttr[name="weight"](%conv1.16)
  %bias.98 : Tensor? = prim::GetAttr[name="bias"](%conv1.16)
  %865 : int[] = prim::ListConstruct(%48, %48)
  %866 : int[] = prim::ListConstruct(%54, %54)
  %867 : int[] = prim::ListConstruct(%48, %48)
  %x.76 : Tensor = aten::conv2d(%input.37, %weight.98, %bias.98, %865, %866, %867, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.49 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.16)
  %training.98 : bool = prim::GetAttr[name="training"](%norm.49)
   = prim::If(%training.98) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.56 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.49)
      %872 : Tensor = aten::add(%num_batches_tracked.56, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.49, %872)
      -> ()
    block1():
      -> ()
  %training.100 : bool = prim::GetAttr[name="training"](%norm.49)
  %running_mean.49 : Tensor = prim::GetAttr[name="running_mean"](%norm.49)
  %running_var.49 : Tensor = prim::GetAttr[name="running_var"](%norm.49)
  %weight.100 : Tensor = prim::GetAttr[name="weight"](%norm.49)
  %bias.100 : Tensor = prim::GetAttr[name="bias"](%norm.49)
   = prim::If(%training.100) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %878 : int[] = aten::size(%x.76) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.196 : int = aten::__getitem__(%878, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %880 : int = aten::len(%878) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %881 : int = aten::sub(%880, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.198 : int = prim::Loop(%881, %62, %size_prods.196) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.50 : int, %size_prods.200 : int):
          %885 : int = aten::add(%i.50, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %886 : int = aten::__getitem__(%878, %885) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.202 : int = aten::mul(%size_prods.200, %886) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.202)
      %888 : bool = aten::eq(%size_prods.198, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%888) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %889 : str = aten::format(%38, %878) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%889) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.85 : Tensor = aten::batch_norm(%x.76, %weight.100, %bias.100, %running_mean.49, %running_var.49, %training.100, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.87 : Tensor = aten::relu_(%out.85) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv2"](%_3.3)
  %weight.102 : Tensor = prim::GetAttr[name="weight"](%conv2.14)
  %bias.102 : Tensor? = prim::GetAttr[name="bias"](%conv2.14)
  %895 : int[] = prim::ListConstruct(%48, %48)
  %896 : int[] = prim::ListConstruct(%48, %48)
  %897 : int[] = prim::ListConstruct(%48, %48)
  %x.78 : Tensor = aten::conv2d(%out.87, %weight.102, %bias.102, %895, %896, %897, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.51 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_8.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.14)
  %training.102 : bool = prim::GetAttr[name="training"](%norm.51)
   = prim::If(%training.102) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.58 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.51)
      %902 : Tensor = aten::add(%num_batches_tracked.58, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.51, %902)
      -> ()
    block1():
      -> ()
  %training.104 : bool = prim::GetAttr[name="training"](%norm.51)
  %running_mean.51 : Tensor = prim::GetAttr[name="running_mean"](%norm.51)
  %running_var.51 : Tensor = prim::GetAttr[name="running_var"](%norm.51)
  %weight.104 : Tensor = prim::GetAttr[name="weight"](%norm.51)
  %bias.104 : Tensor = prim::GetAttr[name="bias"](%norm.51)
   = prim::If(%training.104) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %908 : int[] = aten::size(%x.78) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.204 : int = aten::__getitem__(%908, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %910 : int = aten::len(%908) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %911 : int = aten::sub(%910, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.206 : int = prim::Loop(%911, %62, %size_prods.204) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.52 : int, %size_prods.208 : int):
          %915 : int = aten::add(%i.52, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %916 : int = aten::__getitem__(%908, %915) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.210 : int = aten::mul(%size_prods.208, %916) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.210)
      %918 : bool = aten::eq(%size_prods.206, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%918) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %919 : str = aten::format(%38, %908) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%919) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.89 : Tensor = aten::batch_norm(%x.78, %weight.104, %bias.104, %running_mean.51, %running_var.51, %training.104, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.91 : Tensor = aten::relu_(%out.89) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv3"](%_3.3)
  %weight.106 : Tensor = prim::GetAttr[name="weight"](%conv3.14)
  %bias.106 : Tensor? = prim::GetAttr[name="bias"](%conv3.14)
  %925 : int[] = prim::ListConstruct(%48, %48)
  %926 : int[] = prim::ListConstruct(%54, %54)
  %927 : int[] = prim::ListConstruct(%48, %48)
  %x.80 : Tensor = aten::conv2d(%out.91, %weight.106, %bias.106, %925, %926, %927, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.53 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.14)
  %training.106 : bool = prim::GetAttr[name="training"](%norm.53)
   = prim::If(%training.106) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.60 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.53)
      %932 : Tensor = aten::add(%num_batches_tracked.60, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.53, %932)
      -> ()
    block1():
      -> ()
  %training.108 : bool = prim::GetAttr[name="training"](%norm.53)
  %running_mean.53 : Tensor = prim::GetAttr[name="running_mean"](%norm.53)
  %running_var.53 : Tensor = prim::GetAttr[name="running_var"](%norm.53)
  %weight.108 : Tensor = prim::GetAttr[name="weight"](%norm.53)
  %bias.108 : Tensor = prim::GetAttr[name="bias"](%norm.53)
   = prim::If(%training.108) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %938 : int[] = aten::size(%x.80) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.212 : int = aten::__getitem__(%938, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %940 : int = aten::len(%938) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %941 : int = aten::sub(%940, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.214 : int = prim::Loop(%941, %62, %size_prods.212) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.54 : int, %size_prods.216 : int):
          %945 : int = aten::add(%i.54, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %946 : int = aten::__getitem__(%938, %945) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.218 : int = aten::mul(%size_prods.216, %946) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.218)
      %948 : bool = aten::eq(%size_prods.214, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%948) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %949 : str = aten::format(%38, %938) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%949) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.93 : Tensor = aten::batch_norm(%x.80, %weight.108, %bias.108, %running_mean.53, %running_var.53, %training.108, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.95 : Tensor = aten::add_(%out.93, %input.37, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.42 : Tensor = aten::relu_(%out.95) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.5 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %954 : bool = aten::__contains__(%_out_features.5, %name.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%954) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.7, %x.42) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_21.BottleneckBlock = prim::GetAttr[name="0"](%_2.1)
  %_1.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_23.BottleneckBlock = prim::GetAttr[name="1"](%_2.1)
  %_2.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_23.BottleneckBlock = prim::GetAttr[name="2"](%_2.1)
  %_3.4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_23.BottleneckBlock = prim::GetAttr[name="3"](%_2.1)
  %_4.1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_23.BottleneckBlock = prim::GetAttr[name="4"](%_2.1)
  %_5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_23.BottleneckBlock = prim::GetAttr[name="5"](%_2.1)
  %conv1.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_0.7)
  %weight.110 : Tensor = prim::GetAttr[name="weight"](%conv1.18)
  %bias.110 : Tensor? = prim::GetAttr[name="bias"](%conv1.18)
  %964 : int[] = prim::ListConstruct(%52, %52)
  %965 : int[] = prim::ListConstruct(%54, %54)
  %966 : int[] = prim::ListConstruct(%48, %48)
  %x.84 : Tensor = aten::conv2d(%x.42, %weight.110, %bias.110, %964, %965, %966, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.55 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.18)
  %training.110 : bool = prim::GetAttr[name="training"](%norm.55)
   = prim::If(%training.110) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.62 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.55)
      %971 : Tensor = aten::add(%num_batches_tracked.62, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.55, %971)
      -> ()
    block1():
      -> ()
  %training.112 : bool = prim::GetAttr[name="training"](%norm.55)
  %running_mean.55 : Tensor = prim::GetAttr[name="running_mean"](%norm.55)
  %running_var.55 : Tensor = prim::GetAttr[name="running_var"](%norm.55)
  %weight.112 : Tensor = prim::GetAttr[name="weight"](%norm.55)
  %bias.112 : Tensor = prim::GetAttr[name="bias"](%norm.55)
   = prim::If(%training.112) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %977 : int[] = aten::size(%x.84) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.220 : int = aten::__getitem__(%977, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %979 : int = aten::len(%977) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %980 : int = aten::sub(%979, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.222 : int = prim::Loop(%980, %62, %size_prods.220) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.56 : int, %size_prods.224 : int):
          %984 : int = aten::add(%i.56, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %985 : int = aten::__getitem__(%977, %984) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.226 : int = aten::mul(%size_prods.224, %985) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.226)
      %987 : bool = aten::eq(%size_prods.222, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%987) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %988 : str = aten::format(%38, %977) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%988) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.97 : Tensor = aten::batch_norm(%x.84, %weight.112, %bias.112, %running_mean.55, %running_var.55, %training.112, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.99 : Tensor = aten::relu_(%out.97) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_0.7)
  %weight.114 : Tensor = prim::GetAttr[name="weight"](%conv2.16)
  %bias.114 : Tensor? = prim::GetAttr[name="bias"](%conv2.16)
  %994 : int[] = prim::ListConstruct(%48, %48)
  %995 : int[] = prim::ListConstruct(%48, %48)
  %996 : int[] = prim::ListConstruct(%48, %48)
  %x.86 : Tensor = aten::conv2d(%out.99, %weight.114, %bias.114, %994, %995, %996, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.57 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.16)
  %training.114 : bool = prim::GetAttr[name="training"](%norm.57)
   = prim::If(%training.114) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.64 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.57)
      %1001 : Tensor = aten::add(%num_batches_tracked.64, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.57, %1001)
      -> ()
    block1():
      -> ()
  %training.116 : bool = prim::GetAttr[name="training"](%norm.57)
  %running_mean.57 : Tensor = prim::GetAttr[name="running_mean"](%norm.57)
  %running_var.57 : Tensor = prim::GetAttr[name="running_var"](%norm.57)
  %weight.116 : Tensor = prim::GetAttr[name="weight"](%norm.57)
  %bias.116 : Tensor = prim::GetAttr[name="bias"](%norm.57)
   = prim::If(%training.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1007 : int[] = aten::size(%x.86) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.228 : int = aten::__getitem__(%1007, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1009 : int = aten::len(%1007) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1010 : int = aten::sub(%1009, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.230 : int = prim::Loop(%1010, %62, %size_prods.228) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.58 : int, %size_prods.232 : int):
          %1014 : int = aten::add(%i.58, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1015 : int = aten::__getitem__(%1007, %1014) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.234 : int = aten::mul(%size_prods.232, %1015) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.234)
      %1017 : bool = aten::eq(%size_prods.230, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1017) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1018 : str = aten::format(%38, %1007) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1018) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.101 : Tensor = aten::batch_norm(%x.86, %weight.116, %bias.116, %running_mean.57, %running_var.57, %training.116, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.103 : Tensor = aten::relu_(%out.101) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_0.7)
  %weight.118 : Tensor = prim::GetAttr[name="weight"](%conv3.16)
  %bias.118 : Tensor? = prim::GetAttr[name="bias"](%conv3.16)
  %1024 : int[] = prim::ListConstruct(%48, %48)
  %1025 : int[] = prim::ListConstruct(%54, %54)
  %1026 : int[] = prim::ListConstruct(%48, %48)
  %x.88 : Tensor = aten::conv2d(%out.103, %weight.118, %bias.118, %1024, %1025, %1026, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.59 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.16)
  %training.118 : bool = prim::GetAttr[name="training"](%norm.59)
   = prim::If(%training.118) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.66 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.59)
      %1031 : Tensor = aten::add(%num_batches_tracked.66, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.59, %1031)
      -> ()
    block1():
      -> ()
  %training.120 : bool = prim::GetAttr[name="training"](%norm.59)
  %running_mean.59 : Tensor = prim::GetAttr[name="running_mean"](%norm.59)
  %running_var.59 : Tensor = prim::GetAttr[name="running_var"](%norm.59)
  %weight.120 : Tensor = prim::GetAttr[name="weight"](%norm.59)
  %bias.120 : Tensor = prim::GetAttr[name="bias"](%norm.59)
   = prim::If(%training.120) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1037 : int[] = aten::size(%x.88) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.236 : int = aten::__getitem__(%1037, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1039 : int = aten::len(%1037) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1040 : int = aten::sub(%1039, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.238 : int = prim::Loop(%1040, %62, %size_prods.236) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.60 : int, %size_prods.240 : int):
          %1044 : int = aten::add(%i.60, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1045 : int = aten::__getitem__(%1037, %1044) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.242 : int = aten::mul(%size_prods.240, %1045) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.242)
      %1047 : bool = aten::eq(%size_prods.238, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1047) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1048 : str = aten::format(%38, %1037) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1048) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.105 : Tensor = aten::batch_norm(%x.88, %weight.120, %bias.120, %running_mean.59, %running_var.59, %training.120, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %shortcut.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d = prim::GetAttr[name="shortcut"](%_0.7)
  %weight.122 : Tensor = prim::GetAttr[name="weight"](%shortcut.12)
  %bias.122 : Tensor? = prim::GetAttr[name="bias"](%shortcut.12)
  %1053 : int[] = prim::ListConstruct(%52, %52)
  %1054 : int[] = prim::ListConstruct(%54, %54)
  %1055 : int[] = prim::ListConstruct(%48, %48)
  %x.90 : Tensor = aten::conv2d(%x.42, %weight.122, %bias.122, %1053, %1054, %1055, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.61 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%shortcut.12)
  %training.122 : bool = prim::GetAttr[name="training"](%norm.61)
   = prim::If(%training.122) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.68 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.61)
      %1060 : Tensor = aten::add(%num_batches_tracked.68, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.61, %1060)
      -> ()
    block1():
      -> ()
  %training.124 : bool = prim::GetAttr[name="training"](%norm.61)
  %running_mean.61 : Tensor = prim::GetAttr[name="running_mean"](%norm.61)
  %running_var.61 : Tensor = prim::GetAttr[name="running_var"](%norm.61)
  %weight.124 : Tensor = prim::GetAttr[name="weight"](%norm.61)
  %bias.124 : Tensor = prim::GetAttr[name="bias"](%norm.61)
   = prim::If(%training.124) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1066 : int[] = aten::size(%x.90) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.244 : int = aten::__getitem__(%1066, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1068 : int = aten::len(%1066) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1069 : int = aten::sub(%1068, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.246 : int = prim::Loop(%1069, %62, %size_prods.244) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.62 : int, %size_prods.248 : int):
          %1073 : int = aten::add(%i.62, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1074 : int = aten::__getitem__(%1066, %1073) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.250 : int = aten::mul(%size_prods.248, %1074) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.250)
      %1076 : bool = aten::eq(%size_prods.246, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1076) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1077 : str = aten::format(%38, %1066) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1077) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %shortcut.14 : Tensor = aten::batch_norm(%x.90, %weight.124, %bias.124, %running_mean.61, %running_var.61, %training.124, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.107 : Tensor = aten::add_(%out.105, %shortcut.14, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.39 : Tensor = aten::relu_(%out.107) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_1.7)
  %weight.126 : Tensor = prim::GetAttr[name="weight"](%conv1.20)
  %bias.126 : Tensor? = prim::GetAttr[name="bias"](%conv1.20)
  %1084 : int[] = prim::ListConstruct(%48, %48)
  %1085 : int[] = prim::ListConstruct(%54, %54)
  %1086 : int[] = prim::ListConstruct(%48, %48)
  %x.92 : Tensor = aten::conv2d(%input.39, %weight.126, %bias.126, %1084, %1085, %1086, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.63 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.20)
  %training.126 : bool = prim::GetAttr[name="training"](%norm.63)
   = prim::If(%training.126) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.70 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.63)
      %1091 : Tensor = aten::add(%num_batches_tracked.70, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.63, %1091)
      -> ()
    block1():
      -> ()
  %training.128 : bool = prim::GetAttr[name="training"](%norm.63)
  %running_mean.63 : Tensor = prim::GetAttr[name="running_mean"](%norm.63)
  %running_var.63 : Tensor = prim::GetAttr[name="running_var"](%norm.63)
  %weight.128 : Tensor = prim::GetAttr[name="weight"](%norm.63)
  %bias.128 : Tensor = prim::GetAttr[name="bias"](%norm.63)
   = prim::If(%training.128) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1097 : int[] = aten::size(%x.92) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.252 : int = aten::__getitem__(%1097, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1099 : int = aten::len(%1097) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1100 : int = aten::sub(%1099, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.254 : int = prim::Loop(%1100, %62, %size_prods.252) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.64 : int, %size_prods.256 : int):
          %1104 : int = aten::add(%i.64, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1105 : int = aten::__getitem__(%1097, %1104) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.258 : int = aten::mul(%size_prods.256, %1105) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.258)
      %1107 : bool = aten::eq(%size_prods.254, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1107) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1108 : str = aten::format(%38, %1097) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1108) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.109 : Tensor = aten::batch_norm(%x.92, %weight.128, %bias.128, %running_mean.63, %running_var.63, %training.128, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.111 : Tensor = aten::relu_(%out.109) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_1.7)
  %weight.130 : Tensor = prim::GetAttr[name="weight"](%conv2.18)
  %bias.130 : Tensor? = prim::GetAttr[name="bias"](%conv2.18)
  %1114 : int[] = prim::ListConstruct(%48, %48)
  %1115 : int[] = prim::ListConstruct(%48, %48)
  %1116 : int[] = prim::ListConstruct(%48, %48)
  %x.94 : Tensor = aten::conv2d(%out.111, %weight.130, %bias.130, %1114, %1115, %1116, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.65 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.18)
  %training.130 : bool = prim::GetAttr[name="training"](%norm.65)
   = prim::If(%training.130) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.72 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.65)
      %1121 : Tensor = aten::add(%num_batches_tracked.72, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.65, %1121)
      -> ()
    block1():
      -> ()
  %training.132 : bool = prim::GetAttr[name="training"](%norm.65)
  %running_mean.65 : Tensor = prim::GetAttr[name="running_mean"](%norm.65)
  %running_var.65 : Tensor = prim::GetAttr[name="running_var"](%norm.65)
  %weight.132 : Tensor = prim::GetAttr[name="weight"](%norm.65)
  %bias.132 : Tensor = prim::GetAttr[name="bias"](%norm.65)
   = prim::If(%training.132) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1127 : int[] = aten::size(%x.94) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.260 : int = aten::__getitem__(%1127, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1129 : int = aten::len(%1127) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1130 : int = aten::sub(%1129, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.262 : int = prim::Loop(%1130, %62, %size_prods.260) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.66 : int, %size_prods.264 : int):
          %1134 : int = aten::add(%i.66, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1135 : int = aten::__getitem__(%1127, %1134) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.266 : int = aten::mul(%size_prods.264, %1135) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.266)
      %1137 : bool = aten::eq(%size_prods.262, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1137) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1138 : str = aten::format(%38, %1127) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1138) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.113 : Tensor = aten::batch_norm(%x.94, %weight.132, %bias.132, %running_mean.65, %running_var.65, %training.132, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.115 : Tensor = aten::relu_(%out.113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_1.7)
  %weight.134 : Tensor = prim::GetAttr[name="weight"](%conv3.18)
  %bias.134 : Tensor? = prim::GetAttr[name="bias"](%conv3.18)
  %1144 : int[] = prim::ListConstruct(%48, %48)
  %1145 : int[] = prim::ListConstruct(%54, %54)
  %1146 : int[] = prim::ListConstruct(%48, %48)
  %x.96 : Tensor = aten::conv2d(%out.115, %weight.134, %bias.134, %1144, %1145, %1146, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.67 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.18)
  %training.134 : bool = prim::GetAttr[name="training"](%norm.67)
   = prim::If(%training.134) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.74 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.67)
      %1151 : Tensor = aten::add(%num_batches_tracked.74, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.67, %1151)
      -> ()
    block1():
      -> ()
  %training.136 : bool = prim::GetAttr[name="training"](%norm.67)
  %running_mean.67 : Tensor = prim::GetAttr[name="running_mean"](%norm.67)
  %running_var.67 : Tensor = prim::GetAttr[name="running_var"](%norm.67)
  %weight.136 : Tensor = prim::GetAttr[name="weight"](%norm.67)
  %bias.136 : Tensor = prim::GetAttr[name="bias"](%norm.67)
   = prim::If(%training.136) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1157 : int[] = aten::size(%x.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.268 : int = aten::__getitem__(%1157, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1159 : int = aten::len(%1157) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1160 : int = aten::sub(%1159, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.270 : int = prim::Loop(%1160, %62, %size_prods.268) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.68 : int, %size_prods.272 : int):
          %1164 : int = aten::add(%i.68, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1165 : int = aten::__getitem__(%1157, %1164) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.274 : int = aten::mul(%size_prods.272, %1165) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.274)
      %1167 : bool = aten::eq(%size_prods.270, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1167) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1168 : str = aten::format(%38, %1157) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1168) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.117 : Tensor = aten::batch_norm(%x.96, %weight.136, %bias.136, %running_mean.67, %running_var.67, %training.136, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.119 : Tensor = aten::add_(%out.117, %input.39, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.41 : Tensor = aten::relu_(%out.119) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_2.7)
  %weight.27 : Tensor = prim::GetAttr[name="weight"](%conv1.5)
  %bias.27 : Tensor? = prim::GetAttr[name="bias"](%conv1.5)
  %1175 : int[] = prim::ListConstruct(%48, %48)
  %1176 : int[] = prim::ListConstruct(%54, %54)
  %1177 : int[] = prim::ListConstruct(%48, %48)
  %x.19 : Tensor = aten::conv2d(%input.41, %weight.27, %bias.27, %1175, %1176, %1177, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.14 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.5)
  %training.29 : bool = prim::GetAttr[name="training"](%norm.14)
   = prim::If(%training.29) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.21 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.14)
      %1182 : Tensor = aten::add(%num_batches_tracked.21, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.14, %1182)
      -> ()
    block1():
      -> ()
  %training.31 : bool = prim::GetAttr[name="training"](%norm.14)
  %running_mean.14 : Tensor = prim::GetAttr[name="running_mean"](%norm.14)
  %running_var.14 : Tensor = prim::GetAttr[name="running_var"](%norm.14)
  %weight.29 : Tensor = prim::GetAttr[name="weight"](%norm.14)
  %bias.29 : Tensor = prim::GetAttr[name="bias"](%norm.14)
   = prim::If(%training.31) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1188 : int[] = aten::size(%x.19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.57 : int = aten::__getitem__(%1188, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1190 : int = aten::len(%1188) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1191 : int = aten::sub(%1190, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.59 : int = prim::Loop(%1191, %62, %size_prods.57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.15 : int, %size_prods.61 : int):
          %1195 : int = aten::add(%i.15, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1196 : int = aten::__getitem__(%1188, %1195) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.63 : int = aten::mul(%size_prods.61, %1196) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.63)
      %1198 : bool = aten::eq(%size_prods.59, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1198) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1199 : str = aten::format(%38, %1188) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1199) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.36 : Tensor = aten::batch_norm(%x.19, %weight.29, %bias.29, %running_mean.14, %running_var.14, %training.31, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.38 : Tensor = aten::relu_(%out.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_2.7)
  %weight.31 : Tensor = prim::GetAttr[name="weight"](%conv2.5)
  %bias.31 : Tensor? = prim::GetAttr[name="bias"](%conv2.5)
  %1205 : int[] = prim::ListConstruct(%48, %48)
  %1206 : int[] = prim::ListConstruct(%48, %48)
  %1207 : int[] = prim::ListConstruct(%48, %48)
  %x.105 : Tensor = aten::conv2d(%out.38, %weight.31, %bias.31, %1205, %1206, %1207, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.16 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.5)
  %training.33 : bool = prim::GetAttr[name="training"](%norm.16)
   = prim::If(%training.33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.23 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.16)
      %1212 : Tensor = aten::add(%num_batches_tracked.23, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.16, %1212)
      -> ()
    block1():
      -> ()
  %training.35 : bool = prim::GetAttr[name="training"](%norm.16)
  %running_mean.16 : Tensor = prim::GetAttr[name="running_mean"](%norm.16)
  %running_var.16 : Tensor = prim::GetAttr[name="running_var"](%norm.16)
  %weight.33 : Tensor = prim::GetAttr[name="weight"](%norm.16)
  %bias.33 : Tensor = prim::GetAttr[name="bias"](%norm.16)
   = prim::If(%training.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1218 : int[] = aten::size(%x.105) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.65 : int = aten::__getitem__(%1218, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1220 : int = aten::len(%1218) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1221 : int = aten::sub(%1220, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.67 : int = prim::Loop(%1221, %62, %size_prods.65) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.17 : int, %size_prods.69 : int):
          %1225 : int = aten::add(%i.17, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1226 : int = aten::__getitem__(%1218, %1225) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.71 : int = aten::mul(%size_prods.69, %1226) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.71)
      %1228 : bool = aten::eq(%size_prods.67, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1228) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1229 : str = aten::format(%38, %1218) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1229) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.40 : Tensor = aten::batch_norm(%x.105, %weight.33, %bias.33, %running_mean.16, %running_var.16, %training.35, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.42 : Tensor = aten::relu_(%out.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_2.7)
  %weight.35 : Tensor = prim::GetAttr[name="weight"](%conv3.5)
  %bias.35 : Tensor? = prim::GetAttr[name="bias"](%conv3.5)
  %1235 : int[] = prim::ListConstruct(%48, %48)
  %1236 : int[] = prim::ListConstruct(%54, %54)
  %1237 : int[] = prim::ListConstruct(%48, %48)
  %x.23 : Tensor = aten::conv2d(%out.42, %weight.35, %bias.35, %1235, %1236, %1237, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.18 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.5)
  %training.37 : bool = prim::GetAttr[name="training"](%norm.18)
   = prim::If(%training.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.25 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.18)
      %1242 : Tensor = aten::add(%num_batches_tracked.25, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.18, %1242)
      -> ()
    block1():
      -> ()
  %training.39 : bool = prim::GetAttr[name="training"](%norm.18)
  %running_mean.18 : Tensor = prim::GetAttr[name="running_mean"](%norm.18)
  %running_var.18 : Tensor = prim::GetAttr[name="running_var"](%norm.18)
  %weight.37 : Tensor = prim::GetAttr[name="weight"](%norm.18)
  %bias.37 : Tensor = prim::GetAttr[name="bias"](%norm.18)
   = prim::If(%training.39) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1248 : int[] = aten::size(%x.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.73 : int = aten::__getitem__(%1248, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1250 : int = aten::len(%1248) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1251 : int = aten::sub(%1250, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.75 : int = prim::Loop(%1251, %62, %size_prods.73) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.19 : int, %size_prods.77 : int):
          %1255 : int = aten::add(%i.19, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1256 : int = aten::__getitem__(%1248, %1255) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.79 : int = aten::mul(%size_prods.77, %1256) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.79)
      %1258 : bool = aten::eq(%size_prods.75, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1258) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1259 : str = aten::format(%38, %1248) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1259) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.44 : Tensor = aten::batch_norm(%x.23, %weight.37, %bias.37, %running_mean.18, %running_var.18, %training.39, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.46 : Tensor = aten::add_(%out.44, %input.41, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.22 : Tensor = aten::relu_(%out.46) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_3.4)
  %weight.39 : Tensor = prim::GetAttr[name="weight"](%conv1.7)
  %bias.39 : Tensor? = prim::GetAttr[name="bias"](%conv1.7)
  %1266 : int[] = prim::ListConstruct(%48, %48)
  %1267 : int[] = prim::ListConstruct(%54, %54)
  %1268 : int[] = prim::ListConstruct(%48, %48)
  %x.107 : Tensor = aten::conv2d(%input.22, %weight.39, %bias.39, %1266, %1267, %1268, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.20 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.7)
  %training.41 : bool = prim::GetAttr[name="training"](%norm.20)
   = prim::If(%training.41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.27 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.20)
      %1273 : Tensor = aten::add(%num_batches_tracked.27, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.20, %1273)
      -> ()
    block1():
      -> ()
  %training.43 : bool = prim::GetAttr[name="training"](%norm.20)
  %running_mean.20 : Tensor = prim::GetAttr[name="running_mean"](%norm.20)
  %running_var.20 : Tensor = prim::GetAttr[name="running_var"](%norm.20)
  %weight.41 : Tensor = prim::GetAttr[name="weight"](%norm.20)
  %bias.41 : Tensor = prim::GetAttr[name="bias"](%norm.20)
   = prim::If(%training.43) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1279 : int[] = aten::size(%x.107) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.81 : int = aten::__getitem__(%1279, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1281 : int = aten::len(%1279) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1282 : int = aten::sub(%1281, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.83 : int = prim::Loop(%1282, %62, %size_prods.81) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.21 : int, %size_prods.85 : int):
          %1286 : int = aten::add(%i.21, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1287 : int = aten::__getitem__(%1279, %1286) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.87 : int = aten::mul(%size_prods.85, %1287) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.87)
      %1289 : bool = aten::eq(%size_prods.83, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1289) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1290 : str = aten::format(%38, %1279) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1290) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.48 : Tensor = aten::batch_norm(%x.107, %weight.41, %bias.41, %running_mean.20, %running_var.20, %training.43, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.50 : Tensor = aten::relu_(%out.48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_3.4)
  %weight.43 : Tensor = prim::GetAttr[name="weight"](%conv2.7)
  %bias.43 : Tensor? = prim::GetAttr[name="bias"](%conv2.7)
  %1296 : int[] = prim::ListConstruct(%48, %48)
  %1297 : int[] = prim::ListConstruct(%48, %48)
  %1298 : int[] = prim::ListConstruct(%48, %48)
  %x.27 : Tensor = aten::conv2d(%out.50, %weight.43, %bias.43, %1296, %1297, %1298, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.22 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.7)
  %training.45 : bool = prim::GetAttr[name="training"](%norm.22)
   = prim::If(%training.45) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.29 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.22)
      %1303 : Tensor = aten::add(%num_batches_tracked.29, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.22, %1303)
      -> ()
    block1():
      -> ()
  %training.47 : bool = prim::GetAttr[name="training"](%norm.22)
  %running_mean.22 : Tensor = prim::GetAttr[name="running_mean"](%norm.22)
  %running_var.22 : Tensor = prim::GetAttr[name="running_var"](%norm.22)
  %weight.45 : Tensor = prim::GetAttr[name="weight"](%norm.22)
  %bias.45 : Tensor = prim::GetAttr[name="bias"](%norm.22)
   = prim::If(%training.47) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1309 : int[] = aten::size(%x.27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.89 : int = aten::__getitem__(%1309, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1311 : int = aten::len(%1309) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1312 : int = aten::sub(%1311, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.91 : int = prim::Loop(%1312, %62, %size_prods.89) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.23 : int, %size_prods.93 : int):
          %1316 : int = aten::add(%i.23, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1317 : int = aten::__getitem__(%1309, %1316) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.95 : int = aten::mul(%size_prods.93, %1317) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.95)
      %1319 : bool = aten::eq(%size_prods.91, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1319) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1320 : str = aten::format(%38, %1309) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1320) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.52 : Tensor = aten::batch_norm(%x.27, %weight.45, %bias.45, %running_mean.22, %running_var.22, %training.47, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.54 : Tensor = aten::relu_(%out.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_3.4)
  %weight.47 : Tensor = prim::GetAttr[name="weight"](%conv3.7)
  %bias.47 : Tensor? = prim::GetAttr[name="bias"](%conv3.7)
  %1326 : int[] = prim::ListConstruct(%48, %48)
  %1327 : int[] = prim::ListConstruct(%54, %54)
  %1328 : int[] = prim::ListConstruct(%48, %48)
  %x.29 : Tensor = aten::conv2d(%out.54, %weight.47, %bias.47, %1326, %1327, %1328, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.24 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.7)
  %training.49 : bool = prim::GetAttr[name="training"](%norm.24)
   = prim::If(%training.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.31 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.24)
      %1333 : Tensor = aten::add(%num_batches_tracked.31, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.24, %1333)
      -> ()
    block1():
      -> ()
  %training.51 : bool = prim::GetAttr[name="training"](%norm.24)
  %running_mean.24 : Tensor = prim::GetAttr[name="running_mean"](%norm.24)
  %running_var.24 : Tensor = prim::GetAttr[name="running_var"](%norm.24)
  %weight.49 : Tensor = prim::GetAttr[name="weight"](%norm.24)
  %bias.49 : Tensor = prim::GetAttr[name="bias"](%norm.24)
   = prim::If(%training.51) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1339 : int[] = aten::size(%x.29) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.97 : int = aten::__getitem__(%1339, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1341 : int = aten::len(%1339) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1342 : int = aten::sub(%1341, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.99 : int = prim::Loop(%1342, %62, %size_prods.97) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.25 : int, %size_prods.101 : int):
          %1346 : int = aten::add(%i.25, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1347 : int = aten::__getitem__(%1339, %1346) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.103 : int = aten::mul(%size_prods.101, %1347) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.103)
      %1349 : bool = aten::eq(%size_prods.99, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1349) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1350 : str = aten::format(%38, %1339) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1350) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.56 : Tensor = aten::batch_norm(%x.29, %weight.49, %bias.49, %running_mean.24, %running_var.24, %training.51, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.58 : Tensor = aten::add_(%out.56, %input.22, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.27 : Tensor = aten::relu_(%out.58) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_4.1)
  %weight.51 : Tensor = prim::GetAttr[name="weight"](%conv1.9)
  %bias.51 : Tensor? = prim::GetAttr[name="bias"](%conv1.9)
  %1357 : int[] = prim::ListConstruct(%48, %48)
  %1358 : int[] = prim::ListConstruct(%54, %54)
  %1359 : int[] = prim::ListConstruct(%48, %48)
  %x.81 : Tensor = aten::conv2d(%input.27, %weight.51, %bias.51, %1357, %1358, %1359, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.26 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.9)
  %training.53 : bool = prim::GetAttr[name="training"](%norm.26)
   = prim::If(%training.53) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.33 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.26)
      %1364 : Tensor = aten::add(%num_batches_tracked.33, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.26, %1364)
      -> ()
    block1():
      -> ()
  %training.55 : bool = prim::GetAttr[name="training"](%norm.26)
  %running_mean.26 : Tensor = prim::GetAttr[name="running_mean"](%norm.26)
  %running_var.26 : Tensor = prim::GetAttr[name="running_var"](%norm.26)
  %weight.53 : Tensor = prim::GetAttr[name="weight"](%norm.26)
  %bias.53 : Tensor = prim::GetAttr[name="bias"](%norm.26)
   = prim::If(%training.55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1370 : int[] = aten::size(%x.81) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.105 : int = aten::__getitem__(%1370, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1372 : int = aten::len(%1370) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1373 : int = aten::sub(%1372, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.107 : int = prim::Loop(%1373, %62, %size_prods.105) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.27 : int, %size_prods.109 : int):
          %1377 : int = aten::add(%i.27, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1378 : int = aten::__getitem__(%1370, %1377) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.111 : int = aten::mul(%size_prods.109, %1378) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.111)
      %1380 : bool = aten::eq(%size_prods.107, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1380) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1381 : str = aten::format(%38, %1370) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1381) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.60 : Tensor = aten::batch_norm(%x.81, %weight.53, %bias.53, %running_mean.26, %running_var.26, %training.55, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.62 : Tensor = aten::relu_(%out.60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_4.1)
  %weight.55 : Tensor = prim::GetAttr[name="weight"](%conv2.9)
  %bias.55 : Tensor? = prim::GetAttr[name="bias"](%conv2.9)
  %1387 : int[] = prim::ListConstruct(%48, %48)
  %1388 : int[] = prim::ListConstruct(%48, %48)
  %1389 : int[] = prim::ListConstruct(%48, %48)
  %x.33 : Tensor = aten::conv2d(%out.62, %weight.55, %bias.55, %1387, %1388, %1389, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.28 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.9)
  %training.57 : bool = prim::GetAttr[name="training"](%norm.28)
   = prim::If(%training.57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.35 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.28)
      %1394 : Tensor = aten::add(%num_batches_tracked.35, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.28, %1394)
      -> ()
    block1():
      -> ()
  %training.59 : bool = prim::GetAttr[name="training"](%norm.28)
  %running_mean.28 : Tensor = prim::GetAttr[name="running_mean"](%norm.28)
  %running_var.28 : Tensor = prim::GetAttr[name="running_var"](%norm.28)
  %weight.57 : Tensor = prim::GetAttr[name="weight"](%norm.28)
  %bias.57 : Tensor = prim::GetAttr[name="bias"](%norm.28)
   = prim::If(%training.59) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1400 : int[] = aten::size(%x.33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.113 : int = aten::__getitem__(%1400, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1402 : int = aten::len(%1400) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1403 : int = aten::sub(%1402, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.115 : int = prim::Loop(%1403, %62, %size_prods.113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.29 : int, %size_prods.117 : int):
          %1407 : int = aten::add(%i.29, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1408 : int = aten::__getitem__(%1400, %1407) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.119 : int = aten::mul(%size_prods.117, %1408) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.119)
      %1410 : bool = aten::eq(%size_prods.115, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1410) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1411 : str = aten::format(%38, %1400) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1411) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.64 : Tensor = aten::batch_norm(%x.33, %weight.57, %bias.57, %running_mean.28, %running_var.28, %training.59, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.66 : Tensor = aten::relu_(%out.64) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_4.1)
  %weight.59 : Tensor = prim::GetAttr[name="weight"](%conv3.9)
  %bias.59 : Tensor? = prim::GetAttr[name="bias"](%conv3.9)
  %1417 : int[] = prim::ListConstruct(%48, %48)
  %1418 : int[] = prim::ListConstruct(%54, %54)
  %1419 : int[] = prim::ListConstruct(%48, %48)
  %x.35 : Tensor = aten::conv2d(%out.66, %weight.59, %bias.59, %1417, %1418, %1419, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.30 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.9)
  %training.61 : bool = prim::GetAttr[name="training"](%norm.30)
   = prim::If(%training.61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.37 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.30)
      %1424 : Tensor = aten::add(%num_batches_tracked.37, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.30, %1424)
      -> ()
    block1():
      -> ()
  %training.63 : bool = prim::GetAttr[name="training"](%norm.30)
  %running_mean.30 : Tensor = prim::GetAttr[name="running_mean"](%norm.30)
  %running_var.30 : Tensor = prim::GetAttr[name="running_var"](%norm.30)
  %weight.61 : Tensor = prim::GetAttr[name="weight"](%norm.30)
  %bias.61 : Tensor = prim::GetAttr[name="bias"](%norm.30)
   = prim::If(%training.63) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1430 : int[] = aten::size(%x.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.121 : int = aten::__getitem__(%1430, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1432 : int = aten::len(%1430) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1433 : int = aten::sub(%1432, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.123 : int = prim::Loop(%1433, %62, %size_prods.121) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.31 : int, %size_prods.125 : int):
          %1437 : int = aten::add(%i.31, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1438 : int = aten::__getitem__(%1430, %1437) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.127 : int = aten::mul(%size_prods.125, %1438) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.127)
      %1440 : bool = aten::eq(%size_prods.123, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1440) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1441 : str = aten::format(%38, %1430) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1441) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.68 : Tensor = aten::batch_norm(%x.35, %weight.61, %bias.61, %running_mean.30, %running_var.30, %training.63, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.70 : Tensor = aten::add_(%out.68, %input.27, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.29 : Tensor = aten::relu_(%out.70) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.22 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_5)
  %weight.138 : Tensor = prim::GetAttr[name="weight"](%conv1.22)
  %bias.138 : Tensor? = prim::GetAttr[name="bias"](%conv1.22)
  %1448 : int[] = prim::ListConstruct(%48, %48)
  %1449 : int[] = prim::ListConstruct(%54, %54)
  %1450 : int[] = prim::ListConstruct(%48, %48)
  %x.98 : Tensor = aten::conv2d(%input.29, %weight.138, %bias.138, %1448, %1449, %1450, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.69 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.22)
  %training.138 : bool = prim::GetAttr[name="training"](%norm.69)
   = prim::If(%training.138) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.76 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.69)
      %1455 : Tensor = aten::add(%num_batches_tracked.76, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.69, %1455)
      -> ()
    block1():
      -> ()
  %training.140 : bool = prim::GetAttr[name="training"](%norm.69)
  %running_mean.69 : Tensor = prim::GetAttr[name="running_mean"](%norm.69)
  %running_var.69 : Tensor = prim::GetAttr[name="running_var"](%norm.69)
  %weight.140 : Tensor = prim::GetAttr[name="weight"](%norm.69)
  %bias.140 : Tensor = prim::GetAttr[name="bias"](%norm.69)
   = prim::If(%training.140) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1461 : int[] = aten::size(%x.98) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.276 : int = aten::__getitem__(%1461, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1463 : int = aten::len(%1461) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1464 : int = aten::sub(%1463, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.278 : int = prim::Loop(%1464, %62, %size_prods.276) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.70 : int, %size_prods.280 : int):
          %1468 : int = aten::add(%i.70, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1469 : int = aten::__getitem__(%1461, %1468) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.282 : int = aten::mul(%size_prods.280, %1469) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.282)
      %1471 : bool = aten::eq(%size_prods.278, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1471) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1472 : str = aten::format(%38, %1461) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1472) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.121 : Tensor = aten::batch_norm(%x.98, %weight.140, %bias.140, %running_mean.69, %running_var.69, %training.140, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.123 : Tensor = aten::relu_(%out.121) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%_5)
  %weight.142 : Tensor = prim::GetAttr[name="weight"](%conv2.20)
  %bias.142 : Tensor? = prim::GetAttr[name="bias"](%conv2.20)
  %1478 : int[] = prim::ListConstruct(%48, %48)
  %1479 : int[] = prim::ListConstruct(%48, %48)
  %1480 : int[] = prim::ListConstruct(%48, %48)
  %x.100 : Tensor = aten::conv2d(%out.123, %weight.142, %bias.142, %1478, %1479, %1480, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.71 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.20)
  %training.142 : bool = prim::GetAttr[name="training"](%norm.71)
   = prim::If(%training.142) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.78 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.71)
      %1485 : Tensor = aten::add(%num_batches_tracked.78, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.71, %1485)
      -> ()
    block1():
      -> ()
  %training.144 : bool = prim::GetAttr[name="training"](%norm.71)
  %running_mean.71 : Tensor = prim::GetAttr[name="running_mean"](%norm.71)
  %running_var.71 : Tensor = prim::GetAttr[name="running_var"](%norm.71)
  %weight.144 : Tensor = prim::GetAttr[name="weight"](%norm.71)
  %bias.144 : Tensor = prim::GetAttr[name="bias"](%norm.71)
   = prim::If(%training.144) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1491 : int[] = aten::size(%x.100) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.284 : int = aten::__getitem__(%1491, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1493 : int = aten::len(%1491) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1494 : int = aten::sub(%1493, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.286 : int = prim::Loop(%1494, %62, %size_prods.284) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.72 : int, %size_prods.288 : int):
          %1498 : int = aten::add(%i.72, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1499 : int = aten::__getitem__(%1491, %1498) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.290 : int = aten::mul(%size_prods.288, %1499) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.290)
      %1501 : bool = aten::eq(%size_prods.286, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1501) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1502 : str = aten::format(%38, %1491) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1502) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.125 : Tensor = aten::batch_norm(%x.100, %weight.144, %bias.144, %running_mean.71, %running_var.71, %training.144, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.127 : Tensor = aten::relu_(%out.125) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_20.Conv2d = prim::GetAttr[name="conv3"](%_5)
  %weight.146 : Tensor = prim::GetAttr[name="weight"](%conv3.20)
  %bias.146 : Tensor? = prim::GetAttr[name="bias"](%conv3.20)
  %1508 : int[] = prim::ListConstruct(%48, %48)
  %1509 : int[] = prim::ListConstruct(%54, %54)
  %1510 : int[] = prim::ListConstruct(%48, %48)
  %x.102 : Tensor = aten::conv2d(%out.127, %weight.146, %bias.146, %1508, %1509, %1510, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.73 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_16.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.20)
  %training.146 : bool = prim::GetAttr[name="training"](%norm.73)
   = prim::If(%training.146) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.80 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.73)
      %1515 : Tensor = aten::add(%num_batches_tracked.80, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.73, %1515)
      -> ()
    block1():
      -> ()
  %training.148 : bool = prim::GetAttr[name="training"](%norm.73)
  %running_mean.73 : Tensor = prim::GetAttr[name="running_mean"](%norm.73)
  %running_var.73 : Tensor = prim::GetAttr[name="running_var"](%norm.73)
  %weight.148 : Tensor = prim::GetAttr[name="weight"](%norm.73)
  %bias.148 : Tensor = prim::GetAttr[name="bias"](%norm.73)
   = prim::If(%training.148) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1521 : int[] = aten::size(%x.102) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.292 : int = aten::__getitem__(%1521, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1523 : int = aten::len(%1521) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1524 : int = aten::sub(%1523, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.294 : int = prim::Loop(%1524, %62, %size_prods.292) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.74 : int, %size_prods.296 : int):
          %1528 : int = aten::add(%i.74, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1529 : int = aten::__getitem__(%1521, %1528) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.298 : int = aten::mul(%size_prods.296, %1529) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.298)
      %1531 : bool = aten::eq(%size_prods.294, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1531) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1532 : str = aten::format(%38, %1521) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1532) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.129 : Tensor = aten::batch_norm(%x.102, %weight.148, %bias.148, %running_mean.73, %running_var.73, %training.148, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.131 : Tensor = aten::add_(%out.129, %input.29, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.72 : Tensor = aten::relu_(%out.131) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.7 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %1537 : bool = aten::__contains__(%_out_features.7, %name.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%1537) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.13, %x.72) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.6 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_30.BottleneckBlock = prim::GetAttr[name="0"](%_3.1)
  %_1.2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_32.BottleneckBlock = prim::GetAttr[name="1"](%_3.1)
  %_2.2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_32.BottleneckBlock = prim::GetAttr[name="2"](%_3.1)
  %conv1.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_27.Conv2d = prim::GetAttr[name="conv1"](%_0.6)
  %weight.97 : Tensor = prim::GetAttr[name="weight"](%conv1.1)
  %bias.97 : Tensor? = prim::GetAttr[name="bias"](%conv1.1)
  %1544 : int[] = prim::ListConstruct(%52, %52)
  %1545 : int[] = prim::ListConstruct(%54, %54)
  %1546 : int[] = prim::ListConstruct(%48, %48)
  %x.87 : Tensor = aten::conv2d(%x.72, %weight.97, %bias.97, %1544, %1545, %1546, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.2 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.1)
  %training.5 : bool = prim::GetAttr[name="training"](%norm.2)
   = prim::If(%training.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.9 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.2)
      %1551 : Tensor = aten::add(%num_batches_tracked.9, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.2, %1551)
      -> ()
    block1():
      -> ()
  %training.7 : bool = prim::GetAttr[name="training"](%norm.2)
  %running_mean.2 : Tensor = prim::GetAttr[name="running_mean"](%norm.2)
  %running_var.2 : Tensor = prim::GetAttr[name="running_var"](%norm.2)
  %weight.113 : Tensor = prim::GetAttr[name="weight"](%norm.2)
  %bias.113 : Tensor = prim::GetAttr[name="bias"](%norm.2)
   = prim::If(%training.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1557 : int[] = aten::size(%x.87) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.3 : int = aten::__getitem__(%1557, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1559 : int = aten::len(%1557) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1560 : int = aten::sub(%1559, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.6 : int = prim::Loop(%1560, %62, %size_prods.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.3 : int, %size_prods.13 : int):
          %1564 : int = aten::add(%i.3, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1565 : int = aten::__getitem__(%1557, %1564) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.15 : int = aten::mul(%size_prods.13, %1565) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.15)
      %1567 : bool = aten::eq(%size_prods.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1567) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1568 : str = aten::format(%38, %1557) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1568) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.2 : Tensor = aten::batch_norm(%x.87, %weight.113, %bias.113, %running_mean.2, %running_var.2, %training.7, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.6 : Tensor = aten::relu_(%out.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d = prim::GetAttr[name="conv2"](%_0.6)
  %weight.115 : Tensor = prim::GetAttr[name="weight"](%conv2.1)
  %bias.115 : Tensor? = prim::GetAttr[name="bias"](%conv2.1)
  %1574 : int[] = prim::ListConstruct(%48, %48)
  %1575 : int[] = prim::ListConstruct(%48, %48)
  %1576 : int[] = prim::ListConstruct(%48, %48)
  %x.89 : Tensor = aten::conv2d(%out.6, %weight.115, %bias.115, %1574, %1575, %1576, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.4 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.1)
  %training.9 : bool = prim::GetAttr[name="training"](%norm.4)
   = prim::If(%training.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.11 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.4)
      %1581 : Tensor = aten::add(%num_batches_tracked.11, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.4, %1581)
      -> ()
    block1():
      -> ()
  %training.11 : bool = prim::GetAttr[name="training"](%norm.4)
  %running_mean.4 : Tensor = prim::GetAttr[name="running_mean"](%norm.4)
  %running_var.4 : Tensor = prim::GetAttr[name="running_var"](%norm.4)
  %weight.117 : Tensor = prim::GetAttr[name="weight"](%norm.4)
  %bias.117 : Tensor = prim::GetAttr[name="bias"](%norm.4)
   = prim::If(%training.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1587 : int[] = aten::size(%x.89) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.17 : int = aten::__getitem__(%1587, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1589 : int = aten::len(%1587) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1590 : int = aten::sub(%1589, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.19 : int = prim::Loop(%1590, %62, %size_prods.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.67 : int, %size_prods.21 : int):
          %1594 : int = aten::add(%i.67, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1595 : int = aten::__getitem__(%1587, %1594) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.23 : int = aten::mul(%size_prods.21, %1595) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.23)
      %1597 : bool = aten::eq(%size_prods.19, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1597) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1598 : str = aten::format(%38, %1587) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1598) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.10 : Tensor = aten::batch_norm(%x.89, %weight.117, %bias.117, %running_mean.4, %running_var.4, %training.11, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.14 : Tensor = aten::relu_(%out.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="conv3"](%_0.6)
  %weight.10 : Tensor = prim::GetAttr[name="weight"](%conv3.1)
  %bias.10 : Tensor? = prim::GetAttr[name="bias"](%conv3.1)
  %1604 : int[] = prim::ListConstruct(%48, %48)
  %1605 : int[] = prim::ListConstruct(%54, %54)
  %1606 : int[] = prim::ListConstruct(%48, %48)
  %x.95 : Tensor = aten::conv2d(%out.14, %weight.10, %bias.10, %1604, %1605, %1606, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.5 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_25.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.1)
  %training.10 : bool = prim::GetAttr[name="training"](%norm.5)
   = prim::If(%training.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.12 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.5)
      %1611 : Tensor = aten::add(%num_batches_tracked.12, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.5, %1611)
      -> ()
    block1():
      -> ()
  %training.12 : bool = prim::GetAttr[name="training"](%norm.5)
  %running_mean.5 : Tensor = prim::GetAttr[name="running_mean"](%norm.5)
  %running_var.5 : Tensor = prim::GetAttr[name="running_var"](%norm.5)
  %weight.12 : Tensor = prim::GetAttr[name="weight"](%norm.5)
  %bias.12 : Tensor = prim::GetAttr[name="bias"](%norm.5)
   = prim::If(%training.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1617 : int[] = aten::size(%x.95) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.24 : int = aten::__getitem__(%1617, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1619 : int = aten::len(%1617) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1620 : int = aten::sub(%1619, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.26 : int = prim::Loop(%1620, %62, %size_prods.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.59 : int, %size_prods.28 : int):
          %1624 : int = aten::add(%i.59, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1625 : int = aten::__getitem__(%1617, %1624) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.30 : int = aten::mul(%size_prods.28, %1625) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.30)
      %1627 : bool = aten::eq(%size_prods.26, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1627) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1628 : str = aten::format(%38, %1617) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1628) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.18 : Tensor = aten::batch_norm(%x.95, %weight.12, %bias.12, %running_mean.5, %running_var.5, %training.12, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="shortcut"](%_0.6)
  %weight.105 : Tensor = prim::GetAttr[name="weight"](%shortcut.3)
  %bias.105 : Tensor? = prim::GetAttr[name="bias"](%shortcut.3)
  %1633 : int[] = prim::ListConstruct(%52, %52)
  %1634 : int[] = prim::ListConstruct(%54, %54)
  %1635 : int[] = prim::ListConstruct(%48, %48)
  %x.79 : Tensor = aten::conv2d(%x.72, %weight.105, %bias.105, %1633, %1634, %1635, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.6 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_25.BatchNorm2d = prim::GetAttr[name="norm"](%shortcut.3)
  %training.13 : bool = prim::GetAttr[name="training"](%norm.6)
   = prim::If(%training.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.13 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.6)
      %1640 : Tensor = aten::add(%num_batches_tracked.13, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.6, %1640)
      -> ()
    block1():
      -> ()
  %training.15 : bool = prim::GetAttr[name="training"](%norm.6)
  %running_mean.6 : Tensor = prim::GetAttr[name="running_mean"](%norm.6)
  %running_var.6 : Tensor = prim::GetAttr[name="running_var"](%norm.6)
  %weight.107 : Tensor = prim::GetAttr[name="weight"](%norm.6)
  %bias.107 : Tensor = prim::GetAttr[name="bias"](%norm.6)
   = prim::If(%training.15) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1646 : int[] = aten::size(%x.79) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.25 : int = aten::__getitem__(%1646, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1648 : int = aten::len(%1646) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1649 : int = aten::sub(%1648, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.27 : int = prim::Loop(%1649, %62, %size_prods.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.45 : int, %size_prods.29 : int):
          %1653 : int = aten::add(%i.45, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1654 : int = aten::__getitem__(%1646, %1653) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.31 : int = aten::mul(%size_prods.29, %1654) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.31)
      %1656 : bool = aten::eq(%size_prods.27, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1656) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1657 : str = aten::format(%38, %1646) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1657) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %shortcut.5 : Tensor = aten::batch_norm(%x.79, %weight.107, %bias.107, %running_mean.6, %running_var.6, %training.15, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.22 : Tensor = aten::add_(%out.18, %shortcut.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.5 : Tensor = aten::relu_(%out.22) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="conv1"](%_1.2)
  %weight.15 : Tensor = prim::GetAttr[name="weight"](%conv1.3)
  %bias.15 : Tensor? = prim::GetAttr[name="bias"](%conv1.3)
  %1664 : int[] = prim::ListConstruct(%48, %48)
  %1665 : int[] = prim::ListConstruct(%54, %54)
  %1666 : int[] = prim::ListConstruct(%48, %48)
  %x.99 : Tensor = aten::conv2d(%input.5, %weight.15, %bias.15, %1664, %1665, %1666, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.8 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv1.3)
  %training.17 : bool = prim::GetAttr[name="training"](%norm.8)
   = prim::If(%training.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.15 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.8)
      %1671 : Tensor = aten::add(%num_batches_tracked.15, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.8, %1671)
      -> ()
    block1():
      -> ()
  %training.19 : bool = prim::GetAttr[name="training"](%norm.8)
  %running_mean.8 : Tensor = prim::GetAttr[name="running_mean"](%norm.8)
  %running_var.8 : Tensor = prim::GetAttr[name="running_var"](%norm.8)
  %weight.17 : Tensor = prim::GetAttr[name="weight"](%norm.8)
  %bias.17 : Tensor = prim::GetAttr[name="bias"](%norm.8)
   = prim::If(%training.19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1677 : int[] = aten::size(%x.99) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.33 : int = aten::__getitem__(%1677, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1679 : int = aten::len(%1677) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1680 : int = aten::sub(%1679, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.35 : int = prim::Loop(%1680, %62, %size_prods.33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.51 : int, %size_prods.37 : int):
          %1684 : int = aten::add(%i.51, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1685 : int = aten::__getitem__(%1677, %1684) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.39 : int = aten::mul(%size_prods.37, %1685) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.39)
      %1687 : bool = aten::eq(%size_prods.35, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1687) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1688 : str = aten::format(%38, %1677) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1688) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.24 : Tensor = aten::batch_norm(%x.99, %weight.17, %bias.17, %running_mean.8, %running_var.8, %training.19, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.26 : Tensor = aten::relu_(%out.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d = prim::GetAttr[name="conv2"](%_1.2)
  %weight.19 : Tensor = prim::GetAttr[name="weight"](%conv2.3)
  %bias.19 : Tensor? = prim::GetAttr[name="bias"](%conv2.3)
  %1694 : int[] = prim::ListConstruct(%48, %48)
  %1695 : int[] = prim::ListConstruct(%48, %48)
  %1696 : int[] = prim::ListConstruct(%48, %48)
  %x.15 : Tensor = aten::conv2d(%out.26, %weight.19, %bias.19, %1694, %1695, %1696, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.10 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv2.3)
  %training.21 : bool = prim::GetAttr[name="training"](%norm.10)
   = prim::If(%training.21) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.17 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.10)
      %1701 : Tensor = aten::add(%num_batches_tracked.17, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.10, %1701)
      -> ()
    block1():
      -> ()
  %training.23 : bool = prim::GetAttr[name="training"](%norm.10)
  %running_mean.10 : Tensor = prim::GetAttr[name="running_mean"](%norm.10)
  %running_var.10 : Tensor = prim::GetAttr[name="running_var"](%norm.10)
  %weight.21 : Tensor = prim::GetAttr[name="weight"](%norm.10)
  %bias.21 : Tensor = prim::GetAttr[name="bias"](%norm.10)
   = prim::If(%training.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1707 : int[] = aten::size(%x.15) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.41 : int = aten::__getitem__(%1707, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1709 : int = aten::len(%1707) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1710 : int = aten::sub(%1709, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.43 : int = prim::Loop(%1710, %62, %size_prods.41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.55 : int, %size_prods.45 : int):
          %1714 : int = aten::add(%i.55, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1715 : int = aten::__getitem__(%1707, %1714) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.47 : int = aten::mul(%size_prods.45, %1715) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.47)
      %1717 : bool = aten::eq(%size_prods.43, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1717) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1718 : str = aten::format(%38, %1707) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1718) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.28 : Tensor = aten::batch_norm(%x.15, %weight.21, %bias.21, %running_mean.10, %running_var.10, %training.23, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.30 : Tensor = aten::relu_(%out.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="conv3"](%_1.2)
  %weight.23 : Tensor = prim::GetAttr[name="weight"](%conv3.3)
  %bias.23 : Tensor? = prim::GetAttr[name="bias"](%conv3.3)
  %1724 : int[] = prim::ListConstruct(%48, %48)
  %1725 : int[] = prim::ListConstruct(%54, %54)
  %1726 : int[] = prim::ListConstruct(%48, %48)
  %x.103 : Tensor = aten::conv2d(%out.30, %weight.23, %bias.23, %1724, %1725, %1726, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.12 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_25.BatchNorm2d = prim::GetAttr[name="norm"](%conv3.3)
  %training.25 : bool = prim::GetAttr[name="training"](%norm.12)
   = prim::If(%training.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.19 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.12)
      %1731 : Tensor = aten::add(%num_batches_tracked.19, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.12, %1731)
      -> ()
    block1():
      -> ()
  %training.27 : bool = prim::GetAttr[name="training"](%norm.12)
  %running_mean.12 : Tensor = prim::GetAttr[name="running_mean"](%norm.12)
  %running_var.12 : Tensor = prim::GetAttr[name="running_var"](%norm.12)
  %weight.25 : Tensor = prim::GetAttr[name="weight"](%norm.12)
  %bias.25 : Tensor = prim::GetAttr[name="bias"](%norm.12)
   = prim::If(%training.27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1737 : int[] = aten::size(%x.103) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.49 : int = aten::__getitem__(%1737, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1739 : int = aten::len(%1737) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1740 : int = aten::sub(%1739, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.51 : int = prim::Loop(%1740, %62, %size_prods.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.39 : int, %size_prods.53 : int):
          %1744 : int = aten::add(%i.39, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1745 : int = aten::__getitem__(%1737, %1744) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.55 : int = aten::mul(%size_prods.53, %1745) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.55)
      %1747 : bool = aten::eq(%size_prods.51, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1747) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1748 : str = aten::format(%38, %1737) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1748) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.32 : Tensor = aten::batch_norm(%x.103, %weight.25, %bias.25, %running_mean.12, %running_var.12, %training.27, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.34 : Tensor = aten::add_(%out.32, %input.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.9 : Tensor = aten::relu_(%out.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="conv1"](%_2.2)
  %weight.101 : Tensor = prim::GetAttr[name="weight"](%conv1)
  %bias.101 : Tensor? = prim::GetAttr[name="bias"](%conv1)
  %1755 : int[] = prim::ListConstruct(%48, %48)
  %1756 : int[] = prim::ListConstruct(%54, %54)
  %1757 : int[] = prim::ListConstruct(%48, %48)
  %x.91 : Tensor = aten::conv2d(%input.9, %weight.101, %bias.101, %1755, %1756, %1757, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.1 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv1)
  %training.2 : bool = prim::GetAttr[name="training"](%norm.1)
   = prim::If(%training.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.8 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.1)
      %1762 : Tensor = aten::add(%num_batches_tracked.8, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.1, %1762)
      -> ()
    block1():
      -> ()
  %training.4 : bool = prim::GetAttr[name="training"](%norm.1)
  %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%norm.1)
  %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%norm.1)
  %weight.103 : Tensor = prim::GetAttr[name="weight"](%norm.1)
  %bias.103 : Tensor = prim::GetAttr[name="bias"](%norm.1)
   = prim::If(%training.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1768 : int[] = aten::size(%x.91) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.2 : int = aten::__getitem__(%1768, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1770 : int = aten::len(%1768) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1771 : int = aten::sub(%1770, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.4 : int = prim::Loop(%1771, %62, %size_prods.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.63 : int, %size_prods.12 : int):
          %1775 : int = aten::add(%i.63, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1776 : int = aten::__getitem__(%1768, %1775) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.14 : int = aten::mul(%size_prods.12, %1776) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.14)
      %1778 : bool = aten::eq(%size_prods.4, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1778) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1779 : str = aten::format(%38, %1768) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1779) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.1 : Tensor = aten::batch_norm(%x.91, %weight.103, %bias.103, %running_mean.1, %running_var.1, %training.4, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.5 : Tensor = aten::relu_(%out.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d = prim::GetAttr[name="conv2"](%_2.2)
  %weight.6 : Tensor = prim::GetAttr[name="weight"](%conv2)
  %bias.6 : Tensor? = prim::GetAttr[name="bias"](%conv2)
  %1785 : int[] = prim::ListConstruct(%48, %48)
  %1786 : int[] = prim::ListConstruct(%48, %48)
  %1787 : int[] = prim::ListConstruct(%48, %48)
  %x.61 : Tensor = aten::conv2d(%out.5, %weight.6, %bias.6, %1785, %1786, %1787, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.3 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_6.BatchNorm2d = prim::GetAttr[name="norm"](%conv2)
  %training.6 : bool = prim::GetAttr[name="training"](%norm.3)
   = prim::If(%training.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.10 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.3)
      %1792 : Tensor = aten::add(%num_batches_tracked.10, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.3, %1792)
      -> ()
    block1():
      -> ()
  %training.8 : bool = prim::GetAttr[name="training"](%norm.3)
  %running_mean.3 : Tensor = prim::GetAttr[name="running_mean"](%norm.3)
  %running_var.3 : Tensor = prim::GetAttr[name="running_var"](%norm.3)
  %weight.8 : Tensor = prim::GetAttr[name="weight"](%norm.3)
  %bias.8 : Tensor = prim::GetAttr[name="bias"](%norm.3)
   = prim::If(%training.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1798 : int[] = aten::size(%x.61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.16 : int = aten::__getitem__(%1798, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1800 : int = aten::len(%1798) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1801 : int = aten::sub(%1800, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.18 : int = prim::Loop(%1801, %62, %size_prods.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.57 : int, %size_prods.20 : int):
          %1805 : int = aten::add(%i.57, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1806 : int = aten::__getitem__(%1798, %1805) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.22 : int = aten::mul(%size_prods.20, %1806) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.22)
      %1808 : bool = aten::eq(%size_prods.18, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1808) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1809 : str = aten::format(%38, %1798) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1809) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.9 : Tensor = aten::batch_norm(%x.61, %weight.8, %bias.8, %running_mean.3, %running_var.3, %training.8, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.13 : Tensor = aten::relu_(%out.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="conv3"](%_2.2)
  %weight.63 : Tensor = prim::GetAttr[name="weight"](%conv3)
  %bias.63 : Tensor? = prim::GetAttr[name="bias"](%conv3)
  %1815 : int[] = prim::ListConstruct(%48, %48)
  %1816 : int[] = prim::ListConstruct(%54, %54)
  %1817 : int[] = prim::ListConstruct(%48, %48)
  %x.67 : Tensor = aten::conv2d(%out.13, %weight.63, %bias.63, %1815, %1816, %1817, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.32 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_25.BatchNorm2d = prim::GetAttr[name="norm"](%conv3)
  %training.65 : bool = prim::GetAttr[name="training"](%norm.32)
   = prim::If(%training.65) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.39 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.32)
      %1822 : Tensor = aten::add(%num_batches_tracked.39, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.32, %1822)
      -> ()
    block1():
      -> ()
  %training.67 : bool = prim::GetAttr[name="training"](%norm.32)
  %running_mean.32 : Tensor = prim::GetAttr[name="running_mean"](%norm.32)
  %running_var.32 : Tensor = prim::GetAttr[name="running_var"](%norm.32)
  %weight.65 : Tensor = prim::GetAttr[name="weight"](%norm.32)
  %bias.65 : Tensor = prim::GetAttr[name="bias"](%norm.32)
   = prim::If(%training.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1828 : int[] = aten::size(%x.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.8 : int = aten::__getitem__(%1828, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1830 : int = aten::len(%1828) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1831 : int = aten::sub(%1830, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.10 : int = prim::Loop(%1831, %62, %size_prods.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.33 : int, %size_prods.129 : int):
          %1835 : int = aten::add(%i.33, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1836 : int = aten::__getitem__(%1828, %1835) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.131 : int = aten::mul(%size_prods.129, %1836) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.131)
      %1838 : bool = aten::eq(%size_prods.10, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1838) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1839 : str = aten::format(%38, %1828) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1839) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %out.17 : Tensor = aten::batch_norm(%x.67, %weight.65, %bias.65, %running_mean.32, %running_var.32, %training.67, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %out.21 : Tensor = aten::add_(%out.17, %input.9, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.74 : Tensor = aten::relu_(%out.21) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %1844 : bool = aten::__contains__(%_out_features, %name.19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%1844) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.19, %x.74) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %results.1 : Tensor[] = prim::ListConstruct()
  %lateral_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_37.ModuleList = prim::GetAttr[name="lateral_convs"](%backbone.2)
  %_0.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="0"](%lateral_convs.1)
  %in_features.1 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %1849 : str = prim::TupleIndex(%in_features.1, %57)
  %1850 : Tensor = aten::__getitem__(%bottom_up_features.1, %1849) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:141:46
  %weight.67 : Tensor = prim::GetAttr[name="weight"](%_0.2)
  %bias.67 : Tensor? = prim::GetAttr[name="bias"](%_0.2)
  %1853 : int[] = prim::ListConstruct(%48, %48)
  %1854 : int[] = prim::ListConstruct(%54, %54)
  %1855 : int[] = prim::ListConstruct(%48, %48)
  %x.71 : Tensor = aten::conv2d(%1850, %weight.67, %bias.67, %1853, %1854, %1855, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.34 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_0.2)
  %training.69 : bool = prim::GetAttr[name="training"](%norm.34)
   = prim::If(%training.69) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.41 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.34)
      %1860 : Tensor = aten::add(%num_batches_tracked.41, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.34, %1860)
      -> ()
    block1():
      -> ()
  %training.71 : bool = prim::GetAttr[name="training"](%norm.34)
  %running_mean.34 : Tensor = prim::GetAttr[name="running_mean"](%norm.34)
  %running_var.34 : Tensor = prim::GetAttr[name="running_var"](%norm.34)
  %weight.69 : Tensor = prim::GetAttr[name="weight"](%norm.34)
  %bias.69 : Tensor = prim::GetAttr[name="bias"](%norm.34)
   = prim::If(%training.71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1866 : int[] = aten::size(%x.71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.133 : int = aten::__getitem__(%1866, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1868 : int = aten::len(%1866) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1869 : int = aten::sub(%1868, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.135 : int = prim::Loop(%1869, %62, %size_prods.133) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.35 : int, %size_prods.137 : int):
          %1873 : int = aten::add(%i.35, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1874 : int = aten::__getitem__(%1866, %1873) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.139 : int = aten::mul(%size_prods.137, %1874) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.139)
      %1876 : bool = aten::eq(%size_prods.135, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1876) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1877 : str = aten::format(%38, %1866) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1877) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %prev_features.1 : Tensor = aten::batch_norm(%x.71, %weight.69, %bias.69, %running_mean.34, %running_var.34, %training.71, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %output_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="output_convs"](%backbone.2)
  %_0.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="0"](%output_convs.1)
  %weight.71 : Tensor = prim::GetAttr[name="weight"](%_0.4)
  %bias.71 : Tensor? = prim::GetAttr[name="bias"](%_0.4)
  %1883 : int[] = prim::ListConstruct(%48, %48)
  %1884 : int[] = prim::ListConstruct(%48, %48)
  %1885 : int[] = prim::ListConstruct(%48, %48)
  %x.37 : Tensor = aten::conv2d(%prev_features.1, %weight.71, %bias.71, %1883, %1884, %1885, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.36 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_0.4)
  %training.73 : bool = prim::GetAttr[name="training"](%norm.36)
   = prim::If(%training.73) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.43 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.36)
      %1890 : Tensor = aten::add(%num_batches_tracked.43, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.36, %1890)
      -> ()
    block1():
      -> ()
  %training.75 : bool = prim::GetAttr[name="training"](%norm.36)
  %running_mean.36 : Tensor = prim::GetAttr[name="running_mean"](%norm.36)
  %running_var.36 : Tensor = prim::GetAttr[name="running_var"](%norm.36)
  %weight.73 : Tensor = prim::GetAttr[name="weight"](%norm.36)
  %bias.73 : Tensor = prim::GetAttr[name="bias"](%norm.36)
   = prim::If(%training.75) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1896 : int[] = aten::size(%x.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.141 : int = aten::__getitem__(%1896, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1898 : int = aten::len(%1896) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1899 : int = aten::sub(%1898, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.143 : int = prim::Loop(%1899, %62, %size_prods.141) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.37 : int, %size_prods.145 : int):
          %1903 : int = aten::add(%i.37, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1904 : int = aten::__getitem__(%1896, %1903) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.147 : int = aten::mul(%size_prods.145, %1904) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.147)
      %1906 : bool = aten::eq(%size_prods.143, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1906) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1907 : str = aten::format(%38, %1896) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1907) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %x.39 : Tensor = aten::batch_norm(%x.37, %weight.73, %bias.73, %running_mean.36, %running_var.36, %training.75, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %1909 : Tensor[] = aten::append(%results.1, %x.39) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:8
  %lateral_convs : __torch__.torch.nn.modules.container.___torch_mangle_37.ModuleList = prim::GetAttr[name="lateral_convs"](%backbone.2)
  %_1.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="1"](%lateral_convs)
  %_2.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d = prim::GetAttr[name="2"](%lateral_convs)
  %_3.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="3"](%lateral_convs)
  %output_convs : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="output_convs"](%backbone.2)
  %_1.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="1"](%output_convs)
  %_2.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="2"](%output_convs)
  %_3.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="3"](%output_convs)
  %in_features.5 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.10 : str = prim::TupleIndex(%in_features.5, %56)
  %features.13 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:27
  %1921 : Tensor = prim::Uninitialized()
  %1922 : str[] = prim::ListConstruct(%33, %42)
  %1923 : bool = aten::__contains__(%1922, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:7
   = prim::If(%1923) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:4
    block0():
      -> ()
    block1():
      %1924 : str = aten::format(%43, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3632:16
       = aten::warn[warn_id=6](%1924, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3631:12
      -> ()
  %1925 : int = aten::dim(%prev_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %dim.2 : int = aten::sub(%1925, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %scale_factors.96 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.2, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
    block0(%1928 : int):
      %1929 : float[] = aten::append(%scale_factors.96, %34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
      -> (%62)
  %1930 : int = aten::len(%scale_factors.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
  %1931 : bool = aten::gt(%1930, %54)
  %1932 : int = prim::Loop(%44, %1931, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
    block0(%1933 : int, %1934 : int):
      %scale.2 : float = aten::__getitem__(%scale_factors.96, %1934) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
      %1936 : int = aten::floor(%scale.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %1937 : bool = aten::ne(%1936, %scale.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %1938 : bool = prim::If(%1937) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:16
        block0():
           = aten::warn[warn_id=7](%45, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3679:20
          -> (%50)
        block1():
          -> (%62)
      %1939 : int = aten::add(%1934, %48)
      %1940 : bool = aten::lt(%1939, %1930)
      %1941 : bool = aten::__and__(%1940, %1938)
      -> (%1941, %1939)
  %1942 : int = aten::dim(%prev_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %1943 : bool = aten::eq(%1942, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %top_down_features.5 : Tensor = prim::If(%1943) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:4
    block0():
      %1945 : Tensor = aten::upsample_nearest1d(%prev_features.1, %61, %scale_factors.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3710:15
      -> (%1945)
    block1():
      %1946 : int = aten::dim(%prev_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %1947 : bool = aten::eq(%1946, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %1948 : Tensor = prim::If(%1947) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:4
        block0():
          %1949 : Tensor = aten::upsample_nearest2d(%prev_features.1, %61, %scale_factors.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3712:15
          -> (%1949)
        block1():
          %1950 : int = aten::dim(%prev_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %1951 : bool = aten::eq(%1950, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %1952 : Tensor = prim::If(%1951) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:4
            block0():
              %1953 : Tensor = aten::upsample_nearest3d(%prev_features.1, %61, %scale_factors.96) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3714:15
              -> (%1953)
            block1():
              %1954 : int = aten::dim(%prev_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3755:27
              %1955 : str = aten::format(%46, %1954, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3753:8
               = prim::RaiseException(%1955) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3752:4
              -> (%1921)
          -> (%1952)
      -> (%1948)
  %weight.75 : Tensor = prim::GetAttr[name="weight"](%_1.6)
  %bias.75 : Tensor? = prim::GetAttr[name="bias"](%_1.6)
  %1958 : int[] = prim::ListConstruct(%48, %48)
  %1959 : int[] = prim::ListConstruct(%54, %54)
  %1960 : int[] = prim::ListConstruct(%48, %48)
  %x.41 : Tensor = aten::conv2d(%features.13, %weight.75, %bias.75, %1958, %1959, %1960, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.38 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_1.6)
  %training.77 : bool = prim::GetAttr[name="training"](%norm.38)
   = prim::If(%training.77) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.45 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.38)
      %1965 : Tensor = aten::add(%num_batches_tracked.45, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.38, %1965)
      -> ()
    block1():
      -> ()
  %training.79 : bool = prim::GetAttr[name="training"](%norm.38)
  %running_mean.38 : Tensor = prim::GetAttr[name="running_mean"](%norm.38)
  %running_var.38 : Tensor = prim::GetAttr[name="running_var"](%norm.38)
  %weight.77 : Tensor = prim::GetAttr[name="weight"](%norm.38)
  %bias.77 : Tensor = prim::GetAttr[name="bias"](%norm.38)
   = prim::If(%training.79) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %1971 : int[] = aten::size(%x.41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.149 : int = aten::__getitem__(%1971, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %1973 : int = aten::len(%1971) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %1974 : int = aten::sub(%1973, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.151 : int = prim::Loop(%1974, %62, %size_prods.149) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.41 : int, %size_prods.153 : int):
          %1978 : int = aten::add(%i.41, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %1979 : int = aten::__getitem__(%1971, %1978) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.155 : int = aten::mul(%size_prods.153, %1979) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.155)
      %1981 : bool = aten::eq(%size_prods.151, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%1981) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %1982 : str = aten::format(%38, %1971) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%1982) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %lateral_features.5 : Tensor = aten::batch_norm(%x.41, %weight.77, %bias.77, %running_mean.38, %running_var.38, %training.79, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %prev_features.37 : Tensor = aten::add(%lateral_features.5, %top_down_features.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:155:32
  %weight.79 : Tensor = prim::GetAttr[name="weight"](%_1.8)
  %bias.79 : Tensor? = prim::GetAttr[name="bias"](%_1.8)
  %1987 : int[] = prim::ListConstruct(%48, %48)
  %1988 : int[] = prim::ListConstruct(%48, %48)
  %1989 : int[] = prim::ListConstruct(%48, %48)
  %x.43 : Tensor = aten::conv2d(%prev_features.37, %weight.79, %bias.79, %1987, %1988, %1989, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.40 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_1.8)
  %training.81 : bool = prim::GetAttr[name="training"](%norm.40)
   = prim::If(%training.81) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.47 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.40)
      %1994 : Tensor = aten::add(%num_batches_tracked.47, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.40, %1994)
      -> ()
    block1():
      -> ()
  %training.83 : bool = prim::GetAttr[name="training"](%norm.40)
  %running_mean.40 : Tensor = prim::GetAttr[name="running_mean"](%norm.40)
  %running_var.40 : Tensor = prim::GetAttr[name="running_var"](%norm.40)
  %weight.81 : Tensor = prim::GetAttr[name="weight"](%norm.40)
  %bias.81 : Tensor = prim::GetAttr[name="bias"](%norm.40)
   = prim::If(%training.83) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %2000 : int[] = aten::size(%x.43) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.157 : int = aten::__getitem__(%2000, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %2002 : int = aten::len(%2000) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %2003 : int = aten::sub(%2002, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.159 : int = prim::Loop(%2003, %62, %size_prods.157) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.43 : int, %size_prods.161 : int):
          %2007 : int = aten::add(%i.43, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %2008 : int = aten::__getitem__(%2000, %2007) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.163 : int = aten::mul(%size_prods.161, %2008) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.163)
      %2010 : bool = aten::eq(%size_prods.159, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%2010) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %2011 : str = aten::format(%38, %2000) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%2011) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %x.45 : Tensor = aten::batch_norm(%x.43, %weight.81, %bias.81, %running_mean.40, %running_var.40, %training.83, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
   = aten::insert(%results.1, %54, %x.45) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:158:16
  %in_features.7 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.17 : str = prim::TupleIndex(%in_features.7, %32)
  %features.21 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:27
  %2016 : Tensor = prim::Uninitialized()
  %2017 : str[] = prim::ListConstruct(%33, %42)
  %2018 : bool = aten::__contains__(%2017, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:7
   = prim::If(%2018) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:4
    block0():
      -> ()
    block1():
      %2019 : str = aten::format(%43, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3632:16
       = aten::warn[warn_id=6](%2019, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3631:12
      -> ()
  %2020 : int = aten::dim(%prev_features.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %dim.4 : int = aten::sub(%2020, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %scale_factors.116 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.4, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
    block0(%2023 : int):
      %2024 : float[] = aten::append(%scale_factors.116, %34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
      -> (%62)
  %2025 : int = aten::len(%scale_factors.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
  %2026 : bool = aten::gt(%2025, %54)
  %2027 : int = prim::Loop(%44, %2026, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
    block0(%2028 : int, %2029 : int):
      %scale.4 : float = aten::__getitem__(%scale_factors.116, %2029) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
      %2031 : int = aten::floor(%scale.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %2032 : bool = aten::ne(%2031, %scale.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %2033 : bool = prim::If(%2032) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:16
        block0():
           = aten::warn[warn_id=7](%45, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3679:20
          -> (%50)
        block1():
          -> (%62)
      %2034 : int = aten::add(%2029, %48)
      %2035 : bool = aten::lt(%2034, %2025)
      %2036 : bool = aten::__and__(%2035, %2033)
      -> (%2036, %2034)
  %2037 : int = aten::dim(%prev_features.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %2038 : bool = aten::eq(%2037, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %top_down_features.9 : Tensor = prim::If(%2038) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:4
    block0():
      %2040 : Tensor = aten::upsample_nearest1d(%prev_features.37, %61, %scale_factors.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3710:15
      -> (%2040)
    block1():
      %2041 : int = aten::dim(%prev_features.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %2042 : bool = aten::eq(%2041, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %2043 : Tensor = prim::If(%2042) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:4
        block0():
          %2044 : Tensor = aten::upsample_nearest2d(%prev_features.37, %61, %scale_factors.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3712:15
          -> (%2044)
        block1():
          %2045 : int = aten::dim(%prev_features.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %2046 : bool = aten::eq(%2045, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %2047 : Tensor = prim::If(%2046) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:4
            block0():
              %2048 : Tensor = aten::upsample_nearest3d(%prev_features.37, %61, %scale_factors.116) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3714:15
              -> (%2048)
            block1():
              %2049 : int = aten::dim(%prev_features.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3755:27
              %2050 : str = aten::format(%46, %2049, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3753:8
               = prim::RaiseException(%2050) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3752:4
              -> (%2016)
          -> (%2047)
      -> (%2043)
  %weight.83 : Tensor = prim::GetAttr[name="weight"](%_2.6)
  %bias.83 : Tensor? = prim::GetAttr[name="bias"](%_2.6)
  %2053 : int[] = prim::ListConstruct(%48, %48)
  %2054 : int[] = prim::ListConstruct(%54, %54)
  %2055 : int[] = prim::ListConstruct(%48, %48)
  %x.47 : Tensor = aten::conv2d(%features.21, %weight.83, %bias.83, %2053, %2054, %2055, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.42 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_2.6)
  %training.85 : bool = prim::GetAttr[name="training"](%norm.42)
   = prim::If(%training.85) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.49 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.42)
      %2060 : Tensor = aten::add(%num_batches_tracked.49, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.42, %2060)
      -> ()
    block1():
      -> ()
  %training.87 : bool = prim::GetAttr[name="training"](%norm.42)
  %running_mean.42 : Tensor = prim::GetAttr[name="running_mean"](%norm.42)
  %running_var.42 : Tensor = prim::GetAttr[name="running_var"](%norm.42)
  %weight.85 : Tensor = prim::GetAttr[name="weight"](%norm.42)
  %bias.85 : Tensor = prim::GetAttr[name="bias"](%norm.42)
   = prim::If(%training.87) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %2066 : int[] = aten::size(%x.47) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.165 : int = aten::__getitem__(%2066, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %2068 : int = aten::len(%2066) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %2069 : int = aten::sub(%2068, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.167 : int = prim::Loop(%2069, %62, %size_prods.165) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.47 : int, %size_prods.169 : int):
          %2073 : int = aten::add(%i.47, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %2074 : int = aten::__getitem__(%2066, %2073) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.171 : int = aten::mul(%size_prods.169, %2074) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.171)
      %2076 : bool = aten::eq(%size_prods.167, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%2076) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %2077 : str = aten::format(%38, %2066) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%2077) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %lateral_features.9 : Tensor = aten::batch_norm(%x.47, %weight.85, %bias.85, %running_mean.42, %running_var.42, %training.87, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %prev_features.67 : Tensor = aten::add(%lateral_features.9, %top_down_features.9, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:155:32
  %weight.87 : Tensor = prim::GetAttr[name="weight"](%_2.8)
  %bias.87 : Tensor? = prim::GetAttr[name="bias"](%_2.8)
  %2082 : int[] = prim::ListConstruct(%48, %48)
  %2083 : int[] = prim::ListConstruct(%48, %48)
  %2084 : int[] = prim::ListConstruct(%48, %48)
  %x.49 : Tensor = aten::conv2d(%prev_features.67, %weight.87, %bias.87, %2082, %2083, %2084, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.44 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_2.8)
  %training.89 : bool = prim::GetAttr[name="training"](%norm.44)
   = prim::If(%training.89) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.51 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.44)
      %2089 : Tensor = aten::add(%num_batches_tracked.51, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.44, %2089)
      -> ()
    block1():
      -> ()
  %training.91 : bool = prim::GetAttr[name="training"](%norm.44)
  %running_mean.44 : Tensor = prim::GetAttr[name="running_mean"](%norm.44)
  %running_var.44 : Tensor = prim::GetAttr[name="running_var"](%norm.44)
  %weight.89 : Tensor = prim::GetAttr[name="weight"](%norm.44)
  %bias.89 : Tensor = prim::GetAttr[name="bias"](%norm.44)
   = prim::If(%training.91) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %2095 : int[] = aten::size(%x.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.173 : int = aten::__getitem__(%2095, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %2097 : int = aten::len(%2095) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %2098 : int = aten::sub(%2097, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.175 : int = prim::Loop(%2098, %62, %size_prods.173) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.49 : int, %size_prods.177 : int):
          %2102 : int = aten::add(%i.49, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %2103 : int = aten::__getitem__(%2095, %2102) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.179 : int = aten::mul(%size_prods.177, %2103) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.179)
      %2105 : bool = aten::eq(%size_prods.175, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%2105) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %2106 : str = aten::format(%38, %2095) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%2106) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %x.51 : Tensor = aten::batch_norm(%x.49, %weight.89, %bias.89, %running_mean.44, %running_var.44, %training.91, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
   = aten::insert(%results.1, %54, %x.51) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:158:16
  %in_features.2 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.25 : str = prim::TupleIndex(%in_features.2, %31)
  %features.29 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:27
  %2111 : Tensor = prim::Uninitialized()
  %2112 : str[] = prim::ListConstruct(%33, %42)
  %2113 : bool = aten::__contains__(%2112, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:7
   = prim::If(%2113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3623:4
    block0():
      -> ()
    block1():
      %2114 : str = aten::format(%43, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3632:16
       = aten::warn[warn_id=6](%2114, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3631:12
      -> ()
  %2115 : int = aten::dim(%prev_features.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %dim.1 : int = aten::sub(%2115, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3639:10
  %scale_factors.3 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.1, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
    block0(%2118 : int):
      %2119 : float[] = aten::append(%scale_factors.3, %34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3669:28
      -> (%62)
  %2120 : int = aten::len(%scale_factors.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
  %2121 : bool = aten::gt(%2120, %54)
  %2122 : int = prim::Loop(%44, %2121, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
    block0(%2123 : int, %2124 : int):
      %scale.1 : float = aten::__getitem__(%scale_factors.3, %2124) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3677:12
      %2126 : int = aten::floor(%scale.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %2127 : bool = aten::ne(%2126, %scale.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:19
      %2128 : bool = prim::If(%2127) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3678:16
        block0():
           = aten::warn[warn_id=7](%45, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3679:20
          -> (%50)
        block1():
          -> (%62)
      %2129 : int = aten::add(%2124, %48)
      %2130 : bool = aten::lt(%2129, %2120)
      %2131 : bool = aten::__and__(%2130, %2128)
      -> (%2131, %2129)
  %2132 : int = aten::dim(%prev_features.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %2133 : bool = aten::eq(%2132, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:7
  %top_down_features.13 : Tensor = prim::If(%2133) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3709:4
    block0():
      %2135 : Tensor = aten::upsample_nearest1d(%prev_features.67, %61, %scale_factors.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3710:15
      -> (%2135)
    block1():
      %2136 : int = aten::dim(%prev_features.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %2137 : bool = aten::eq(%2136, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:7
      %2138 : Tensor = prim::If(%2137) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3711:4
        block0():
          %2139 : Tensor = aten::upsample_nearest2d(%prev_features.67, %61, %scale_factors.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3712:15
          -> (%2139)
        block1():
          %2140 : int = aten::dim(%prev_features.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %2141 : bool = aten::eq(%2140, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:7
          %2142 : Tensor = prim::If(%2141) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3713:4
            block0():
              %2143 : Tensor = aten::upsample_nearest3d(%prev_features.67, %61, %scale_factors.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3714:15
              -> (%2143)
            block1():
              %2144 : int = aten::dim(%prev_features.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3755:27
              %2145 : str = aten::format(%46, %2144, %33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3753:8
               = prim::RaiseException(%2145) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:3752:4
              -> (%2111)
          -> (%2142)
      -> (%2138)
  %weight.91 : Tensor = prim::GetAttr[name="weight"](%_3.5)
  %bias.91 : Tensor? = prim::GetAttr[name="bias"](%_3.5)
  %2148 : int[] = prim::ListConstruct(%48, %48)
  %2149 : int[] = prim::ListConstruct(%54, %54)
  %2150 : int[] = prim::ListConstruct(%48, %48)
  %x.53 : Tensor = aten::conv2d(%features.29, %weight.91, %bias.91, %2148, %2149, %2150, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm.46 : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_3.5)
  %training.93 : bool = prim::GetAttr[name="training"](%norm.46)
   = prim::If(%training.93) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.53 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm.46)
      %2155 : Tensor = aten::add(%num_batches_tracked.53, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm.46, %2155)
      -> ()
    block1():
      -> ()
  %training.95 : bool = prim::GetAttr[name="training"](%norm.46)
  %running_mean.46 : Tensor = prim::GetAttr[name="running_mean"](%norm.46)
  %running_var.46 : Tensor = prim::GetAttr[name="running_var"](%norm.46)
  %weight.93 : Tensor = prim::GetAttr[name="weight"](%norm.46)
  %bias.93 : Tensor = prim::GetAttr[name="bias"](%norm.46)
   = prim::If(%training.95) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %2161 : int[] = aten::size(%x.53) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.181 : int = aten::__getitem__(%2161, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %2163 : int = aten::len(%2161) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %2164 : int = aten::sub(%2163, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods.183 : int = prim::Loop(%2164, %62, %size_prods.181) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.53 : int, %size_prods.185 : int):
          %2168 : int = aten::add(%i.53, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %2169 : int = aten::__getitem__(%2161, %2168) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.187 : int = aten::mul(%size_prods.185, %2169) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.187)
      %2171 : bool = aten::eq(%size_prods.183, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%2171) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %2172 : str = aten::format(%38, %2161) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%2172) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %lateral_features.13 : Tensor = aten::batch_norm(%x.53, %weight.93, %bias.93, %running_mean.46, %running_var.46, %training.95, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
  %prev_features.97 : Tensor = aten::add(%lateral_features.13, %top_down_features.13, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:155:32
  %weight.95 : Tensor = prim::GetAttr[name="weight"](%_3.2)
  %bias.95 : Tensor? = prim::GetAttr[name="bias"](%_3.2)
  %2177 : int[] = prim::ListConstruct(%48, %48)
  %2178 : int[] = prim::ListConstruct(%48, %48)
  %2179 : int[] = prim::ListConstruct(%48, %48)
  %x.57 : Tensor = aten::conv2d(%prev_features.97, %weight.95, %bias.95, %2177, %2178, %2179, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
  %norm : __torch__.torch.nn.modules.batchnorm.___torch_mangle_0.BatchNorm2d = prim::GetAttr[name="norm"](%_3.2)
  %training.1 : bool = prim::GetAttr[name="training"](%norm)
   = prim::If(%training.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:145:11
    block0():
      %num_batches_tracked.7 : Tensor = prim::GetAttr[name="num_batches_tracked"](%norm)
      %2184 : Tensor = aten::add(%num_batches_tracked.7, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py:148:43
       = prim::SetAttr[name="num_batches_tracked"](%norm, %2184)
      -> ()
    block1():
      -> ()
  %training.3 : bool = prim::GetAttr[name="training"](%norm)
  %running_mean : Tensor = prim::GetAttr[name="running_mean"](%norm)
  %running_var : Tensor = prim::GetAttr[name="running_var"](%norm)
  %weight.99 : Tensor = prim::GetAttr[name="weight"](%norm)
  %bias.99 : Tensor = prim::GetAttr[name="bias"](%norm)
   = prim::If(%training.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2279:4
    block0():
      %2190 : int[] = aten::size(%x.57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2280:27
      %size_prods.1 : int = aten::__getitem__(%2190, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2244:17
      %2192 : int = aten::len(%2190) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %2193 : int = aten::sub(%2192, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:19
      %size_prods : int = prim::Loop(%2193, %62, %size_prods.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2245:4
        block0(%i.65 : int, %size_prods.11 : int):
          %2197 : int = aten::add(%i.65, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:27
          %2198 : int = aten::__getitem__(%2190, %2197) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:22
          %size_prods.5 : int = aten::mul(%size_prods.11, %2198) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2246:8
          -> (%62, %size_prods.5)
      %2200 : bool = aten::eq(%size_prods, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:7
       = prim::If(%2200) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2247:4
        block0():
          %2201 : str = aten::format(%38, %2190) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:25
           = prim::RaiseException(%2201) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2248:8
          -> ()
        block1():
          -> ()
      -> ()
    block1():
      -> ()
  %x.69 : Tensor = aten::batch_norm(%x.57, %weight.99, %bias.99, %running_mean, %running_var, %training.3, %37, %36, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:2282:11
   = aten::insert(%results.1, %54, %x.69) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:158:16
  %top_block.3 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
  %in_feature.1 : str = prim::GetAttr[name="in_feature"](%top_block.3)
  %2205 : bool = aten::__contains__(%bottom_up_features.1, %in_feature.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:161:15
  %top_block_in_feature : Tensor = prim::If(%2205) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:161:12
    block0():
      %top_block.5 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
      %in_feature.3 : str = prim::GetAttr[name="in_feature"](%top_block.5)
      %top_block_in_feature.1 : Tensor = aten::__getitem__(%bottom_up_features.1, %in_feature.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:162:39
      -> (%top_block_in_feature.1)
    block1():
      %_out_features.2 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
      %top_block.7 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
      %in_feature : str = prim::GetAttr[name="in_feature"](%top_block.7)
      %2213 : int = aten::index(%_out_features.2, %in_feature) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:164:47
      %top_block_in_feature.3 : Tensor = aten::__getitem__(%results.1, %2213) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:164:39
      -> (%top_block_in_feature.3)
  %2215 : int[] = prim::ListConstruct(%48, %48)
  %2216 : int[] = prim::ListConstruct(%52, %52)
  %2217 : int[] = prim::ListConstruct(%54, %54)
  %2218 : int[] = prim::ListConstruct(%48, %48)
  %2219 : Tensor = aten::max_pool2d(%top_block_in_feature, %2215, %2216, %2217, %2218, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:719:11
  %2220 : Tensor[] = prim::ListConstruct(%2219)
   = aten::extend(%results.1, %2220) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:165:12
  %_out_features.4 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
  %2222 : int = aten::len(%_out_features.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:166:15
  %2223 : int = aten::len(%results.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:166:42
  %2224 : bool = aten::eq(%2222, %2223) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:166:15
   = prim::If(%2224) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:166:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:166:8
      -> ()
  %features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %_out_features.6 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
  %2227 : int = aten::len(%_out_features.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
  %2228 : int = aten::len(%results.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
  %2229 : int[] = prim::ListConstruct(%2227, %2228)
  %2230 : int = prim::min(%2229) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
   = prim::Loop(%2230, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
    block0(%2231 : int):
      %f.4 : str = aten::__getitem__(%_out_features.6, %2231) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
      %res.2 : Tensor = aten::__getitem__(%results.1, %2231) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
       = aten::_set_item(%features.1, %f.4, %res.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:167:15
      -> (%62)
  %2234 : bool = aten::__is__(%3, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:206:11
  %instances.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%2234) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:206:8
    block0():
      %proposal_generator : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%model)
      %features.7 : Tensor[] = prim::ListConstruct()
      %in_features : str[] = prim::GetAttr[name="in_features"](%proposal_generator)
      %2239 : int = aten::len(%in_features) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
       = prim::Loop(%2239, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
        block0(%2240 : int):
          %f.6 : str = aten::__getitem__(%in_features, %2240) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
          %2242 : Tensor = aten::__getitem__(%features.1, %f.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:20
          %2243 : Tensor[] = aten::append(%features.7, %2242) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
          -> (%62)
      %anchor_generator.1 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%proposal_generator)
      %grid_sizes.1 : int[][] = prim::ListConstruct()
      %2246 : int = aten::len(%features.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:229:21
       = prim::Loop(%2246, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:229:21
        block0(%2247 : int):
          %feature_map.1 : Tensor = aten::__getitem__(%features.7, %2247) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:229:21
          %2249 : int[] = aten::size(%feature_map.1) # <string>:7:9
          %2250 : int[] = aten::slice(%2249, %56, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:229:22
          %2251 : int[][] = aten::append(%grid_sizes.1, %2250) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:229:21
          -> (%62)
      %anchors_over_all_feature_maps.1 : Tensor[] = prim::ListConstruct()
      %buffers.1 : Tensor[] = prim::ListConstruct()
      %cell_anchors : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%anchor_generator.1)
      %_0 : Tensor = prim::GetAttr[name="0"](%cell_anchors)
      %_1 : Tensor = prim::GetAttr[name="1"](%cell_anchors)
      %_2 : Tensor = prim::GetAttr[name="2"](%cell_anchors)
      %_3 : Tensor = prim::GetAttr[name="3"](%cell_anchors)
      %_4 : Tensor = prim::GetAttr[name="4"](%cell_anchors)
      %2260 : Tensor[] = aten::append(%buffers.1, %_0) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:172:38
      %2261 : Tensor[] = aten::append(%buffers.1, %_1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:172:38
      %2262 : Tensor[] = aten::append(%buffers.1, %_2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:172:38
      %2263 : Tensor[] = aten::append(%buffers.1, %_3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:172:38
      %2264 : Tensor[] = aten::append(%buffers.1, %_4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:172:38
      %strides : int[] = prim::GetAttr[name="strides"](%anchor_generator.1)
      %2266 : int = aten::len(%grid_sizes.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
      %2267 : int = aten::len(%strides) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
      %2268 : int = aten::len(%buffers.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
      %2269 : int[] = prim::ListConstruct(%2266, %2267, %2268)
      %2270 : int = prim::min(%2269) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
       = prim::Loop(%2270, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
        block0(%2271 : int):
          %size.1 : int[] = aten::__getitem__(%grid_sizes.1, %2271) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
          %stride.1 : int = aten::__getitem__(%strides, %2271) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
          %base_anchors.1 : Tensor = aten::__getitem__(%buffers.1, %2271) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:8
          %offset : float = prim::GetAttr[name="offset"](%anchor_generator.1)
          %grid_height.1 : int, %grid_width.1 : int = prim::ListUnpack(%size.1)
          %2278 : float = aten::mul(%offset, %stride.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:44:21
          %2279 : int = aten::mul(%grid_width.1, %stride.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:44:38
          %2280 : Tensor = aten::arange(%2278, %2279, %stride.1, %24, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:44:8
          %2281 : Device = prim::device(%base_anchors.1)
          %shifts_x.1 : Tensor = aten::to(%2280, %2281, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
          %2283 : float = aten::mul(%offset, %stride.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:48:21
          %2284 : int = aten::mul(%grid_height.1, %stride.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:48:38
          %2285 : Tensor = aten::arange(%2283, %2284, %stride.1, %24, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:48:8
          %2286 : Device = prim::device(%base_anchors.1)
          %shifts_y.1 : Tensor = aten::to(%2285, %2286, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
          %2288 : Tensor[] = prim::ListConstruct(%shifts_y.1, %shifts_x.1)
          %2289 : Tensor[] = aten::meshgrid(%2288) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:52:23
          %shift_y.1 : Tensor, %shift_x.1 : Tensor = prim::ListUnpack(%2289)
          %2292 : int[] = prim::ListConstruct(%57)
          %shift_x.5 : Tensor = aten::reshape(%shift_x.1, %2292) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:53:14
          %2294 : int[] = prim::ListConstruct(%57)
          %shift_y.5 : Tensor = aten::reshape(%shift_y.1, %2294) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:54:14
          %2296 : (Tensor, Tensor) = prim::TupleConstruct(%shift_x.5, %shift_y.5)
          %shift_x.2 : Tensor, %shift_y.2 : Tensor = prim::TupleUnpack(%2296)
          %2299 : Tensor[] = prim::ListConstruct(%shift_x.2, %shift_y.2, %shift_x.2, %shift_y.2)
          %shifts.1 : Tensor = aten::stack(%2299, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:175:21
          %2301 : int[] = prim::ListConstruct(%57, %48, %60)
          %2302 : Tensor = aten::view(%shifts.1, %2301) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:177:28
          %2303 : int[] = prim::ListConstruct(%48, %57, %60)
          %2304 : Tensor = aten::view(%base_anchors.1, %2303) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:177:52
          %2305 : Tensor = aten::add(%2302, %2304, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:177:28
          %2306 : int[] = prim::ListConstruct(%57, %60)
          %2307 : Tensor = aten::reshape(%2305, %2306) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:177:28
          %2308 : Tensor[] = aten::append(%anchors_over_all_feature_maps.1, %2307) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:177:12
          -> (%62)
      %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %2310 : int = aten::len(%anchors_over_all_feature_maps.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:231:15
       = prim::Loop(%2310, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:231:15
        block0(%2311 : int):
          %x.4 : Tensor = aten::__getitem__(%anchors_over_all_feature_maps.1, %2311) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:231:15
          %2313 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %tensor.27 : Tensor = aten::to(%x.4, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
          %2315 : int = aten::numel(%tensor.27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %2316 : bool = aten::eq(%2315, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %tensor.31 : Tensor = prim::If(%2316) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
            block0():
              %2318 : int[] = prim::ListConstruct(%57, %60)
              %2319 : Tensor = aten::reshape(%tensor.27, %2318) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              %tensor.33 : Tensor = aten::to(%2319, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              -> (%tensor.33)
            block1():
              -> (%tensor.27)
          %2321 : int = aten::dim(%tensor.31) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2322 : bool = aten::eq(%2321, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2323 : bool = prim::If(%2322) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
            block0():
              %2324 : int = aten::size(%tensor.31, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              %2325 : bool = aten::eq(%2324, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              -> (%2325)
            block1():
              -> (%50)
           = prim::If(%2323) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2326 : int[] = aten::size(%tensor.31) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
              %2327 : str = aten::str(%2326) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              %2328 : str = aten::add(%55, %2327) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2328) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%2313, %tensor.31)
          %2329 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%anchors.1, %2313) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:231:15
          -> (%62)
      %rpn_head : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%proposal_generator)
      %pred_objectness_logits.1 : Tensor[] = prim::ListConstruct()
      %pred_anchor_deltas.1 : Tensor[] = prim::ListConstruct()
      %2333 : int = aten::len(%features.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
       = prim::Loop(%2333, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
        block0(%2334 : int):
          %x.85 : Tensor = aten::__getitem__(%features.7, %2334) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
          %conv : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="conv"](%rpn_head)
          %weight.109 : Tensor = prim::GetAttr[name="weight"](%conv)
          %bias.109 : Tensor? = prim::GetAttr[name="bias"](%conv)
          %2339 : int[] = prim::ListConstruct(%48, %48)
          %2340 : int[] = prim::ListConstruct(%48, %48)
          %2341 : int[] = prim::ListConstruct(%48, %48)
          %x.109 : Tensor = aten::conv2d(%x.85, %weight.109, %bias.109, %2339, %2340, %2341, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
          %t.10 : Tensor = aten::relu(%x.109) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
          %objectness_logits : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%rpn_head)
          %weight.111 : Tensor = prim::GetAttr[name="weight"](%objectness_logits)
          %bias.111 : Tensor? = prim::GetAttr[name="bias"](%objectness_logits)
          %2347 : int[] = prim::ListConstruct(%48, %48)
          %2348 : int[] = prim::ListConstruct(%54, %54)
          %2349 : int[] = prim::ListConstruct(%48, %48)
          %2350 : Tensor = aten::conv2d(%t.10, %weight.111, %bias.111, %2347, %2348, %2349, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
          %2351 : Tensor[] = aten::append(%pred_objectness_logits.1, %2350) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:175:12
          %anchor_deltas : __torch__.torch.nn.modules.conv.___torch_mangle_40.Conv2d = prim::GetAttr[name="anchor_deltas"](%rpn_head)
          %weight.119 : Tensor = prim::GetAttr[name="weight"](%anchor_deltas)
          %bias.119 : Tensor? = prim::GetAttr[name="bias"](%anchor_deltas)
          %2355 : int[] = prim::ListConstruct(%48, %48)
          %2356 : int[] = prim::ListConstruct(%54, %54)
          %2357 : int[] = prim::ListConstruct(%48, %48)
          %2358 : Tensor = aten::conv2d(%t.10, %weight.119, %bias.119, %2355, %2356, %2357, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/conv.py:442:15
          %2359 : Tensor[] = aten::append(%pred_anchor_deltas.1, %2358) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:176:12
          -> (%62)
      %2360 : (Tensor[], Tensor[]) = prim::TupleConstruct(%pred_objectness_logits.1, %pred_anchor_deltas.1)
      %pred_objectness_logits.2 : Tensor[], %pred_anchor_deltas.2 : Tensor[] = prim::TupleUnpack(%2360)
      %pred_objectness_logits.5 : Tensor[] = prim::ListConstruct()
      %2364 : int = aten::len(%pred_objectness_logits.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
       = prim::Loop(%2364, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
        block0(%2365 : int):
          %score.1 : Tensor = aten::__getitem__(%pred_objectness_logits.2, %2365) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
          %2367 : int[] = prim::ListConstruct(%54, %52, %35, %48)
          %2368 : Tensor = aten::permute(%score.1, %2367) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
          %2369 : Tensor = aten::flatten(%2368, %48, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
          %2370 : Tensor[] = aten::append(%pred_objectness_logits.5, %2369) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
          -> (%62)
      %pred_anchor_deltas.5 : Tensor[] = prim::ListConstruct()
      %2372 : int = aten::len(%pred_anchor_deltas.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
       = prim::Loop(%2372, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
        block0(%2373 : int):
          %x.83 : Tensor = aten::__getitem__(%pred_anchor_deltas.2, %2373) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
          %2375 : int[] = aten::size(%x.83) # <string>:7:9
          %2376 : int = aten::__getitem__(%2375, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:19
          %2377 : int[] = aten::size(%x.83) # <string>:7:9
          %2378 : int = aten::__getitem__(%2377, %56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:66
          %2379 : int[] = aten::size(%x.83) # <string>:7:9
          %2380 : int = aten::__getitem__(%2379, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:79
          %2381 : int[] = prim::ListConstruct(%2376, %57, %60, %2378, %2380)
          %2382 : Tensor = aten::view(%x.83, %2381) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2383 : int[] = prim::ListConstruct(%54, %35, %60, %48, %52)
          %2384 : Tensor = aten::permute(%2382, %2383) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2385 : Tensor = aten::flatten(%2384, %48, %56) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2386 : Tensor[] = aten::append(%pred_anchor_deltas.5, %2385) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
          -> (%62)
      %losses.1 : Dict(str, Tensor) = prim::DictConstruct()
      %image_sizes : (int, int)[] = prim::GetAttr[name="image_sizes"](%images.2)
      %2389 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject()
       = prim::SetAttr[name="prev"](%2389, %50)
      %2390 : NoneType = prim::Enter(%2389)
      %2391 : Tensor = aten::__getitem__(%pred_anchor_deltas.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
      %2392 : int[] = aten::size(%2391) # <string>:7:9
      %N.1 : int = aten::__getitem__(%2392, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
      %pred_proposals.1 : Tensor[] = prim::ListConstruct()
      %2395 : int = aten::len(%anchors.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
      %2396 : int = aten::len(%pred_anchor_deltas.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
      %2397 : int[] = prim::ListConstruct(%2395, %2396)
      %2398 : int = prim::min(%2397) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
       = prim::Loop(%2398, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
        block0(%2399 : int):
          %anchors_i.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%anchors.1, %2399) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
          %pred_anchor_deltas_i.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.5, %2399) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
          %tensor.41 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %B.1 : int = aten::size(%tensor.41, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:526:16
          %2404 : int[] = prim::ListConstruct(%57, %B.1)
          %pred_anchor_deltas_i.5 : Tensor = aten::reshape(%pred_anchor_deltas_i.1, %2404) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:527:35
          %tensor.29 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %2407 : Tensor = aten::unsqueeze(%tensor.29, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %2408 : int[] = prim::ListConstruct(%N.1, %57, %57)
          %2409 : Tensor = aten::expand(%2407, %2408, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %2410 : int[] = prim::ListConstruct(%57, %B.1)
          %anchors_i.7 : Tensor = aten::reshape(%2409, %2410) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %box2box_transform : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%proposal_generator)
          %deltas.6 : Tensor = aten::to(%pred_anchor_deltas_i.5, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:88:17
          %2414 : int = prim::dtype(%deltas.6)
          %boxes.16 : Tensor = aten::to(%anchors_i.7, %2414, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:89:16
          %2416 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %2417 : Tensor = aten::select(%2416, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %2418 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %2419 : Tensor = aten::select(%2418, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %widths.2 : Tensor = aten::sub(%2417, %2419, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %2421 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %2422 : Tensor = aten::select(%2421, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %2423 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %2424 : Tensor = aten::select(%2423, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %heights.2 : Tensor = aten::sub(%2422, %2424, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %2426 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %2427 : Tensor = aten::select(%2426, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %2428 : Tensor = aten::mul(%widths.2, %30) # <string>:3:9
          %ctr_x.2 : Tensor = aten::add(%2427, %2428, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %2430 : Tensor = aten::slice(%boxes.16, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %2431 : Tensor = aten::select(%2430, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %2432 : Tensor = aten::mul(%heights.2, %30) # <string>:3:9
          %ctr_y.2 : Tensor = aten::add(%2431, %2432, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %weights.1 : (float, float, float, float) = prim::GetAttr[name="weights"](%box2box_transform)
          %wx.2 : float, %wy.2 : float, %ww.2 : float, %wh.2 : float = prim::TupleUnpack(%weights.1)
          %2439 : Tensor = aten::slice(%deltas.6, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %2440 : Tensor = aten::slice(%2439, %48, %54, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %dx.2 : Tensor = aten::div(%2440, %wx.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %2442 : Tensor = aten::slice(%deltas.6, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %2443 : Tensor = aten::slice(%2442, %48, %48, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %dy.2 : Tensor = aten::div(%2443, %wy.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %2445 : Tensor = aten::slice(%deltas.6, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %2446 : Tensor = aten::slice(%2445, %48, %52, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %dw.2 : Tensor = aten::div(%2446, %ww.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %2448 : Tensor = aten::slice(%deltas.6, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %2449 : Tensor = aten::slice(%2448, %48, %35, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %dh.2 : Tensor = aten::div(%2449, %wh.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %scale_clamp.2 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform)
          %dw.6 : Tensor = aten::clamp(%dw.2, %61, %scale_clamp.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:103:13
          %scale_clamp.4 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform)
          %dh.6 : Tensor = aten::clamp(%dh.2, %61, %scale_clamp.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:104:13
          %2455 : Tensor = aten::slice(%widths.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %2456 : Tensor = aten::unsqueeze(%2455, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %2457 : Tensor = aten::mul(%dx.2, %2456) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %2458 : Tensor = aten::slice(%ctr_x.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %2459 : Tensor = aten::unsqueeze(%2458, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.2 : Tensor = aten::add(%2457, %2459, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %2461 : Tensor = aten::slice(%heights.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %2462 : Tensor = aten::unsqueeze(%2461, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %2463 : Tensor = aten::mul(%dy.2, %2462) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %2464 : Tensor = aten::slice(%ctr_y.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %2465 : Tensor = aten::unsqueeze(%2464, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.2 : Tensor = aten::add(%2463, %2465, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %2467 : Tensor = aten::exp(%dw.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %2468 : Tensor = aten::slice(%widths.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %2469 : Tensor = aten::unsqueeze(%2468, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %pred_w.2 : Tensor = aten::mul(%2467, %2469) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %2471 : Tensor = aten::exp(%dh.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %2472 : Tensor = aten::slice(%heights.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %2473 : Tensor = aten::unsqueeze(%2472, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %pred_h.2 : Tensor = aten::mul(%2471, %2473) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %2475 : Tensor = aten::mul(%pred_w.2, %30) # <string>:3:9
          %x1.3 : Tensor = aten::sub(%pred_ctr_x.2, %2475, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:111:13
          %2477 : Tensor = aten::mul(%pred_h.2, %30) # <string>:3:9
          %y1.3 : Tensor = aten::sub(%pred_ctr_y.2, %2477, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:112:13
          %2479 : Tensor = aten::mul(%pred_w.2, %30) # <string>:3:9
          %x2.3 : Tensor = aten::add(%pred_ctr_x.2, %2479, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:113:13
          %2481 : Tensor = aten::mul(%pred_h.2, %30) # <string>:3:9
          %y2.3 : Tensor = aten::add(%pred_ctr_y.2, %2481, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:114:13
          %2483 : Tensor[] = prim::ListConstruct(%x1.3, %y1.3, %x2.3, %y2.3)
          %pred_boxes.2 : Tensor = aten::stack(%2483, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:115:21
          %2485 : int[] = aten::size(%deltas.6) # <string>:7:9
          %proposals_i.2 : Tensor = aten::reshape(%pred_boxes.2, %2485) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:116:15
          %2487 : int[] = prim::ListConstruct(%N.1, %57, %B.1)
          %2488 : Tensor = aten::view(%proposals_i.2, %2487) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:29
          %2489 : Tensor[] = aten::append(%pred_proposals.1, %2488) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:12
          -> (%62)
      %nms_thresh : float = prim::GetAttr[name="nms_thresh"](%proposal_generator)
      %pre_nms_topk : Dict(bool, int) = prim::GetAttr[name="pre_nms_topk"](%proposal_generator)
      %2492 : int = aten::__getitem__(%pre_nms_topk, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:508:16
      %post_nms_topk : Dict(bool, int) = prim::GetAttr[name="post_nms_topk"](%proposal_generator)
      %2494 : int = aten::__getitem__(%post_nms_topk, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:509:16
      %min_box_size : float = prim::GetAttr[name="min_box_size"](%proposal_generator)
      %num_images.1 : int = aten::len(%image_sizes) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:60:17
      %2497 : Tensor = aten::__getitem__(%pred_proposals.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:62:8
      %device.2 : Device = prim::device(%2497)
      %topk_scores.1 : Tensor[] = prim::ListConstruct()
      %topk_proposals.1 : Tensor[] = prim::ListConstruct()
      %level_ids.1 : Tensor[] = prim::ListConstruct()
      %2502 : Tensor = aten::arange(%num_images.1, %61, %61, %device.2, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:33
      %2503 : Tensor = aten::__getitem__(%pred_proposals.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:74
      %2504 : Device = prim::device(%2503)
      %batch_idx.1 : Tensor = aten::to(%2502, %2504, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
      %2506 : int = aten::len(%pred_proposals.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
      %2507 : int = aten::len(%pred_objectness_logits.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
      %2508 : int[] = prim::ListConstruct(%44, %2506, %2507)
      %2509 : int = prim::min(%2508) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
       = prim::Loop(%2509, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
        block0(%level_id.1 : int):
          %proposals_i.1 : Tensor = aten::__getitem__(%pred_proposals.1, %level_id.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
          %logits_i.1 : Tensor = aten::__getitem__(%pred_objectness_logits.5, %level_id.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
          %2513 : int[] = aten::size(%logits_i.1) # <string>:7:9
          %Hi_Wi_A.1 : int = aten::__getitem__(%2513, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:18
          %num_proposals_i.1 : int = prim::min(%Hi_Wi_A.1, %2492) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:77:30
          %topk_scores_i.1 : Tensor, %topk_idx.1 : Tensor = aten::topk(%logits_i.1, %num_proposals_i.1, %48, %62, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:34
          %2518 : Tensor = aten::slice(%batch_idx.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %2519 : Tensor = aten::unsqueeze(%2518, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %2520 : Tensor?[] = prim::ListConstruct(%2519, %topk_idx.1)
          %topk_proposals_i.1 : Tensor = aten::index(%proposals_i.1, %2520) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:27
          %2522 : Tensor[] = aten::append(%topk_proposals.1, %topk_proposals_i.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:84:8
          %2523 : Tensor[] = aten::append(%topk_scores.1, %topk_scores_i.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:85:8
          %2524 : int[] = prim::ListConstruct(%num_proposals_i.1)
          %2525 : Tensor = aten::full(%2524, %level_id.1, %60, %61, %device.2, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:16
          %2526 : Tensor = aten::__getitem__(%pred_proposals.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:89:16
          %2527 : Device = prim::device(%2526)
          %2528 : Tensor = aten::to(%2525, %2527, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
          %2529 : Tensor[] = aten::append(%level_ids.1, %2528) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:86:8
          -> (%62)
      %2530 : int = aten::len(%topk_scores.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %2531 : bool = aten::eq(%2530, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %topk_scores.7 : Tensor = prim::If(%2531) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %2533 : Tensor = aten::__getitem__(%topk_scores.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%2533)
        block1():
          %2534 : Tensor = aten::cat(%topk_scores.1, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%2534)
      %2535 : int = aten::len(%topk_proposals.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %2536 : bool = aten::eq(%2535, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %topk_proposals.7 : Tensor = prim::If(%2536) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %2538 : Tensor = aten::__getitem__(%topk_proposals.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%2538)
        block1():
          %2539 : Tensor = aten::cat(%topk_proposals.1, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%2539)
      %2540 : int = aten::len(%level_ids.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %2541 : bool = aten::eq(%2540, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %level_ids.7 : Tensor = prim::If(%2541) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %2543 : Tensor = aten::__getitem__(%level_ids.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%2543)
        block1():
          %2544 : Tensor = aten::cat(%level_ids.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%2544)
      %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %2546 : int = aten::len(%image_sizes) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
      %2547 : int[] = prim::ListConstruct(%44, %2546)
      %2548 : int = prim::min(%2547) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
       = prim::Loop(%2548, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
        block0(%n.1 : int):
          %image_size.1 : (int, int) = aten::__getitem__(%image_sizes, %n.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
          %2551 : Tensor = aten::select(%topk_proposals.7, %54, %n.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:22
          %boxes.20 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %tensor.35 : Tensor = aten::to(%2551, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
          %2554 : int = aten::numel(%tensor.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %2555 : bool = aten::eq(%2554, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %tensor.49 : Tensor = prim::If(%2555) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
            block0():
              %2557 : int[] = prim::ListConstruct(%57, %60)
              %2558 : Tensor = aten::reshape(%tensor.35, %2557) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              %tensor.39 : Tensor = aten::to(%2558, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              -> (%tensor.39)
            block1():
              -> (%tensor.35)
          %2560 : int = aten::dim(%tensor.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2561 : bool = aten::eq(%2560, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2562 : bool = prim::If(%2561) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
            block0():
              %2563 : int = aten::size(%tensor.49, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              %2564 : bool = aten::eq(%2563, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              -> (%2564)
            block1():
              -> (%50)
           = prim::If(%2562) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2565 : int[] = aten::size(%tensor.49) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
              %2566 : str = aten::str(%2565) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              %2567 : str = aten::add(%55, %2566) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2567) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.20, %tensor.49)
          %scores_per_img.1 : Tensor = aten::select(%topk_scores.7, %54, %n.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:102:25
          %tensor.37 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %2570 : Tensor = aten::isfinite(%tensor.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2571 : Tensor = aten::all(%2570, %48, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2572 : Tensor = aten::isfinite(%scores_per_img.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:105:63
          %valid_mask.2 : Tensor = aten::__and__(%2571, %2572) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2574 : Tensor = aten::all(%valid_mask.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:106:15
          %2575 : bool = aten::Bool(%2574) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:106:15
          %2576 : bool = aten::__not__(%2575) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:106:11
          %boxes.43 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img.37 : Tensor, %lvl.31 : Tensor = prim::If(%2576) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:106:8
            block0():
              %tensor.26 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
              %2581 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %b.2 : Tensor = aten::index(%tensor.26, %2581) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:235:12
              %2583 : int = aten::dim(%b.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
              %2584 : bool = aten::eq(%2583, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
               = prim::If(%2584) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                block0():
                  -> ()
                block1():
                  %2585 : str = aten::format(%25, %valid_mask.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:29
                  %2586 : str = aten::add(%55, %2585) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                   = prim::RaiseException(%2586) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                  -> ()
              %boxes.22 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %tensor.28 : Tensor = aten::to(%b.2, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
              %2589 : int = aten::numel(%tensor.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %2590 : bool = aten::eq(%2589, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %tensor.55 : Tensor = prim::If(%2590) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
                block0():
                  %2592 : int[] = prim::ListConstruct(%57, %60)
                  %2593 : Tensor = aten::reshape(%tensor.28, %2592) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  %tensor.32 : Tensor = aten::to(%2593, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  -> (%tensor.32)
                block1():
                  -> (%tensor.28)
              %2595 : int = aten::dim(%tensor.55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %2596 : bool = aten::eq(%2595, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %2597 : bool = prim::If(%2596) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
                block0():
                  %2598 : int = aten::size(%tensor.55, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  %2599 : bool = aten::eq(%2598, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  -> (%2599)
                block1():
                  -> (%50)
               = prim::If(%2597) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %2600 : int[] = aten::size(%tensor.55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
                  %2601 : str = aten::str(%2600) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  %2602 : str = aten::add(%55, %2601) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%2602) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.22, %tensor.55)
              %2603 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %scores_per_img.7 : Tensor = aten::index(%scores_per_img.1, %2603) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:112:29
              %2605 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %lvl.3 : Tensor = aten::index(%level_ids.7, %2605) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:113:18
              -> (%boxes.22, %scores_per_img.7, %lvl.3)
            block1():
              -> (%boxes.20, %scores_per_img.1, %level_ids.7)
          %tensor.59 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2608 : Tensor = aten::isfinite(%tensor.59) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
          %2609 : Tensor = aten::all(%2608) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
          %2610 : bool = aten::Bool(%2609) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
           = prim::If(%2610) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%26) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:8
              -> ()
          %h.2 : int, %w.2 : int = prim::TupleUnpack(%image_size.1)
          %tensor.63 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2614 : Tensor = aten::slice(%tensor.63, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %2615 : Tensor = aten::select(%2614, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %x1.5 : Tensor = aten::clamp(%2615, %54, %w.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %tensor.45 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2618 : Tensor = aten::slice(%tensor.45, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %2619 : Tensor = aten::select(%2618, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %y1.5 : Tensor = aten::clamp(%2619, %54, %h.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %tensor.47 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2622 : Tensor = aten::slice(%tensor.47, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %2623 : Tensor = aten::select(%2622, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %x2.5 : Tensor = aten::clamp(%2623, %54, %w.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %tensor.51 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2626 : Tensor = aten::slice(%tensor.51, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %2627 : Tensor = aten::select(%2626, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %y2.5 : Tensor = aten::clamp(%2627, %54, %h.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %2629 : Tensor[] = prim::ListConstruct(%x1.5, %y1.5, %x2.5, %y2.5)
          %2630 : Tensor = aten::stack(%2629, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:197:22
           = prim::SetAttr[name="tensor"](%boxes.43, %2630)
          %tensor.24 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2632 : Tensor = aten::slice(%tensor.24, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:17
          %2633 : Tensor = aten::select(%2632, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:17
          %2634 : Tensor = aten::slice(%tensor.24, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:29
          %2635 : Tensor = aten::select(%2634, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:29
          %widths.3 : Tensor = aten::sub(%2633, %2635, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:17
          %2637 : Tensor = aten::slice(%tensor.24, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:211:18
          %2638 : Tensor = aten::select(%2637, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:211:18
          %2639 : Tensor = aten::slice(%tensor.24, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:211:30
          %2640 : Tensor = aten::select(%2639, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:211:30
          %heights.3 : Tensor = aten::sub(%2638, %2640, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:211:18
          %2642 : Tensor = aten::gt(%widths.3, %min_box_size) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:212:16
          %2643 : Tensor = aten::gt(%heights.3, %min_box_size) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:212:39
          %keep.2 : Tensor = aten::__and__(%2642, %2643) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:212:16
          %2645 : Tensor = aten::sum(%keep.2, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %2646 : Scalar = aten::item(%2645) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %tensor.30 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2648 : int[] = aten::size(%tensor.30) # <string>:7:9
          %2649 : int = aten::__getitem__(%2648, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
          %2650 : bool = aten::ne(%2646, %2649) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %boxes.18 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img : Tensor, %lvl : Tensor = prim::If(%2650) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:118:8
            block0():
              %tensor.34 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
              %2655 : Tensor?[] = prim::ListConstruct(%keep.2)
              %b.4 : Tensor = aten::index(%tensor.34, %2655) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:235:12
              %2657 : int = aten::dim(%b.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
              %2658 : bool = aten::eq(%2657, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
               = prim::If(%2658) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                block0():
                  -> ()
                block1():
                  %2659 : str = aten::format(%25, %keep.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:29
                  %2660 : str = aten::add(%55, %2659) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                   = prim::RaiseException(%2660) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
                  -> ()
              %boxes.27 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %tensor.36 : Tensor = aten::to(%b.4, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
              %2663 : int = aten::numel(%tensor.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %2664 : bool = aten::eq(%2663, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %tensor.38 : Tensor = prim::If(%2664) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
                block0():
                  %2666 : int[] = prim::ListConstruct(%57, %60)
                  %2667 : Tensor = aten::reshape(%tensor.36, %2666) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  %tensor.40 : Tensor = aten::to(%2667, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  -> (%tensor.40)
                block1():
                  -> (%tensor.36)
              %2669 : int = aten::dim(%tensor.38) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %2670 : bool = aten::eq(%2669, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %2671 : bool = prim::If(%2670) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
                block0():
                  %2672 : int = aten::size(%tensor.38, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  %2673 : bool = aten::eq(%2672, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  -> (%2673)
                block1():
                  -> (%50)
               = prim::If(%2671) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %2674 : int[] = aten::size(%tensor.38) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
                  %2675 : str = aten::str(%2674) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  %2676 : str = aten::add(%55, %2675) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%2676) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.27, %tensor.38)
              %2677 : Tensor?[] = prim::ListConstruct(%keep.2)
              %scores_per_img.21 : Tensor = aten::index(%scores_per_img.37, %2677) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:54
              %2679 : Tensor?[] = prim::ListConstruct(%keep.2)
              %lvl.17 : Tensor = aten::index(%lvl.31, %2679) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:76
              -> (%boxes.27, %scores_per_img.21, %lvl.17)
            block1():
              -> (%boxes.43, %scores_per_img.37, %lvl.31)
          %tensor.61 : Tensor = prim::GetAttr[name="tensor"](%boxes.18)
          %2682 : int[] = aten::size(%tensor.61) # <string>:7:9
          %2683 : int = aten::__getitem__(%2682, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:11
          %2684 : bool = aten::eq(%2683, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:11
           = prim::If(%2684) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:4
              -> ()
          %2685 : Tensor = aten::to(%tensor.61, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:20:31
          %2686 : int = aten::numel(%2685) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
          %2687 : bool = aten::gt(%2686, %27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
          %keep.19 : Tensor = prim::If(%2687) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:4
            block0():
              %keep_mask.2 : Tensor = aten::zeros_like(%scores_per_img, %28, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:99:16
              %output.4 : Tensor, %inverse_indices.4 : Tensor, %counts.4 : Tensor = aten::_unique2(%lvl, %62, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/functional.py:735:42
              %2693 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.4, %inverse_indices.4, %counts.4)
              %output.6 : Tensor, %2695 : Tensor, %2696 : Tensor = prim::TupleUnpack(%2693)
              %2697 : int = aten::len(%output.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
               = prim::Loop(%2697, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
                block0(%2698 : int):
                  %class_id.2 : Tensor = aten::select(%output.6, %54, %2698) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
                  %2700 : Tensor = aten::eq(%lvl, %class_id.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:35
                  %2701 : Tensor[] = aten::where(%2700) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:23
                  %curr_indices.2 : Tensor = aten::__getitem__(%2701, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:23
                  %2703 : Tensor?[] = prim::ListConstruct(%curr_indices.2)
                  %2704 : Tensor = aten::index(%2685, %2703) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:102:32
                  %2705 : Tensor?[] = prim::ListConstruct(%curr_indices.2)
                  %2706 : Tensor = aten::index(%scores_per_img, %2705) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:102:53
                  %curr_keep_indices.2 : Tensor = torchvision::nms(%2704, %2706, %nms_thresh) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:35:11
                  %2708 : Tensor?[] = prim::ListConstruct(%curr_keep_indices.2)
                  %2709 : Tensor = aten::index(%curr_indices.2, %2708) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:103:18
                  %2710 : int = prim::dtype(%keep_mask.2)
                  %2711 : Device = prim::device(%keep_mask.2)
                  %2712 : Tensor = aten::tensor(%62, %2710, %2711, %50)
                  %2713 : Tensor?[] = prim::ListConstruct(%2709)
                  %2714 : Tensor = aten::index_put_(%keep_mask.2, %2713, %2712, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:103:8
                  -> (%62)
              %2715 : Tensor[] = aten::where(%keep_mask.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:104:19
              %keep_indices.2 : Tensor = aten::__getitem__(%2715, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:104:19
              %2717 : Tensor?[] = prim::ListConstruct(%keep_indices.2)
              %2718 : Tensor = aten::index(%scores_per_img, %2717) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:24
              %2719 : Tensor, %2720 : Tensor = aten::sort(%2718, %57, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:24
              %2721 : Tensor?[] = prim::ListConstruct(%2720)
              %2722 : Tensor = aten::index(%keep_indices.2, %2721) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:11
              -> (%2722)
            block1():
              %2723 : int = aten::numel(%2685) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:7
              %2724 : bool = aten::eq(%2723, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:7
              %2725 : Tensor = prim::If(%2724) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:4
                block0():
                  %2726 : Device = prim::device(%2685)
                  %2727 : int[] = prim::ListConstruct(%54)
                  %2728 : Tensor = aten::empty(%2727, %60, %61, %2726, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:83:15
                  -> (%2728)
                block1():
                  %max_coordinate.4 : Tensor = aten::max(%2685) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:84:21
                  %2730 : Tensor = aten::to(%lvl, %2685, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:14
                  %2731 : Tensor = aten::tensor(%48, %61, %61, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:49
                  %2732 : Tensor = aten::to(%2731, %2685, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:49
                  %2733 : Tensor = aten::add(%max_coordinate.4, %2732, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:32
                  %offsets.4 : Tensor = aten::mul(%2730, %2733) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:14
                  %2735 : Tensor = aten::slice(%offsets.4, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:28
                  %2736 : Tensor = aten::unsqueeze(%2735, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:28
                  %boxes_for_nms.4 : Tensor = aten::add(%2685, %2736, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:20
                  %keep.4 : Tensor = torchvision::nms(%boxes_for_nms.4, %scores_per_img, %nms_thresh) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:35:11
                  -> (%keep.4)
              -> (%2725)
          %keep.23 : Tensor = aten::slice(%keep.19, %54, %61, %2494, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:15
          %res.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%res.1, %image_size.1)
           = prim::SetAttr[name="_field_names"](%res.1, %29)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %61)
           = prim::SetAttr[name="_objectness_logits"](%res.1, %61)
           = prim::SetAttr[name="_pred_boxes"](%res.1, %61)
           = prim::SetAttr[name="_scores"](%res.1, %61)
           = prim::SetAttr[name="_pred_classes"](%res.1, %61)
           = prim::SetAttr[name="_pred_masks"](%res.1, %61)
           = prim::SetAttr[name="_pred_keypoints"](%res.1, %61)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%res.1, %61)
          %tensor.65 : Tensor = prim::GetAttr[name="tensor"](%boxes.18)
          %2742 : Tensor?[] = prim::ListConstruct(%keep.23)
          %b.3 : Tensor = aten::index(%tensor.65, %2742) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:235:12
          %2744 : int = aten::dim(%b.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
          %2745 : bool = aten::eq(%2744, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:15
           = prim::If(%2745) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
            block0():
              -> ()
            block1():
              %2746 : str = aten::format(%25, %keep.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:29
              %2747 : str = aten::add(%55, %2746) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
               = prim::RaiseException(%2747) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:236:8
              -> ()
          %2748 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %tensor.53 : Tensor = aten::to(%b.3, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
          %2750 : int = aten::numel(%tensor.53) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %2751 : bool = aten::eq(%2750, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %tensor.67 : Tensor = prim::If(%2751) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
            block0():
              %2753 : int[] = prim::ListConstruct(%57, %60)
              %2754 : Tensor = aten::reshape(%tensor.53, %2753) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              %tensor.57 : Tensor = aten::to(%2754, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              -> (%tensor.57)
            block1():
              -> (%tensor.53)
          %2756 : int = aten::dim(%tensor.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2757 : bool = aten::eq(%2756, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %2758 : bool = prim::If(%2757) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
            block0():
              %2759 : int = aten::size(%tensor.67, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              %2760 : bool = aten::eq(%2759, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              -> (%2760)
            block1():
              -> (%50)
           = prim::If(%2758) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2761 : int[] = aten::size(%tensor.67) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
              %2762 : str = aten::str(%2761) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              %2763 : str = aten::add(%55, %2762) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2763) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%2748, %tensor.67)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %2748)
          %2764 : Tensor?[] = prim::ListConstruct(%keep.23)
          %2765 : Tensor = aten::index(%scores_per_img, %2764) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:133:32
           = prim::SetAttr[name="_objectness_logits"](%res.1, %2765)
          %2766 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%proposals.1, %res.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:134:8
          -> (%62)
      %2767 : Tensor = prim::Exit(%2389)
      %2768 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%proposals.1, %losses.1)
      %proposals.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %2770 : Dict(str, Tensor) = prim::TupleUnpack(%2768)
      %roi_heads.1 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%model)
      %features.6 : Tensor[] = prim::ListConstruct()
      %box_in_features : str[] = prim::GetAttr[name="box_in_features"](%roi_heads.1)
      %2774 : int = aten::len(%box_in_features) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
       = prim::Loop(%2774, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
        block0(%2775 : int):
          %f.2 : str = aten::__getitem__(%box_in_features, %2775) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
          %2777 : Tensor = aten::__getitem__(%features.1, %f.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:20
          %2778 : Tensor[] = aten::append(%features.6, %2777) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
          -> (%62)
      %box_pooler : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="box_pooler"](%roi_heads.1)
      %2780 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %2781 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
       = prim::Loop(%2781, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
        block0(%2782 : int):
          %x.8 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %2782) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
          %2784 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_proposal_boxes.3 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.8)
          %2786 : bool = aten::__isnot__(%_proposal_boxes.3, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:15
          %t.2 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%2786) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:8
            block0():
              %t.8 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.3)
              -> (%t.8)
            block1():
               = prim::RaiseException(%21) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:8
              -> (%2784)
          %2789 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%2780, %t.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
          -> (%62)
      %2790 : int = aten::len(%features.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
      %2791 : bool = aten::eq(%2790, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
       = prim::If(%2791) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
        block0():
          -> ()
        block1():
          %2792 : int = aten::len(%features.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:228:35
          %2793 : str = aten::format(%17, %60, %2792) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:227:11
          %2794 : str = aten::add(%55, %2793) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
           = prim::RaiseException(%2794) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
          -> ()
      %2795 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
      %2796 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %2797 : int = aten::size(%2796, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %2798 : bool = aten::eq(%2795, %2797) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
       = prim::If(%2798) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
        block0():
          -> ()
        block1():
          %2799 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %2800 : int = aten::size(%2799, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %2801 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:26
          %2802 : str = aten::format(%16, %2800, %2801) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:233:11
          %2803 : str = aten::add(%55, %2802) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
           = prim::RaiseException(%2803) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
          -> ()
      %2804 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %2805 : bool = aten::eq(%2804, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %box_features.1 : Tensor = prim::If(%2805) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:8
        block0():
          %2807 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %2808 : int[] = aten::size(%2807) # <string>:7:9
          %2809 : int = aten::__getitem__(%2808, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %output_size.2 : (int, int) = prim::GetAttr[name="output_size"](%box_pooler)
          %2811 : int, %2812 : int = prim::TupleUnpack(%output_size.2)
          %2813 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:73
          %2814 : int = prim::dtype(%2813)
          %2815 : Device = prim::device(%2813)
          %2816 : int[] = prim::ListConstruct(%54, %2809, %2811, %2812)
          %2817 : Tensor = aten::zeros(%2816, %2814, %61, %2815, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          -> (%2817)
        block1():
          %2818 : Tensor[] = prim::ListConstruct()
          %2819 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
           = prim::Loop(%2819, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
            block0(%2820 : int):
              %x.24 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2780, %2820) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              %tensor.16 : Tensor = prim::GetAttr[name="tensor"](%x.24)
              %2823 : Tensor[] = aten::append(%2818, %tensor.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              -> (%62)
          %boxes.6 : Tensor = aten::cat(%2818, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:12
          %2825 : int[] = prim::ListConstruct()
          %2826 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
           = prim::Loop(%2826, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
            block0(%2827 : int):
              %x.20 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2780, %2827) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              %tensor.20 : Tensor = prim::GetAttr[name="tensor"](%x.20)
              %2830 : int[] = aten::size(%tensor.20) # <string>:7:9
              %2831 : int = aten::__getitem__(%2830, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              %2832 : int[] = aten::append(%2825, %2831) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              -> (%62)
          %sizes.2 : Tensor = aten::as_tensor(%2825, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
          %2834 : Device = prim::device(%boxes.6)
          %sizes.6 : Tensor = aten::to(%sizes.2, %61, %61, %2834, %61, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:64:12
          %2836 : int = aten::len(%sizes.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:21
          %2837 : int = prim::dtype(%boxes.6)
          %2838 : Device = prim::device(%boxes.6)
          %2839 : Tensor = aten::arange(%2836, %2837, %61, %2838, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:8
          %indices.3 : Tensor = aten::repeat_interleave(%2839, %sizes.6, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:65:14
          %2841 : Tensor = aten::slice(%indices.3, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %2842 : Tensor = aten::unsqueeze(%2841, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %2843 : Tensor[] = prim::ListConstruct(%2842, %boxes.6)
          %pooler_fmt_boxes.14 : Tensor = aten::cat(%2843, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          %min_level.6 : int = prim::GetAttr[name="min_level"](%box_pooler)
          %max_level.6 : int = prim::GetAttr[name="max_level"](%box_pooler)
          %canonical_box_size.6 : int = prim::GetAttr[name="canonical_box_size"](%box_pooler)
          %canonical_level.6 : int = prim::GetAttr[name="canonical_level"](%box_pooler)
          %2849 : Tensor[] = prim::ListConstruct()
          %2850 : int = aten::len(%2780) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
           = prim::Loop(%2850, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
            block0(%2851 : int):
              %boxes.4 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2780, %2851) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              %tensor.22 : Tensor = prim::GetAttr[name="tensor"](%boxes.4)
              %2854 : Tensor = aten::slice(%tensor.22, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %2855 : Tensor = aten::select(%2854, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %2856 : Tensor = aten::slice(%tensor.22, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %2857 : Tensor = aten::select(%2856, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %2858 : Tensor = aten::sub(%2855, %2857, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %2859 : Tensor = aten::slice(%tensor.22, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %2860 : Tensor = aten::select(%2859, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %2861 : Tensor = aten::slice(%tensor.22, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %2862 : Tensor = aten::select(%2861, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %2863 : Tensor = aten::sub(%2860, %2862, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %area.2 : Tensor = aten::mul(%2858, %2863) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %2865 : Tensor[] = aten::append(%2849, %area.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              -> (%62)
          %2866 : int = aten::len(%2849) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %2867 : bool = aten::eq(%2866, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %2868 : Tensor = prim::If(%2867) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %2869 : Tensor = aten::__getitem__(%2849, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%2869)
            block1():
              %2870 : Tensor = aten::cat(%2849, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%2870)
          %box_sizes.2 : Tensor = aten::sqrt(%2868) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:16
          %2872 : Tensor = aten::div(%box_sizes.2, %canonical_box_size.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %2873 : Tensor = aten::add(%2872, %18, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %2874 : Tensor = aten::log2(%2873) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:26
          %2875 : Tensor = aten::add(%2874, %canonical_level.6, %48) # <string>:5:9
          %level_assignments.2 : Tensor = aten::floor(%2875) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:52:24
          %level_assignments.6 : Tensor = aten::clamp(%level_assignments.2, %min_level.6, %max_level.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:57:24
          %2878 : Tensor = aten::to(%level_assignments.6, %60, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %level_assignments.14 : Tensor = aten::sub(%2878, %min_level.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %2880 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %2881 : int[] = aten::size(%2880) # <string>:7:9
          %num_channels.8 : int = aten::__getitem__(%2881, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %output_size.18 : (int, int) = prim::GetAttr[name="output_size"](%box_pooler)
          %output_size.22 : int = prim::TupleIndex(%output_size.18, %54)
          %2885 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:251:89
          %2886 : int[] = aten::size(%pooler_fmt_boxes.14) # <string>:7:9
          %2887 : int = aten::__getitem__(%2886, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:108:14
          %2888 : int = prim::dtype(%2885)
          %2889 : Device = prim::device(%2885)
          %2890 : int[] = prim::ListConstruct(%2887, %num_channels.8, %output_size.22, %output_size.22)
          %output.16 : Tensor = aten::zeros(%2890, %2888, %61, %2889, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          %level_poolers.14 : __torch__.torch.nn.modules.container.___torch_mangle_41.ModuleList = prim::GetAttr[name="level_poolers"](%box_pooler)
          %_0.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.14)
          %_1.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.14)
          %_2.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.14)
          %_3.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.14)
          %2897 : Tensor = aten::eq(%level_assignments.14, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %2898 : int = aten::dim(%2897) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %2899 : bool = aten::eq(%2898, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %2900 : Tensor[] = prim::If(%2899) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %2901 : Tensor = aten::unsqueeze(%2897, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %2902 : Tensor = aten::nonzero(%2901) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %2903 : Tensor[] = aten::unbind(%2902, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%2903)
            block1():
              %2904 : Tensor = aten::nonzero(%2897) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %2905 : Tensor[] = aten::unbind(%2904, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%2905)
          %inds.56 : Tensor = aten::__getitem__(%2900, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %2907 : Tensor?[] = prim::ListConstruct(%inds.56)
          %pooler_fmt_boxes_level.32 : Tensor = aten::index(%pooler_fmt_boxes.14, %2907) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %2909 : Tensor = aten::__getitem__(%features.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %2910 : int = aten::dim(%pooler_fmt_boxes_level.32) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %2911 : bool = aten::eq(%2910, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %2912 : bool = prim::If(%2911) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %2913 : int = aten::size(%pooler_fmt_boxes_level.32, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %2914 : bool = aten::eq(%2913, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%2914)
            block1():
              -> (%50)
           = prim::If(%2912) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %2915 : bool = prim::is_quantized(%2909)
          %input.11 : Tensor = prim::If(%2915) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.13 : Tensor = aten::dequantize(%2909) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.13)
            block1():
              -> (%2909)
          %2918 : int = prim::dtype(%input.11)
          %2919 : Tensor = aten::to(%pooler_fmt_boxes_level.32, %2918, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.24 : (int, int) = prim::GetAttr[name="output_size"](%_0.12)
          %spatial_scale.4 : float = prim::GetAttr[name="spatial_scale"](%_0.12)
          %sampling_ratio.4 : int = prim::GetAttr[name="sampling_ratio"](%_0.12)
          %aligned.4 : bool = prim::GetAttr[name="aligned"](%_0.12)
          %2924 : int, %2925 : int = prim::TupleUnpack(%output_size.24)
          %2926 : bool = prim::isinstance[types=[list, tuple]](%2919)
           = prim::If(%2926) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.11 : Tensor[] = prim::unchecked_cast(%2919)
              %2928 : int = aten::len(%boxes.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%2928, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%2929 : int):
                  %_tensor.5 : Tensor = aten::__getitem__(%boxes.11, %2929) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %2931 : int = aten::size(%_tensor.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %2932 : bool = aten::eq(%2931, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%2932) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %2933 : int = aten::size(%2919, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %2934 : bool = aten::eq(%2933, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%2934) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %2935 : bool = prim::isinstance[types=[Tensor]](%2919)
          %2936 : bool = aten::__not__(%2935) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.15 : Tensor = prim::If(%2936) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.17 : Tensor[] = prim::unchecked_cast(%2919)
              %2939 : Tensor[] = prim::ListConstruct()
              %2940 : int = aten::len(%rois.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%2940, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%2941 : int):
                  %b.9 : Tensor = aten::__getitem__(%rois.17, %2941) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %2943 : Tensor[] = aten::append(%2939, %b.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %2944 : int = aten::len(%2939) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %2945 : bool = aten::eq(%2944, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.5 : Tensor = prim::If(%2945) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %2947 : Tensor = aten::__getitem__(%2939, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%2947)
                block1():
                  %2948 : Tensor = aten::cat(%2939, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%2948)
              %temp.5 : Tensor[] = prim::ListConstruct()
              %2950 : int = aten::len(%rois.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %2951 : int[] = prim::ListConstruct(%44, %2950)
              %2952 : int = prim::min(%2951) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%2952, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.13 : int):
                  %b.11 : Tensor = aten::__getitem__(%rois.17, %i.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %2955 : Tensor = aten::slice(%b.11, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %2956 : Tensor = aten::slice(%2955, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %2957 : Tensor = aten::full_like(%2956, %i.13, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %2958 : Tensor[] = aten::append(%temp.5, %2957) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %2959 : int = aten::len(%temp.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %2960 : bool = aten::eq(%2959, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.5 : Tensor = prim::If(%2960) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %2962 : Tensor = aten::__getitem__(%temp.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%2962)
                block1():
                  %2963 : Tensor = aten::cat(%temp.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%2963)
              %2964 : Tensor[] = prim::ListConstruct(%ids.5, %concat_boxes.5)
              %rois.19 : Tensor = aten::cat(%2964, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.19)
            block1():
              -> (%2919)
          %2966 : Tensor = torchvision::roi_align(%input.11, %rois.15, %spatial_scale.4, %2924, %2925, %sampling_ratio.4, %aligned.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %2967 : Tensor?[] = prim::ListConstruct(%inds.56)
          %2968 : Tensor = aten::index_put_(%output.16, %2967, %2966, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %2969 : Tensor = aten::eq(%level_assignments.14, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %2970 : int = aten::dim(%2969) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %2971 : bool = aten::eq(%2970, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %2972 : Tensor[] = prim::If(%2971) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %2973 : Tensor = aten::unsqueeze(%2969, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %2974 : Tensor = aten::nonzero(%2973) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %2975 : Tensor[] = aten::unbind(%2974, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%2975)
            block1():
              %2976 : Tensor = aten::nonzero(%2969) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %2977 : Tensor[] = aten::unbind(%2976, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%2977)
          %inds.60 : Tensor = aten::__getitem__(%2972, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %2979 : Tensor?[] = prim::ListConstruct(%inds.60)
          %pooler_fmt_boxes_level.36 : Tensor = aten::index(%pooler_fmt_boxes.14, %2979) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %2981 : Tensor = aten::__getitem__(%features.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %2982 : int = aten::dim(%pooler_fmt_boxes_level.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %2983 : bool = aten::eq(%2982, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %2984 : bool = prim::If(%2983) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %2985 : int = aten::size(%pooler_fmt_boxes_level.36, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %2986 : bool = aten::eq(%2985, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%2986)
            block1():
              -> (%50)
           = prim::If(%2984) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %2987 : bool = prim::is_quantized(%2981)
          %input.15 : Tensor = prim::If(%2987) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.17 : Tensor = aten::dequantize(%2981) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.17)
            block1():
              -> (%2981)
          %2990 : int = prim::dtype(%input.15)
          %2991 : Tensor = aten::to(%pooler_fmt_boxes_level.36, %2990, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.26 : (int, int) = prim::GetAttr[name="output_size"](%_1.12)
          %spatial_scale.6 : float = prim::GetAttr[name="spatial_scale"](%_1.12)
          %sampling_ratio.6 : int = prim::GetAttr[name="sampling_ratio"](%_1.12)
          %aligned.6 : bool = prim::GetAttr[name="aligned"](%_1.12)
          %2996 : int, %2997 : int = prim::TupleUnpack(%output_size.26)
          %2998 : bool = prim::isinstance[types=[list, tuple]](%2991)
           = prim::If(%2998) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.13 : Tensor[] = prim::unchecked_cast(%2991)
              %3000 : int = aten::len(%boxes.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3000, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3001 : int):
                  %_tensor.7 : Tensor = aten::__getitem__(%boxes.13, %3001) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3003 : int = aten::size(%_tensor.7, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3004 : bool = aten::eq(%3003, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3004) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3005 : int = aten::size(%2991, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3006 : bool = aten::eq(%3005, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3006) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3007 : bool = prim::isinstance[types=[Tensor]](%2991)
          %3008 : bool = aten::__not__(%3007) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.21 : Tensor = prim::If(%3008) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.23 : Tensor[] = prim::unchecked_cast(%2991)
              %3011 : Tensor[] = prim::ListConstruct()
              %3012 : int = aten::len(%rois.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3012, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3013 : int):
                  %b.13 : Tensor = aten::__getitem__(%rois.23, %3013) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3015 : Tensor[] = aten::append(%3011, %b.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3016 : int = aten::len(%3011) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3017 : bool = aten::eq(%3016, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.7 : Tensor = prim::If(%3017) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3019 : Tensor = aten::__getitem__(%3011, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3019)
                block1():
                  %3020 : Tensor = aten::cat(%3011, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3020)
              %temp.7 : Tensor[] = prim::ListConstruct()
              %3022 : int = aten::len(%rois.23) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3023 : int[] = prim::ListConstruct(%44, %3022)
              %3024 : int = prim::min(%3023) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3024, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.7 : int):
                  %b.15 : Tensor = aten::__getitem__(%rois.23, %i.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3027 : Tensor = aten::slice(%b.15, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3028 : Tensor = aten::slice(%3027, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3029 : Tensor = aten::full_like(%3028, %i.7, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3030 : Tensor[] = aten::append(%temp.7, %3029) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3031 : int = aten::len(%temp.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3032 : bool = aten::eq(%3031, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.7 : Tensor = prim::If(%3032) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3034 : Tensor = aten::__getitem__(%temp.7, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3034)
                block1():
                  %3035 : Tensor = aten::cat(%temp.7, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3035)
              %3036 : Tensor[] = prim::ListConstruct(%ids.7, %concat_boxes.7)
              %rois.25 : Tensor = aten::cat(%3036, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.25)
            block1():
              -> (%2991)
          %3038 : Tensor = torchvision::roi_align(%input.15, %rois.21, %spatial_scale.6, %2996, %2997, %sampling_ratio.6, %aligned.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3039 : Tensor?[] = prim::ListConstruct(%inds.60)
          %3040 : Tensor = aten::index_put_(%output.16, %3039, %3038, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %3041 : Tensor = aten::eq(%level_assignments.14, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3042 : int = aten::dim(%3041) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3043 : bool = aten::eq(%3042, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3044 : Tensor[] = prim::If(%3043) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3045 : Tensor = aten::unsqueeze(%3041, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3046 : Tensor = aten::nonzero(%3045) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3047 : Tensor[] = aten::unbind(%3046, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3047)
            block1():
              %3048 : Tensor = aten::nonzero(%3041) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3049 : Tensor[] = aten::unbind(%3048, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3049)
          %inds.64 : Tensor = aten::__getitem__(%3044, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3051 : Tensor?[] = prim::ListConstruct(%inds.64)
          %pooler_fmt_boxes_level.40 : Tensor = aten::index(%pooler_fmt_boxes.14, %3051) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3053 : Tensor = aten::__getitem__(%features.6, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3054 : int = aten::dim(%pooler_fmt_boxes_level.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3055 : bool = aten::eq(%3054, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3056 : bool = prim::If(%3055) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3057 : int = aten::size(%pooler_fmt_boxes_level.40, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3058 : bool = aten::eq(%3057, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3058)
            block1():
              -> (%50)
           = prim::If(%3056) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3059 : bool = prim::is_quantized(%3053)
          %input.19 : Tensor = prim::If(%3059) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.21 : Tensor = aten::dequantize(%3053) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.21)
            block1():
              -> (%3053)
          %3062 : int = prim::dtype(%input.19)
          %3063 : Tensor = aten::to(%pooler_fmt_boxes_level.40, %3062, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.28 : (int, int) = prim::GetAttr[name="output_size"](%_2.12)
          %spatial_scale.8 : float = prim::GetAttr[name="spatial_scale"](%_2.12)
          %sampling_ratio.8 : int = prim::GetAttr[name="sampling_ratio"](%_2.12)
          %aligned.8 : bool = prim::GetAttr[name="aligned"](%_2.12)
          %3068 : int, %3069 : int = prim::TupleUnpack(%output_size.28)
          %3070 : bool = prim::isinstance[types=[list, tuple]](%3063)
           = prim::If(%3070) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.15 : Tensor[] = prim::unchecked_cast(%3063)
              %3072 : int = aten::len(%boxes.15) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3072, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3073 : int):
                  %_tensor.9 : Tensor = aten::__getitem__(%boxes.15, %3073) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3075 : int = aten::size(%_tensor.9, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3076 : bool = aten::eq(%3075, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3076) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3077 : int = aten::size(%3063, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3078 : bool = aten::eq(%3077, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3078) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3079 : bool = prim::isinstance[types=[Tensor]](%3063)
          %3080 : bool = aten::__not__(%3079) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.27 : Tensor = prim::If(%3080) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.29 : Tensor[] = prim::unchecked_cast(%3063)
              %3083 : Tensor[] = prim::ListConstruct()
              %3084 : int = aten::len(%rois.29) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3084, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3085 : int):
                  %b.17 : Tensor = aten::__getitem__(%rois.29, %3085) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3087 : Tensor[] = aten::append(%3083, %b.17) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3088 : int = aten::len(%3083) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3089 : bool = aten::eq(%3088, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.9 : Tensor = prim::If(%3089) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3091 : Tensor = aten::__getitem__(%3083, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3091)
                block1():
                  %3092 : Tensor = aten::cat(%3083, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3092)
              %temp.9 : Tensor[] = prim::ListConstruct()
              %3094 : int = aten::len(%rois.29) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3095 : int[] = prim::ListConstruct(%44, %3094)
              %3096 : int = prim::min(%3095) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3096, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.9 : int):
                  %b.19 : Tensor = aten::__getitem__(%rois.29, %i.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3099 : Tensor = aten::slice(%b.19, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3100 : Tensor = aten::slice(%3099, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3101 : Tensor = aten::full_like(%3100, %i.9, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3102 : Tensor[] = aten::append(%temp.9, %3101) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3103 : int = aten::len(%temp.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3104 : bool = aten::eq(%3103, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.9 : Tensor = prim::If(%3104) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3106 : Tensor = aten::__getitem__(%temp.9, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3106)
                block1():
                  %3107 : Tensor = aten::cat(%temp.9, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3107)
              %3108 : Tensor[] = prim::ListConstruct(%ids.9, %concat_boxes.9)
              %rois.31 : Tensor = aten::cat(%3108, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.31)
            block1():
              -> (%3063)
          %3110 : Tensor = torchvision::roi_align(%input.19, %rois.27, %spatial_scale.8, %3068, %3069, %sampling_ratio.8, %aligned.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3111 : Tensor?[] = prim::ListConstruct(%inds.64)
          %3112 : Tensor = aten::index_put_(%output.16, %3111, %3110, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %3113 : Tensor = aten::eq(%level_assignments.14, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3114 : int = aten::dim(%3113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3115 : bool = aten::eq(%3114, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3116 : Tensor[] = prim::If(%3115) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3117 : Tensor = aten::unsqueeze(%3113, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3118 : Tensor = aten::nonzero(%3117) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3119 : Tensor[] = aten::unbind(%3118, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3119)
            block1():
              %3120 : Tensor = aten::nonzero(%3113) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3121 : Tensor[] = aten::unbind(%3120, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3121)
          %inds.68 : Tensor = aten::__getitem__(%3116, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3123 : Tensor?[] = prim::ListConstruct(%inds.68)
          %pooler_fmt_boxes_level.44 : Tensor = aten::index(%pooler_fmt_boxes.14, %3123) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3125 : Tensor = aten::__getitem__(%features.6, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3126 : int = aten::dim(%pooler_fmt_boxes_level.44) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3127 : bool = aten::eq(%3126, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3128 : bool = prim::If(%3127) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3129 : int = aten::size(%pooler_fmt_boxes_level.44, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3130 : bool = aten::eq(%3129, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3130)
            block1():
              -> (%50)
           = prim::If(%3128) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3131 : bool = prim::is_quantized(%3125)
          %input.23 : Tensor = prim::If(%3131) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.25 : Tensor = aten::dequantize(%3125) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.25)
            block1():
              -> (%3125)
          %3134 : int = prim::dtype(%input.23)
          %3135 : Tensor = aten::to(%pooler_fmt_boxes_level.44, %3134, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.30 : (int, int) = prim::GetAttr[name="output_size"](%_3.12)
          %spatial_scale.10 : float = prim::GetAttr[name="spatial_scale"](%_3.12)
          %sampling_ratio.10 : int = prim::GetAttr[name="sampling_ratio"](%_3.12)
          %aligned.10 : bool = prim::GetAttr[name="aligned"](%_3.12)
          %3140 : int, %3141 : int = prim::TupleUnpack(%output_size.30)
          %3142 : bool = prim::isinstance[types=[list, tuple]](%3135)
           = prim::If(%3142) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.8 : Tensor[] = prim::unchecked_cast(%3135)
              %3144 : int = aten::len(%boxes.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3144, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3145 : int):
                  %_tensor.11 : Tensor = aten::__getitem__(%boxes.8, %3145) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3147 : int = aten::size(%_tensor.11, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3148 : bool = aten::eq(%3147, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3148) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3149 : int = aten::size(%3135, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3150 : bool = aten::eq(%3149, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3150) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3151 : bool = prim::isinstance[types=[Tensor]](%3135)
          %3152 : bool = aten::__not__(%3151) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.33 : Tensor = prim::If(%3152) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.35 : Tensor[] = prim::unchecked_cast(%3135)
              %3155 : Tensor[] = prim::ListConstruct()
              %3156 : int = aten::len(%rois.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3156, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3157 : int):
                  %b.21 : Tensor = aten::__getitem__(%rois.35, %3157) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3159 : Tensor[] = aten::append(%3155, %b.21) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3160 : int = aten::len(%3155) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3161 : bool = aten::eq(%3160, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.11 : Tensor = prim::If(%3161) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3163 : Tensor = aten::__getitem__(%3155, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3163)
                block1():
                  %3164 : Tensor = aten::cat(%3155, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3164)
              %temp.11 : Tensor[] = prim::ListConstruct()
              %3166 : int = aten::len(%rois.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3167 : int[] = prim::ListConstruct(%44, %3166)
              %3168 : int = prim::min(%3167) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3168, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.11 : int):
                  %b.23 : Tensor = aten::__getitem__(%rois.35, %i.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3171 : Tensor = aten::slice(%b.23, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3172 : Tensor = aten::slice(%3171, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3173 : Tensor = aten::full_like(%3172, %i.11, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3174 : Tensor[] = aten::append(%temp.11, %3173) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3175 : int = aten::len(%temp.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3176 : bool = aten::eq(%3175, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.11 : Tensor = prim::If(%3176) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3178 : Tensor = aten::__getitem__(%temp.11, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3178)
                block1():
                  %3179 : Tensor = aten::cat(%temp.11, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3179)
              %3180 : Tensor[] = prim::ListConstruct(%ids.11, %concat_boxes.11)
              %rois.37 : Tensor = aten::cat(%3180, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.37)
            block1():
              -> (%3135)
          %3182 : Tensor = torchvision::roi_align(%input.23, %rois.33, %spatial_scale.10, %3140, %3141, %sampling_ratio.10, %aligned.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3183 : Tensor?[] = prim::ListConstruct(%inds.68)
          %3184 : Tensor = aten::index_put_(%output.16, %3183, %3182, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          -> (%output.16)
      %box_head : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%roi_heads.1)
      %fc1 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%box_head)
      %fc2 : __torch__.torch.nn.modules.linear.___torch_mangle_42.Linear = prim::GetAttr[name="fc2"](%box_head)
      %x.12 : Tensor = aten::flatten(%box_features.1, %48, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/flatten.py:42:15
      %weight.2 : Tensor = prim::GetAttr[name="weight"](%fc1)
      %bias.2 : Tensor = prim::GetAttr[name="bias"](%fc1)
      %x.9 : Tensor = aten::linear(%x.12, %weight.2, %bias.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1848:11
      %x.26 : Tensor = aten::relu(%x.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.4 : Tensor = prim::GetAttr[name="weight"](%fc2)
      %bias.4 : Tensor = prim::GetAttr[name="bias"](%fc2)
      %x.28 : Tensor = aten::linear(%x.26, %weight.4, %bias.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1848:11
      %box_features.5 : Tensor = aten::relu(%x.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %box_predictor.1 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%roi_heads.1)
      %3198 : int = aten::dim(%box_features.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:301:11
      %3199 : bool = aten::gt(%3198, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:301:11
      %x : Tensor = prim::If(%3199) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:301:8
        block0():
          %x.16 : Tensor = aten::flatten(%box_features.5, %48, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:302:16
          -> (%x.16)
        block1():
          -> (%box_features.5)
      %cls_score : __torch__.torch.nn.modules.linear.___torch_mangle_43.Linear = prim::GetAttr[name="cls_score"](%box_predictor.1)
      %weight.11 : Tensor = prim::GetAttr[name="weight"](%cls_score)
      %bias.11 : Tensor = prim::GetAttr[name="bias"](%cls_score)
      %scores.4 : Tensor = aten::linear(%x, %weight.11, %bias.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1848:11
      %bbox_pred : __torch__.torch.nn.modules.linear.___torch_mangle_44.Linear = prim::GetAttr[name="bbox_pred"](%box_predictor.1)
      %weight.13 : Tensor = prim::GetAttr[name="weight"](%bbox_pred)
      %bias.13 : Tensor = prim::GetAttr[name="bias"](%bbox_pred)
      %proposal_deltas.1 : Tensor = aten::linear(%x, %weight.13, %bias.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1848:11
      %predictions.1 : (Tensor, Tensor) = prim::TupleConstruct(%scores.4, %proposal_deltas.1)
      %box_predictor : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%roi_heads.1)
      %3212 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:538:15
      %3213 : bool = aten::Bool(%3212) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:538:15
      %3214 : bool = aten::__not__(%3213) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:538:11
      %boxes.9 : Tensor[] = prim::If(%3214) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:538:8
        block0():
          %3216 : Tensor[] = prim::ListConstruct()
          -> (%3216)
        block1():
          %3217 : Tensor, %proposal_deltas.3 : Tensor = prim::TupleUnpack(%predictions.1)
          %num_prop_per_image.3 : int[] = prim::ListConstruct()
          %3220 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
           = prim::Loop(%3220, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
            block0(%3221 : int):
              %p.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3221) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
              %3223 : int = prim::Uninitialized()
              %_proposal_boxes.1 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.7)
              %3225 : bool = aten::__isnot__(%_proposal_boxes.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:11
              %3226 : int = prim::If(%3225) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:8
                block0():
                  %t.13 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.1)
                  %tensor.21 : Tensor = prim::GetAttr[name="tensor"](%t.13)
                  %3229 : int[] = aten::size(%tensor.21) # <string>:7:9
                  %3230 : int = aten::__getitem__(%3229, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
                  -> (%3230)
                block1():
                  %_objectness_logits.2 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.7)
                  %3232 : bool = aten::__isnot__(%_objectness_logits.2, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:11
                  %3233 : int = prim::If(%3232) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:8
                    block0():
                      %t.146 : Tensor = prim::unchecked_cast(%_objectness_logits.2)
                      %3235 : int = aten::len(%t.146) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:140:19
                      -> (%3235)
                    block1():
                      %_pred_boxes.7 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.7)
                      %3237 : bool = aten::__isnot__(%_pred_boxes.7, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:11
                      %3238 : int = prim::If(%3237) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:8
                        block0():
                          %t.202 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.7)
                          %tensor.13 : Tensor = prim::GetAttr[name="tensor"](%t.202)
                          %3241 : int[] = aten::size(%tensor.13) # <string>:7:9
                          %3242 : int = aten::__getitem__(%3241, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
                          -> (%3242)
                        block1():
                          %_scores.10 : Tensor? = prim::GetAttr[name="_scores"](%p.7)
                          %3244 : bool = aten::__isnot__(%_scores.10, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:11
                          %3245 : int = prim::If(%3244) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:8
                            block0():
                              %t.250 : Tensor = prim::unchecked_cast(%_scores.10)
                              %3247 : int = aten::len(%t.250) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:150:19
                              -> (%3247)
                            block1():
                              %_pred_classes.14 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.7)
                              %3249 : bool = aten::__isnot__(%_pred_classes.14, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:11
                              %3250 : int = prim::If(%3249) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:8
                                block0():
                                  %t.290 : Tensor = prim::unchecked_cast(%_pred_classes.14)
                                  %3252 : int = aten::len(%t.290) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:155:19
                                  -> (%3252)
                                block1():
                                  %_pred_masks.18 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.7)
                                  %3254 : bool = aten::__isnot__(%_pred_masks.18, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:11
                                  %3255 : int = prim::If(%3254) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:8
                                    block0():
                                      %t.322 : Tensor = prim::unchecked_cast(%_pred_masks.18)
                                      %3257 : int = aten::len(%t.322) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:160:19
                                      -> (%3257)
                                    block1():
                                      %_pred_keypoints.22 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.7)
                                      %3259 : bool = aten::__isnot__(%_pred_keypoints.22, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:11
                                      %3260 : int = prim::If(%3259) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:8
                                        block0():
                                          %t.346 : Tensor = prim::unchecked_cast(%_pred_keypoints.22)
                                          %3262 : int = aten::len(%t.346) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:165:19
                                          -> (%3262)
                                        block1():
                                          %_pred_keypoint_heatmaps.26 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.7)
                                          %3264 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.26, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:11
                                          %3265 : int = prim::If(%3264) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:8
                                            block0():
                                              %t.362 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.26)
                                              %3267 : int = aten::len(%t.362) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:170:19
                                              -> (%3267)
                                            block1():
                                               = prim::RaiseException(%15) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:173:8
                                              -> (%3223)
                                          -> (%3265)
                                      -> (%3260)
                                  -> (%3255)
                              -> (%3250)
                          -> (%3245)
                      -> (%3238)
                  -> (%3233)
              %3268 : int[] = aten::append(%num_prop_per_image.3, %3226) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
              -> (%62)
          %3269 : Tensor[] = prim::ListConstruct()
          %3270 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
           = prim::Loop(%3270, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
            block0(%3271 : int):
              %p.11 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3271) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
              %3273 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
              %_proposal_boxes.2 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.11)
              %3275 : bool = aten::__isnot__(%_proposal_boxes.2, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:15
              %t.11 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%3275) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:8
                block0():
                  %t.9 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.2)
                  -> (%t.9)
                block1():
                   = prim::RaiseException(%21) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:31:8
                  -> (%3273)
              %tensor.8 : Tensor = prim::GetAttr[name="tensor"](%t.11)
              %3279 : Tensor[] = aten::append(%3269, %tensor.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
              -> (%62)
          %3280 : int = aten::len(%3269) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %3281 : bool = aten::eq(%3280, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %proposal_boxes.3 : Tensor = prim::If(%3281) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %3283 : Tensor = aten::__getitem__(%3269, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%3283)
            block1():
              %3284 : Tensor = aten::cat(%3269, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%3284)
          %box2box_transform.1 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%box_predictor)
          %deltas.5 : Tensor = aten::to(%proposal_deltas.3, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:88:17
          %3287 : int = prim::dtype(%deltas.5)
          %boxes.5 : Tensor = aten::to(%proposal_boxes.3, %3287, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:89:16
          %3289 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %3290 : Tensor = aten::select(%3289, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %3291 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %3292 : Tensor = aten::select(%3291, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %widths.1 : Tensor = aten::sub(%3290, %3292, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %3294 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %3295 : Tensor = aten::select(%3294, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %3296 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %3297 : Tensor = aten::select(%3296, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %heights.1 : Tensor = aten::sub(%3295, %3297, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %3299 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %3300 : Tensor = aten::select(%3299, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %3301 : Tensor = aten::mul(%widths.1, %30) # <string>:3:9
          %ctr_x.1 : Tensor = aten::add(%3300, %3301, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %3303 : Tensor = aten::slice(%boxes.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %3304 : Tensor = aten::select(%3303, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %3305 : Tensor = aten::mul(%heights.1, %30) # <string>:3:9
          %ctr_y.1 : Tensor = aten::add(%3304, %3305, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %weights : (float, float, float, float) = prim::GetAttr[name="weights"](%box2box_transform.1)
          %wx.1 : float, %wy.1 : float, %ww.1 : float, %wh.1 : float = prim::TupleUnpack(%weights)
          %3312 : Tensor = aten::slice(%deltas.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %3313 : Tensor = aten::slice(%3312, %48, %54, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %dx.1 : Tensor = aten::div(%3313, %wx.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %3315 : Tensor = aten::slice(%deltas.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %3316 : Tensor = aten::slice(%3315, %48, %48, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %dy.1 : Tensor = aten::div(%3316, %wy.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %3318 : Tensor = aten::slice(%deltas.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %3319 : Tensor = aten::slice(%3318, %48, %52, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %dw.1 : Tensor = aten::div(%3319, %ww.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %3321 : Tensor = aten::slice(%deltas.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %3322 : Tensor = aten::slice(%3321, %48, %35, %61, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %dh.1 : Tensor = aten::div(%3322, %wh.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %scale_clamp.1 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform.1)
          %dw.5 : Tensor = aten::clamp(%dw.1, %61, %scale_clamp.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:103:13
          %scale_clamp : float = prim::GetAttr[name="scale_clamp"](%box2box_transform.1)
          %dh.5 : Tensor = aten::clamp(%dh.1, %61, %scale_clamp) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:104:13
          %3328 : Tensor = aten::slice(%widths.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %3329 : Tensor = aten::unsqueeze(%3328, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %3330 : Tensor = aten::mul(%dx.1, %3329) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %3331 : Tensor = aten::slice(%ctr_x.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %3332 : Tensor = aten::unsqueeze(%3331, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.1 : Tensor = aten::add(%3330, %3332, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %3334 : Tensor = aten::slice(%heights.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %3335 : Tensor = aten::unsqueeze(%3334, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %3336 : Tensor = aten::mul(%dy.1, %3335) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %3337 : Tensor = aten::slice(%ctr_y.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %3338 : Tensor = aten::unsqueeze(%3337, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.1 : Tensor = aten::add(%3336, %3338, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %3340 : Tensor = aten::exp(%dw.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %3341 : Tensor = aten::slice(%widths.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %3342 : Tensor = aten::unsqueeze(%3341, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %pred_w.1 : Tensor = aten::mul(%3340, %3342) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %3344 : Tensor = aten::exp(%dh.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %3345 : Tensor = aten::slice(%heights.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %3346 : Tensor = aten::unsqueeze(%3345, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %pred_h.1 : Tensor = aten::mul(%3344, %3346) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %3348 : Tensor = aten::mul(%pred_w.1, %30) # <string>:3:9
          %x1.2 : Tensor = aten::sub(%pred_ctr_x.1, %3348, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:111:13
          %3350 : Tensor = aten::mul(%pred_h.1, %30) # <string>:3:9
          %y1.2 : Tensor = aten::sub(%pred_ctr_y.1, %3350, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:112:13
          %3352 : Tensor = aten::mul(%pred_w.1, %30) # <string>:3:9
          %x2.2 : Tensor = aten::add(%pred_ctr_x.1, %3352, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:113:13
          %3354 : Tensor = aten::mul(%pred_h.1, %30) # <string>:3:9
          %y2.2 : Tensor = aten::add(%pred_ctr_y.1, %3354, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:114:13
          %3356 : Tensor[] = prim::ListConstruct(%x1.2, %y1.2, %x2.2, %y2.2)
          %pred_boxes.1 : Tensor = aten::stack(%3356, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:115:21
          %3358 : int[] = aten::size(%deltas.5) # <string>:7:9
          %predict_boxes.3 : Tensor = aten::reshape(%pred_boxes.1, %3358) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:116:15
          %3360 : Tensor[] = aten::split(%predict_boxes.3, %num_prop_per_image.3, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:547:15
          -> (%3360)
      %scores.1 : Tensor, %3362 : Tensor = prim::TupleUnpack(%predictions.1)
      %num_inst_per_image.1 : int[] = prim::ListConstruct()
      %3364 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
       = prim::Loop(%3364, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
        block0(%3365 : int):
          %p.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3365) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
          %3367 : int = prim::Uninitialized()
          %_proposal_boxes.4 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.1)
          %3369 : bool = aten::__isnot__(%_proposal_boxes.4, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:11
          %3370 : int = prim::If(%3369) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:8
            block0():
              %t.15 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.4)
              %tensor.15 : Tensor = prim::GetAttr[name="tensor"](%t.15)
              %3373 : int[] = aten::size(%tensor.15) # <string>:7:9
              %3374 : int = aten::__getitem__(%3373, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              -> (%3374)
            block1():
              %_objectness_logits.3 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.1)
              %3376 : bool = aten::__isnot__(%_objectness_logits.3, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:11
              %3377 : int = prim::If(%3376) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:8
                block0():
                  %t.147 : Tensor = prim::unchecked_cast(%_objectness_logits.3)
                  %3379 : int = aten::len(%t.147) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:140:19
                  -> (%3379)
                block1():
                  %_pred_boxes.9 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.1)
                  %3381 : bool = aten::__isnot__(%_pred_boxes.9, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:11
                  %3382 : int = prim::If(%3381) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:8
                    block0():
                      %t.203 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.9)
                      %tensor.19 : Tensor = prim::GetAttr[name="tensor"](%t.203)
                      %3385 : int[] = aten::size(%tensor.19) # <string>:7:9
                      %3386 : int = aten::__getitem__(%3385, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
                      -> (%3386)
                    block1():
                      %_scores.11 : Tensor? = prim::GetAttr[name="_scores"](%p.1)
                      %3388 : bool = aten::__isnot__(%_scores.11, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:11
                      %3389 : int = prim::If(%3388) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:8
                        block0():
                          %t.251 : Tensor = prim::unchecked_cast(%_scores.11)
                          %3391 : int = aten::len(%t.251) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:150:19
                          -> (%3391)
                        block1():
                          %_pred_classes.15 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.1)
                          %3393 : bool = aten::__isnot__(%_pred_classes.15, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:11
                          %3394 : int = prim::If(%3393) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:8
                            block0():
                              %t.291 : Tensor = prim::unchecked_cast(%_pred_classes.15)
                              %3396 : int = aten::len(%t.291) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:155:19
                              -> (%3396)
                            block1():
                              %_pred_masks.19 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.1)
                              %3398 : bool = aten::__isnot__(%_pred_masks.19, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:11
                              %3399 : int = prim::If(%3398) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:8
                                block0():
                                  %t.323 : Tensor = prim::unchecked_cast(%_pred_masks.19)
                                  %3401 : int = aten::len(%t.323) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:160:19
                                  -> (%3401)
                                block1():
                                  %_pred_keypoints.23 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.1)
                                  %3403 : bool = aten::__isnot__(%_pred_keypoints.23, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:11
                                  %3404 : int = prim::If(%3403) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:8
                                    block0():
                                      %t.347 : Tensor = prim::unchecked_cast(%_pred_keypoints.23)
                                      %3406 : int = aten::len(%t.347) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:165:19
                                      -> (%3406)
                                    block1():
                                      %_pred_keypoint_heatmaps.27 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.1)
                                      %3408 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.27, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:11
                                      %3409 : int = prim::If(%3408) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:8
                                        block0():
                                          %t.363 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.27)
                                          %3411 : int = aten::len(%t.363) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:170:19
                                          -> (%3411)
                                        block1():
                                           = prim::RaiseException(%15) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:173:8
                                          -> (%3367)
                                      -> (%3409)
                                  -> (%3404)
                              -> (%3399)
                          -> (%3394)
                      -> (%3389)
                  -> (%3382)
              -> (%3377)
          %3412 : int[] = aten::append(%num_inst_per_image.1, %3370) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
          -> (%62)
      %use_sigmoid_ce : bool = prim::GetAttr[name="use_sigmoid_ce"](%box_predictor)
      %probs : Tensor = prim::If(%use_sigmoid_ce) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:565:8
        block0():
          %probs.1 : Tensor = aten::sigmoid(%scores.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:566:20
          -> (%probs.1)
        block1():
          %ret.2 : Tensor = aten::softmax(%scores.1, %57, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1680:14
          -> (%ret.2)
      %scores.2 : Tensor[] = aten::split(%probs, %num_inst_per_image.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:569:15
      %image_shapes.1 : (int, int)[] = prim::ListConstruct()
      %3419 : int = aten::len(%proposals.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
       = prim::Loop(%3419, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
        block0(%3420 : int):
          %x.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3420) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
          %image_size.4 : (int, int) = prim::GetAttr[name="image_size"](%x.3)
          %3423 : (int, int)[] = aten::append(%image_shapes.1, %image_size.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
          -> (%62)
      %test_score_thresh : float = prim::GetAttr[name="test_score_thresh"](%box_predictor)
      %test_nms_thresh : float = prim::GetAttr[name="test_nms_thresh"](%box_predictor)
      %test_topk_per_image : int = prim::GetAttr[name="test_topk_per_image"](%box_predictor)
      %result_per_image.1 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = prim::ListConstruct()
      %3428 : int = aten::len(%scores.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3429 : int = aten::len(%boxes.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3430 : int = aten::len(%image_shapes.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3431 : int[] = prim::ListConstruct(%3428, %3429, %3430)
      %3432 : int = prim::min(%3431) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
       = prim::Loop(%3432, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
        block0(%3433 : int):
          %scores_per_image.1 : Tensor = aten::__getitem__(%scores.2, %3433) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %boxes_per_image.1 : Tensor = aten::__getitem__(%boxes.9, %3433) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %image_shape.1 : (int, int) = aten::__getitem__(%image_shapes.1, %3433) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %3437 : Tensor = aten::isfinite(%boxes_per_image.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3438 : Tensor = aten::all(%3437, %48, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3439 : Tensor = aten::isfinite(%scores_per_image.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:137:52
          %3440 : Tensor = aten::all(%3439, %48, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:137:52
          %valid_mask.1 : Tensor = aten::__and__(%3438, %3440) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3442 : Tensor = aten::all(%valid_mask.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:138:11
          %3443 : bool = aten::Bool(%3442) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:138:11
          %3444 : bool = aten::__not__(%3443) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:138:7
          %scores : Tensor, %boxes.61 : Tensor = prim::If(%3444) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:138:4
            block0():
              %3447 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %boxes.17 : Tensor = aten::index(%boxes_per_image.1, %3447) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:139:16
              %3449 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %scores.7 : Tensor = aten::index(%scores_per_image.1, %3449) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:140:17
              -> (%scores.7, %boxes.17)
            block1():
              -> (%scores_per_image.1, %boxes_per_image.1)
          %3451 : Tensor = aten::slice(%scores, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:13
          %scores.21 : Tensor = aten::slice(%3451, %48, %61, %57, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:13
          %3453 : int[] = aten::size(%boxes.61) # <string>:7:9
          %3454 : int = aten::__getitem__(%3453, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:143:27
          %num_bbox_reg_classes.1 : int = aten::floordiv(%3454, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:143:27
          %3456 : int[] = prim::ListConstruct(%57, %60)
          %3457 : Tensor = aten::reshape(%boxes.61, %3456) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:18
          %boxes.23 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %tensor.71 : Tensor = aten::to(%3457, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
          %3460 : int = aten::numel(%tensor.71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %3461 : bool = aten::eq(%3460, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %tensor.4 : Tensor = prim::If(%3461) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
            block0():
              %3463 : int[] = prim::ListConstruct(%57, %60)
              %3464 : Tensor = aten::reshape(%tensor.71, %3463) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              %tensor.75 : Tensor = aten::to(%3464, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              -> (%tensor.75)
            block1():
              -> (%tensor.71)
          %3466 : int = aten::dim(%tensor.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %3467 : bool = aten::eq(%3466, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %3468 : bool = prim::If(%3467) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
            block0():
              %3469 : int = aten::size(%tensor.4, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              %3470 : bool = aten::eq(%3469, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              -> (%3470)
            block1():
              -> (%50)
           = prim::If(%3468) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %3471 : int[] = aten::size(%tensor.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
              %3472 : str = aten::str(%3471) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              %3473 : str = aten::add(%55, %3472) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%3473) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.23, %tensor.4)
          %tensor.6 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3475 : Tensor = aten::isfinite(%tensor.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
          %3476 : Tensor = aten::all(%3475) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
          %3477 : bool = aten::Bool(%3476) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:15
           = prim::If(%3477) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%26) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:8
              -> ()
          %h.1 : int, %w.1 : int = prim::TupleUnpack(%image_shape.1)
          %tensor.10 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3481 : Tensor = aten::slice(%tensor.10, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %3482 : Tensor = aten::select(%3481, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %x1.1 : Tensor = aten::clamp(%3482, %54, %w.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %tensor.7 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3485 : Tensor = aten::slice(%tensor.7, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %3486 : Tensor = aten::select(%3485, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %y1.1 : Tensor = aten::clamp(%3486, %54, %h.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %tensor.9 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3489 : Tensor = aten::slice(%tensor.9, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %3490 : Tensor = aten::select(%3489, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %x2.1 : Tensor = aten::clamp(%3490, %54, %w.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:13
          %tensor.73 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3493 : Tensor = aten::slice(%tensor.73, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %3494 : Tensor = aten::select(%3493, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %y2.1 : Tensor = aten::clamp(%3494, %54, %h.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:196:13
          %3496 : Tensor[] = prim::ListConstruct(%x1.1, %y1.1, %x2.1, %y2.1)
          %3497 : Tensor = aten::stack(%3496, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:197:22
           = prim::SetAttr[name="tensor"](%boxes.23, %3497)
          %tensor.23 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3499 : int[] = prim::ListConstruct(%57, %num_bbox_reg_classes.1, %60)
          %boxes.29 : Tensor = aten::view(%tensor.23, %3499) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:12
          %filter_mask.1 : Tensor = aten::gt(%scores.21, %test_score_thresh) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:151:18
          %filter_inds.1 : Tensor = aten::nonzero(%filter_mask.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:154:18
          %3503 : bool = aten::eq(%num_bbox_reg_classes.1, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:7
          %boxes : Tensor = prim::If(%3503) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:4
            block0():
              %3505 : Tensor = aten::slice(%filter_inds.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:156:22
              %3506 : Tensor = aten::select(%3505, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:156:22
              %3507 : Tensor = aten::select(%boxes.29, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:156:16
              %3508 : Tensor?[] = prim::ListConstruct(%3506)
              %boxes.33 : Tensor = aten::index(%3507, %3508) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:156:16
              -> (%boxes.33)
            block1():
              %3510 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
              %boxes.39 : Tensor = aten::index(%boxes.29, %3510) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:158:16
              -> (%boxes.39)
          %3512 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
          %scores.27 : Tensor = aten::index(%scores.21, %3512) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:159:13
          %3514 : Tensor = aten::slice(%filter_inds.1, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:162:38
          %3515 : Tensor = aten::select(%3514, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:162:38
          %3516 : int[] = aten::size(%boxes) # <string>:7:9
          %3517 : int = aten::__getitem__(%3516, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:11
          %3518 : bool = aten::eq(%3517, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:11
           = prim::If(%3518) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:15:4
              -> ()
          %3519 : Tensor = aten::to(%boxes, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/nms.py:20:31
          %3520 : int = aten::numel(%3519) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
          %3521 : bool = aten::gt(%3520, %27) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
          %keep.1 : Tensor = prim::If(%3521) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:4
            block0():
              %keep_mask.1 : Tensor = aten::zeros_like(%scores.27, %28, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:99:16
              %output.3 : Tensor, %inverse_indices.3 : Tensor, %counts.3 : Tensor = aten::_unique2(%3515, %62, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/functional.py:735:42
              %3527 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.3, %inverse_indices.3, %counts.3)
              %output.2 : Tensor, %3529 : Tensor, %3530 : Tensor = prim::TupleUnpack(%3527)
              %3531 : int = aten::len(%output.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
               = prim::Loop(%3531, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
                block0(%3532 : int):
                  %class_id.1 : Tensor = aten::select(%output.2, %54, %3532) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:100:4
                  %3534 : Tensor = aten::eq(%3515, %class_id.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:35
                  %3535 : Tensor[] = aten::where(%3534) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:23
                  %curr_indices.1 : Tensor = aten::__getitem__(%3535, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:101:23
                  %3537 : Tensor?[] = prim::ListConstruct(%curr_indices.1)
                  %3538 : Tensor = aten::index(%3519, %3537) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:102:32
                  %3539 : Tensor?[] = prim::ListConstruct(%curr_indices.1)
                  %3540 : Tensor = aten::index(%scores.27, %3539) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:102:53
                  %curr_keep_indices.1 : Tensor = torchvision::nms(%3538, %3540, %test_nms_thresh) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:35:11
                  %3542 : Tensor?[] = prim::ListConstruct(%curr_keep_indices.1)
                  %3543 : Tensor = aten::index(%curr_indices.1, %3542) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:103:18
                  %3544 : int = prim::dtype(%keep_mask.1)
                  %3545 : Device = prim::device(%keep_mask.1)
                  %3546 : Tensor = aten::tensor(%62, %3544, %3545, %50)
                  %3547 : Tensor?[] = prim::ListConstruct(%3543)
                  %3548 : Tensor = aten::index_put_(%keep_mask.1, %3547, %3546, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:103:8
                  -> (%62)
              %3549 : Tensor[] = aten::where(%keep_mask.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:104:19
              %keep_indices.1 : Tensor = aten::__getitem__(%3549, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:104:19
              %3551 : Tensor?[] = prim::ListConstruct(%keep_indices.1)
              %3552 : Tensor = aten::index(%scores.27, %3551) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:24
              %3553 : Tensor, %3554 : Tensor = aten::sort(%3552, %57, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:24
              %3555 : Tensor?[] = prim::ListConstruct(%3554)
              %3556 : Tensor = aten::index(%keep_indices.1, %3555) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:105:11
              -> (%3556)
            block1():
              %3557 : int = aten::numel(%3519) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:7
              %3558 : bool = aten::eq(%3557, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:7
              %3559 : Tensor = prim::If(%3558) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:82:4
                block0():
                  %3560 : Device = prim::device(%3519)
                  %3561 : int[] = prim::ListConstruct(%54)
                  %3562 : Tensor = aten::empty(%3561, %60, %61, %3560, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:83:15
                  -> (%3562)
                block1():
                  %max_coordinate.3 : Tensor = aten::max(%3519) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:84:21
                  %3564 : Tensor = aten::to(%3515, %3519, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:14
                  %3565 : Tensor = aten::tensor(%48, %61, %61, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:49
                  %3566 : Tensor = aten::to(%3565, %3519, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:49
                  %3567 : Tensor = aten::add(%max_coordinate.3, %3566, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:32
                  %offsets.3 : Tensor = aten::mul(%3564, %3567) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:85:14
                  %3569 : Tensor = aten::slice(%offsets.3, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:28
                  %3570 : Tensor = aten::unsqueeze(%3569, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:28
                  %boxes_for_nms.3 : Tensor = aten::add(%3519, %3570, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:86:20
                  %keep.3 : Tensor = torchvision::nms(%boxes_for_nms.3, %scores.27, %test_nms_thresh) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/boxes.py:35:11
                  -> (%keep.3)
              -> (%3559)
          %3573 : bool = aten::ge(%test_topk_per_image, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:7
          %keep : Tensor = prim::If(%3573) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:4
            block0():
              %keep.5 : Tensor = aten::slice(%keep.1, %54, %61, %test_topk_per_image, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:164:15
              -> (%keep.5)
            block1():
              -> (%keep.1)
          %3576 : Tensor?[] = prim::ListConstruct(%keep)
          %boxes.57 : Tensor = aten::index(%boxes, %3576) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:165:33
          %3578 : Tensor?[] = prim::ListConstruct(%keep)
          %scores.33 : Tensor = aten::index(%scores.27, %3578) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:165:46
          %3580 : Tensor?[] = prim::ListConstruct(%keep)
          %filter_inds.11 : Tensor = aten::index(%filter_inds.1, %3580) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:165:60
          %result.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%result.1, %image_shape.1)
           = prim::SetAttr[name="_field_names"](%result.1, %29)
           = prim::SetAttr[name="_proposal_boxes"](%result.1, %61)
           = prim::SetAttr[name="_objectness_logits"](%result.1, %61)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %61)
           = prim::SetAttr[name="_scores"](%result.1, %61)
           = prim::SetAttr[name="_pred_classes"](%result.1, %61)
           = prim::SetAttr[name="_pred_masks"](%result.1, %61)
           = prim::SetAttr[name="_pred_keypoints"](%result.1, %61)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%result.1, %61)
          %3583 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %tensor.79 : Tensor = aten::to(%boxes.57, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
          %3585 : int = aten::numel(%tensor.79) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %3586 : bool = aten::eq(%3585, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
          %tensor.25 : Tensor = prim::If(%3586) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
            block0():
              %3588 : int[] = prim::ListConstruct(%57, %60)
              %3589 : Tensor = aten::reshape(%tensor.79, %3588) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              %tensor.83 : Tensor = aten::to(%3589, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
              -> (%tensor.83)
            block1():
              -> (%tensor.79)
          %3591 : int = aten::dim(%tensor.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %3592 : bool = aten::eq(%3591, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
          %3593 : bool = prim::If(%3592) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
            block0():
              %3594 : int = aten::size(%tensor.25, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              %3595 : bool = aten::eq(%3594, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
              -> (%3595)
            block1():
              -> (%50)
           = prim::If(%3593) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %3596 : int[] = aten::size(%tensor.25) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
              %3597 : str = aten::str(%3596) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              %3598 : str = aten::add(%55, %3597) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%3598) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%3583, %tensor.25)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %3583)
           = prim::SetAttr[name="_scores"](%result.1, %scores.33)
          %3599 : Tensor = aten::slice(%filter_inds.11, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:170:26
          %3600 : Tensor = aten::select(%3599, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:170:26
           = prim::SetAttr[name="_pred_classes"](%result.1, %3600)
          %3601 : Tensor = aten::slice(%filter_inds.11, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:171:19
          %3602 : Tensor = aten::select(%3601, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:171:19
          %3603 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = prim::TupleConstruct(%result.1, %3602)
          %3604 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = aten::append(%result_per_image.1, %3603) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          -> (%62)
      %3605 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %3606 : int = aten::len(%result_per_image.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
       = prim::Loop(%3606, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
        block0(%3607 : int):
          %x.11 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %3607) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
          %3609 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::TupleIndex(%x.11, %54)
          %3610 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%3605, %3609) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
          -> (%62)
      %3611 : Tensor[] = prim::ListConstruct()
      %3612 : int = aten::len(%result_per_image.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
       = prim::Loop(%3612, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
        block0(%3613 : int):
          %x.31 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %3613) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
          %3615 : Tensor = prim::TupleIndex(%x.31, %48)
          %3616 : Tensor[] = aten::append(%3611, %3615) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
          -> (%62)
      %3617 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Tensor[]) = prim::TupleConstruct(%3605, %3611)
      %pred_instances.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %3619 : Tensor[] = prim::TupleUnpack(%3617)
      %3620 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %_pred_boxes.8 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%3620)
      %3622 : bool = aten::__isnot__(%_pred_boxes.8, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:188:19
      %3623 : bool = prim::If(%3622) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %3624 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %_pred_classes.17 : Tensor? = prim::GetAttr[name="_pred_classes"](%3624)
          %3626 : bool = aten::__isnot__(%_pred_classes.17, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:196:19
          -> (%3626)
        block1():
          -> (%50)
       = prim::If(%3623) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      %features.12 : Tensor[] = prim::ListConstruct()
      %mask_in_features.1 : str[] = prim::GetAttr[name="mask_in_features"](%roi_heads.1)
      %3629 : int = aten::len(%mask_in_features.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
       = prim::Loop(%3629, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
        block0(%3630 : int):
          %f.8 : str = aten::__getitem__(%mask_in_features.1, %3630) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
          %3632 : Tensor = aten::__getitem__(%features.1, %f.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:24
          %3633 : Tensor[] = aten::append(%features.12, %3632) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
          -> (%62)
      %boxes.24 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %3635 : int = aten::len(%pred_instances.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
       = prim::Loop(%3635, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
        block0(%3636 : int):
          %x.111 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %3636) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
          %3638 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_pred_boxes.1 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.111)
          %3640 : bool = aten::__isnot__(%_pred_boxes.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:15
          %t.14 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%3640) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:8
            block0():
              %t.16 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.1)
              -> (%t.16)
            block1():
               = prim::RaiseException(%22) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:8
              -> (%3638)
          %3643 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%boxes.24, %t.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
          -> (%62)
      %mask_pooler.1 : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="mask_pooler"](%roi_heads.1)
      %3645 : int = aten::len(%features.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
      %3646 : bool = aten::eq(%3645, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
       = prim::If(%3646) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
        block0():
          -> ()
        block1():
          %3647 : int = aten::len(%features.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:228:35
          %3648 : str = aten::format(%17, %60, %3647) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:227:11
          %3649 : str = aten::add(%55, %3648) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
           = prim::RaiseException(%3649) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
          -> ()
      %3650 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
      %3651 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %3652 : int = aten::size(%3651, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %3653 : bool = aten::eq(%3650, %3652) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
       = prim::If(%3653) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
        block0():
          -> ()
        block1():
          %3654 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %3655 : int = aten::size(%3654, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %3656 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:26
          %3657 : str = aten::format(%16, %3655, %3656) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:233:11
          %3658 : str = aten::add(%55, %3657) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
           = prim::RaiseException(%3658) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
          -> ()
      %3659 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %3660 : bool = aten::eq(%3659, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %features.14 : Tensor = prim::If(%3660) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:8
        block0():
          %3662 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %3663 : int[] = aten::size(%3662) # <string>:7:9
          %3664 : int = aten::__getitem__(%3663, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %output_size.3 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler.1)
          %3666 : int, %3667 : int = prim::TupleUnpack(%output_size.3)
          %3668 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:73
          %3669 : int = prim::dtype(%3668)
          %3670 : Device = prim::device(%3668)
          %3671 : int[] = prim::ListConstruct(%54, %3664, %3666, %3667)
          %3672 : Tensor = aten::zeros(%3671, %3669, %61, %3670, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          -> (%3672)
        block1():
          %3673 : Tensor[] = prim::ListConstruct()
          %3674 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
           = prim::Loop(%3674, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
            block0(%3675 : int):
              %x.113 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3675) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              %tensor.85 : Tensor = prim::GetAttr[name="tensor"](%x.113)
              %3678 : Tensor[] = aten::append(%3673, %tensor.85) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              -> (%62)
          %boxes.26 : Tensor = aten::cat(%3673, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:12
          %3680 : int[] = prim::ListConstruct()
          %3681 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
           = prim::Loop(%3681, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
            block0(%3682 : int):
              %x.115 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3682) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              %tensor.69 : Tensor = prim::GetAttr[name="tensor"](%x.115)
              %3685 : int[] = aten::size(%tensor.69) # <string>:7:9
              %3686 : int = aten::__getitem__(%3685, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              %3687 : int[] = aten::append(%3680, %3686) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              -> (%62)
          %sizes.3 : Tensor = aten::as_tensor(%3680, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
          %3689 : Device = prim::device(%boxes.26)
          %sizes.7 : Tensor = aten::to(%sizes.3, %61, %61, %3689, %61, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:64:12
          %3691 : int = aten::len(%sizes.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:21
          %3692 : int = prim::dtype(%boxes.26)
          %3693 : Device = prim::device(%boxes.26)
          %3694 : Tensor = aten::arange(%3691, %3692, %61, %3693, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:8
          %indices.4 : Tensor = aten::repeat_interleave(%3694, %sizes.7, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:65:14
          %3696 : Tensor = aten::slice(%indices.4, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %3697 : Tensor = aten::unsqueeze(%3696, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %3698 : Tensor[] = prim::ListConstruct(%3697, %boxes.26)
          %pooler_fmt_boxes.15 : Tensor = aten::cat(%3698, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          %min_level.7 : int = prim::GetAttr[name="min_level"](%mask_pooler.1)
          %max_level.7 : int = prim::GetAttr[name="max_level"](%mask_pooler.1)
          %canonical_box_size.7 : int = prim::GetAttr[name="canonical_box_size"](%mask_pooler.1)
          %canonical_level.7 : int = prim::GetAttr[name="canonical_level"](%mask_pooler.1)
          %3704 : Tensor[] = prim::ListConstruct()
          %3705 : int = aten::len(%boxes.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
           = prim::Loop(%3705, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
            block0(%3706 : int):
              %boxes.28 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3706) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              %tensor.89 : Tensor = prim::GetAttr[name="tensor"](%boxes.28)
              %3709 : Tensor = aten::slice(%tensor.89, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %3710 : Tensor = aten::select(%3709, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %3711 : Tensor = aten::slice(%tensor.89, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %3712 : Tensor = aten::select(%3711, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %3713 : Tensor = aten::sub(%3710, %3712, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %3714 : Tensor = aten::slice(%tensor.89, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %3715 : Tensor = aten::select(%3714, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %3716 : Tensor = aten::slice(%tensor.89, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %3717 : Tensor = aten::select(%3716, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %3718 : Tensor = aten::sub(%3715, %3717, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %area.3 : Tensor = aten::mul(%3713, %3718) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %3720 : Tensor[] = aten::append(%3704, %area.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              -> (%62)
          %3721 : int = aten::len(%3704) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %3722 : bool = aten::eq(%3721, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %3723 : Tensor = prim::If(%3722) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %3724 : Tensor = aten::__getitem__(%3704, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%3724)
            block1():
              %3725 : Tensor = aten::cat(%3704, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%3725)
          %box_sizes.3 : Tensor = aten::sqrt(%3723) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:16
          %3727 : Tensor = aten::div(%box_sizes.3, %canonical_box_size.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %3728 : Tensor = aten::add(%3727, %18, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %3729 : Tensor = aten::log2(%3728) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:26
          %3730 : Tensor = aten::add(%3729, %canonical_level.7, %48) # <string>:5:9
          %level_assignments.3 : Tensor = aten::floor(%3730) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:52:24
          %level_assignments.7 : Tensor = aten::clamp(%level_assignments.3, %min_level.7, %max_level.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:57:24
          %3733 : Tensor = aten::to(%level_assignments.7, %60, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %level_assignments.15 : Tensor = aten::sub(%3733, %min_level.7, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %3735 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %3736 : int[] = aten::size(%3735) # <string>:7:9
          %num_channels.9 : int = aten::__getitem__(%3736, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %output_size.19 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler.1)
          %output_size.23 : int = prim::TupleIndex(%output_size.19, %54)
          %3740 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:251:89
          %3741 : int[] = aten::size(%pooler_fmt_boxes.15) # <string>:7:9
          %3742 : int = aten::__getitem__(%3741, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:108:14
          %3743 : int = prim::dtype(%3740)
          %3744 : Device = prim::device(%3740)
          %3745 : int[] = prim::ListConstruct(%3742, %num_channels.9, %output_size.23, %output_size.23)
          %output.17 : Tensor = aten::zeros(%3745, %3743, %61, %3744, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          %level_poolers.15 : __torch__.torch.nn.modules.container.___torch_mangle_41.ModuleList = prim::GetAttr[name="level_poolers"](%mask_pooler.1)
          %_0.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.15)
          %_1.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.15)
          %_2.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.15)
          %_3.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.15)
          %3752 : Tensor = aten::eq(%level_assignments.15, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3753 : int = aten::dim(%3752) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3754 : bool = aten::eq(%3753, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3755 : Tensor[] = prim::If(%3754) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3756 : Tensor = aten::unsqueeze(%3752, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3757 : Tensor = aten::nonzero(%3756) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3758 : Tensor[] = aten::unbind(%3757, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3758)
            block1():
              %3759 : Tensor = aten::nonzero(%3752) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3760 : Tensor[] = aten::unbind(%3759, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3760)
          %inds.57 : Tensor = aten::__getitem__(%3755, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3762 : Tensor?[] = prim::ListConstruct(%inds.57)
          %pooler_fmt_boxes_level.33 : Tensor = aten::index(%pooler_fmt_boxes.15, %3762) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3764 : Tensor = aten::__getitem__(%features.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3765 : int = aten::dim(%pooler_fmt_boxes_level.33) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3766 : bool = aten::eq(%3765, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3767 : bool = prim::If(%3766) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3768 : int = aten::size(%pooler_fmt_boxes_level.33, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3769 : bool = aten::eq(%3768, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3769)
            block1():
              -> (%50)
           = prim::If(%3767) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3770 : bool = prim::is_quantized(%3764)
          %input.43 : Tensor = prim::If(%3770) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.45 : Tensor = aten::dequantize(%3764) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.45)
            block1():
              -> (%3764)
          %3773 : int = prim::dtype(%input.43)
          %3774 : Tensor = aten::to(%pooler_fmt_boxes_level.33, %3773, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.25 : (int, int) = prim::GetAttr[name="output_size"](%_0.13)
          %spatial_scale.9 : float = prim::GetAttr[name="spatial_scale"](%_0.13)
          %sampling_ratio.9 : int = prim::GetAttr[name="sampling_ratio"](%_0.13)
          %aligned.9 : bool = prim::GetAttr[name="aligned"](%_0.13)
          %3779 : int, %3780 : int = prim::TupleUnpack(%output_size.25)
          %3781 : bool = prim::isinstance[types=[list, tuple]](%3774)
           = prim::If(%3781) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.30 : Tensor[] = prim::unchecked_cast(%3774)
              %3783 : int = aten::len(%boxes.30) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3783, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3784 : int):
                  %_tensor.10 : Tensor = aten::__getitem__(%boxes.30, %3784) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3786 : int = aten::size(%_tensor.10, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3787 : bool = aten::eq(%3786, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3787) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3788 : int = aten::size(%3774, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3789 : bool = aten::eq(%3788, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3789) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3790 : bool = prim::isinstance[types=[Tensor]](%3774)
          %3791 : bool = aten::__not__(%3790) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.32 : Tensor = prim::If(%3791) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.34 : Tensor[] = prim::unchecked_cast(%3774)
              %3794 : Tensor[] = prim::ListConstruct()
              %3795 : int = aten::len(%rois.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3795, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3796 : int):
                  %b.20 : Tensor = aten::__getitem__(%rois.34, %3796) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3798 : Tensor[] = aten::append(%3794, %b.20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3799 : int = aten::len(%3794) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3800 : bool = aten::eq(%3799, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.10 : Tensor = prim::If(%3800) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3802 : Tensor = aten::__getitem__(%3794, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3802)
                block1():
                  %3803 : Tensor = aten::cat(%3794, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3803)
              %temp.10 : Tensor[] = prim::ListConstruct()
              %3805 : int = aten::len(%rois.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3806 : int[] = prim::ListConstruct(%44, %3805)
              %3807 : int = prim::min(%3806) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3807, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.69 : int):
                  %b.22 : Tensor = aten::__getitem__(%rois.34, %i.69) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3810 : Tensor = aten::slice(%b.22, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3811 : Tensor = aten::slice(%3810, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3812 : Tensor = aten::full_like(%3811, %i.69, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3813 : Tensor[] = aten::append(%temp.10, %3812) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3814 : int = aten::len(%temp.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3815 : bool = aten::eq(%3814, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.10 : Tensor = prim::If(%3815) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3817 : Tensor = aten::__getitem__(%temp.10, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3817)
                block1():
                  %3818 : Tensor = aten::cat(%temp.10, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3818)
              %3819 : Tensor[] = prim::ListConstruct(%ids.10, %concat_boxes.10)
              %rois.36 : Tensor = aten::cat(%3819, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.36)
            block1():
              -> (%3774)
          %3821 : Tensor = torchvision::roi_align(%input.43, %rois.32, %spatial_scale.9, %3779, %3780, %sampling_ratio.9, %aligned.9) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3822 : Tensor?[] = prim::ListConstruct(%inds.57)
          %3823 : Tensor = aten::index_put_(%output.17, %3822, %3821, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %3824 : Tensor = aten::eq(%level_assignments.15, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3825 : int = aten::dim(%3824) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3826 : bool = aten::eq(%3825, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3827 : Tensor[] = prim::If(%3826) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3828 : Tensor = aten::unsqueeze(%3824, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3829 : Tensor = aten::nonzero(%3828) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3830 : Tensor[] = aten::unbind(%3829, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3830)
            block1():
              %3831 : Tensor = aten::nonzero(%3824) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3832 : Tensor[] = aten::unbind(%3831, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3832)
          %inds.61 : Tensor = aten::__getitem__(%3827, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3834 : Tensor?[] = prim::ListConstruct(%inds.61)
          %pooler_fmt_boxes_level.37 : Tensor = aten::index(%pooler_fmt_boxes.15, %3834) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3836 : Tensor = aten::__getitem__(%features.12, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3837 : int = aten::dim(%pooler_fmt_boxes_level.37) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3838 : bool = aten::eq(%3837, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3839 : bool = prim::If(%3838) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3840 : int = aten::size(%pooler_fmt_boxes_level.37, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3841 : bool = aten::eq(%3840, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3841)
            block1():
              -> (%50)
           = prim::If(%3839) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3842 : bool = prim::is_quantized(%3836)
          %input.47 : Tensor = prim::If(%3842) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.49 : Tensor = aten::dequantize(%3836) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.49)
            block1():
              -> (%3836)
          %3845 : int = prim::dtype(%input.47)
          %3846 : Tensor = aten::to(%pooler_fmt_boxes_level.37, %3845, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.27 : (int, int) = prim::GetAttr[name="output_size"](%_1.13)
          %spatial_scale.11 : float = prim::GetAttr[name="spatial_scale"](%_1.13)
          %sampling_ratio.11 : int = prim::GetAttr[name="sampling_ratio"](%_1.13)
          %aligned.11 : bool = prim::GetAttr[name="aligned"](%_1.13)
          %3851 : int, %3852 : int = prim::TupleUnpack(%output_size.27)
          %3853 : bool = prim::isinstance[types=[list, tuple]](%3846)
           = prim::If(%3853) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.32 : Tensor[] = prim::unchecked_cast(%3846)
              %3855 : int = aten::len(%boxes.32) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3855, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3856 : int):
                  %_tensor.12 : Tensor = aten::__getitem__(%boxes.32, %3856) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3858 : int = aten::size(%_tensor.12, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3859 : bool = aten::eq(%3858, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3859) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3860 : int = aten::size(%3846, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3861 : bool = aten::eq(%3860, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3861) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3862 : bool = prim::isinstance[types=[Tensor]](%3846)
          %3863 : bool = aten::__not__(%3862) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.38 : Tensor = prim::If(%3863) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.40 : Tensor[] = prim::unchecked_cast(%3846)
              %3866 : Tensor[] = prim::ListConstruct()
              %3867 : int = aten::len(%rois.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3867, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3868 : int):
                  %b.24 : Tensor = aten::__getitem__(%rois.40, %3868) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3870 : Tensor[] = aten::append(%3866, %b.24) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3871 : int = aten::len(%3866) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3872 : bool = aten::eq(%3871, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.12 : Tensor = prim::If(%3872) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3874 : Tensor = aten::__getitem__(%3866, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3874)
                block1():
                  %3875 : Tensor = aten::cat(%3866, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3875)
              %temp.12 : Tensor[] = prim::ListConstruct()
              %3877 : int = aten::len(%rois.40) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3878 : int[] = prim::ListConstruct(%44, %3877)
              %3879 : int = prim::min(%3878) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3879, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.71 : int):
                  %b.26 : Tensor = aten::__getitem__(%rois.40, %i.71) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3882 : Tensor = aten::slice(%b.26, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3883 : Tensor = aten::slice(%3882, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3884 : Tensor = aten::full_like(%3883, %i.71, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3885 : Tensor[] = aten::append(%temp.12, %3884) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3886 : int = aten::len(%temp.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3887 : bool = aten::eq(%3886, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.12 : Tensor = prim::If(%3887) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3889 : Tensor = aten::__getitem__(%temp.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3889)
                block1():
                  %3890 : Tensor = aten::cat(%temp.12, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3890)
              %3891 : Tensor[] = prim::ListConstruct(%ids.12, %concat_boxes.12)
              %rois.42 : Tensor = aten::cat(%3891, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.42)
            block1():
              -> (%3846)
          %3893 : Tensor = torchvision::roi_align(%input.47, %rois.38, %spatial_scale.11, %3851, %3852, %sampling_ratio.11, %aligned.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3894 : Tensor?[] = prim::ListConstruct(%inds.61)
          %3895 : Tensor = aten::index_put_(%output.17, %3894, %3893, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %3896 : Tensor = aten::eq(%level_assignments.15, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3897 : int = aten::dim(%3896) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3898 : bool = aten::eq(%3897, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3899 : Tensor[] = prim::If(%3898) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3900 : Tensor = aten::unsqueeze(%3896, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3901 : Tensor = aten::nonzero(%3900) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3902 : Tensor[] = aten::unbind(%3901, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3902)
            block1():
              %3903 : Tensor = aten::nonzero(%3896) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3904 : Tensor[] = aten::unbind(%3903, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3904)
          %inds.65 : Tensor = aten::__getitem__(%3899, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3906 : Tensor?[] = prim::ListConstruct(%inds.65)
          %pooler_fmt_boxes_level.41 : Tensor = aten::index(%pooler_fmt_boxes.15, %3906) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3908 : Tensor = aten::__getitem__(%features.12, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3909 : int = aten::dim(%pooler_fmt_boxes_level.41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3910 : bool = aten::eq(%3909, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3911 : bool = prim::If(%3910) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3912 : int = aten::size(%pooler_fmt_boxes_level.41, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3913 : bool = aten::eq(%3912, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3913)
            block1():
              -> (%50)
           = prim::If(%3911) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3914 : bool = prim::is_quantized(%3908)
          %input.51 : Tensor = prim::If(%3914) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.53 : Tensor = aten::dequantize(%3908) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.53)
            block1():
              -> (%3908)
          %3917 : int = prim::dtype(%input.51)
          %3918 : Tensor = aten::to(%pooler_fmt_boxes_level.41, %3917, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.29 : (int, int) = prim::GetAttr[name="output_size"](%_2.13)
          %spatial_scale.13 : float = prim::GetAttr[name="spatial_scale"](%_2.13)
          %sampling_ratio.13 : int = prim::GetAttr[name="sampling_ratio"](%_2.13)
          %aligned.13 : bool = prim::GetAttr[name="aligned"](%_2.13)
          %3923 : int, %3924 : int = prim::TupleUnpack(%output_size.29)
          %3925 : bool = prim::isinstance[types=[list, tuple]](%3918)
           = prim::If(%3925) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.34 : Tensor[] = prim::unchecked_cast(%3918)
              %3927 : int = aten::len(%boxes.34) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3927, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%3928 : int):
                  %_tensor.14 : Tensor = aten::__getitem__(%boxes.34, %3928) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %3930 : int = aten::size(%_tensor.14, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %3931 : bool = aten::eq(%3930, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%3931) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %3932 : int = aten::size(%3918, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %3933 : bool = aten::eq(%3932, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%3933) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %3934 : bool = prim::isinstance[types=[Tensor]](%3918)
          %3935 : bool = aten::__not__(%3934) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.44 : Tensor = prim::If(%3935) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.46 : Tensor[] = prim::unchecked_cast(%3918)
              %3938 : Tensor[] = prim::ListConstruct()
              %3939 : int = aten::len(%rois.46) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%3939, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%3940 : int):
                  %b.28 : Tensor = aten::__getitem__(%rois.46, %3940) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %3942 : Tensor[] = aten::append(%3938, %b.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %3943 : int = aten::len(%3938) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3944 : bool = aten::eq(%3943, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.14 : Tensor = prim::If(%3944) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3946 : Tensor = aten::__getitem__(%3938, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3946)
                block1():
                  %3947 : Tensor = aten::cat(%3938, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3947)
              %temp.14 : Tensor[] = prim::ListConstruct()
              %3949 : int = aten::len(%rois.46) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %3950 : int[] = prim::ListConstruct(%44, %3949)
              %3951 : int = prim::min(%3950) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%3951, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.73 : int):
                  %b.30 : Tensor = aten::__getitem__(%rois.46, %i.73) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %3954 : Tensor = aten::slice(%b.30, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3955 : Tensor = aten::slice(%3954, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %3956 : Tensor = aten::full_like(%3955, %i.73, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %3957 : Tensor[] = aten::append(%temp.14, %3956) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %3958 : int = aten::len(%temp.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %3959 : bool = aten::eq(%3958, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.14 : Tensor = prim::If(%3959) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %3961 : Tensor = aten::__getitem__(%temp.14, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%3961)
                block1():
                  %3962 : Tensor = aten::cat(%temp.14, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%3962)
              %3963 : Tensor[] = prim::ListConstruct(%ids.14, %concat_boxes.14)
              %rois.48 : Tensor = aten::cat(%3963, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.48)
            block1():
              -> (%3918)
          %3965 : Tensor = torchvision::roi_align(%input.51, %rois.44, %spatial_scale.13, %3923, %3924, %sampling_ratio.13, %aligned.13) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %3966 : Tensor?[] = prim::ListConstruct(%inds.65)
          %3967 : Tensor = aten::index_put_(%output.17, %3966, %3965, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %3968 : Tensor = aten::eq(%level_assignments.15, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %3969 : int = aten::dim(%3968) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3970 : bool = aten::eq(%3969, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %3971 : Tensor[] = prim::If(%3970) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %3972 : Tensor = aten::unsqueeze(%3968, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3973 : Tensor = aten::nonzero(%3972) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %3974 : Tensor[] = aten::unbind(%3973, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%3974)
            block1():
              %3975 : Tensor = aten::nonzero(%3968) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %3976 : Tensor[] = aten::unbind(%3975, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%3976)
          %inds.69 : Tensor = aten::__getitem__(%3971, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %3978 : Tensor?[] = prim::ListConstruct(%inds.69)
          %pooler_fmt_boxes_level.45 : Tensor = aten::index(%pooler_fmt_boxes.15, %3978) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %3980 : Tensor = aten::__getitem__(%features.12, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %3981 : int = aten::dim(%pooler_fmt_boxes_level.45) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3982 : bool = aten::eq(%3981, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %3983 : bool = prim::If(%3982) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %3984 : int = aten::size(%pooler_fmt_boxes_level.45, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %3985 : bool = aten::eq(%3984, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%3985)
            block1():
              -> (%50)
           = prim::If(%3983) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %3986 : bool = prim::is_quantized(%3980)
          %input.55 : Tensor = prim::If(%3986) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.57 : Tensor = aten::dequantize(%3980) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.57)
            block1():
              -> (%3980)
          %3989 : int = prim::dtype(%input.55)
          %3990 : Tensor = aten::to(%pooler_fmt_boxes_level.45, %3989, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.31 : (int, int) = prim::GetAttr[name="output_size"](%_3.13)
          %spatial_scale.15 : float = prim::GetAttr[name="spatial_scale"](%_3.13)
          %sampling_ratio.15 : int = prim::GetAttr[name="sampling_ratio"](%_3.13)
          %aligned.15 : bool = prim::GetAttr[name="aligned"](%_3.13)
          %3995 : int, %3996 : int = prim::TupleUnpack(%output_size.31)
          %3997 : bool = prim::isinstance[types=[list, tuple]](%3990)
           = prim::If(%3997) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.36 : Tensor[] = prim::unchecked_cast(%3990)
              %3999 : int = aten::len(%boxes.36) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%3999, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%4000 : int):
                  %_tensor.16 : Tensor = aten::__getitem__(%boxes.36, %4000) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %4002 : int = aten::size(%_tensor.16, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %4003 : bool = aten::eq(%4002, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%4003) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %4004 : int = aten::size(%3990, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %4005 : bool = aten::eq(%4004, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%4005) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %4006 : bool = prim::isinstance[types=[Tensor]](%3990)
          %4007 : bool = aten::__not__(%4006) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.50 : Tensor = prim::If(%4007) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.52 : Tensor[] = prim::unchecked_cast(%3990)
              %4010 : Tensor[] = prim::ListConstruct()
              %4011 : int = aten::len(%rois.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%4011, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%4012 : int):
                  %b.32 : Tensor = aten::__getitem__(%rois.52, %4012) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %4014 : Tensor[] = aten::append(%4010, %b.32) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %4015 : int = aten::len(%4010) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4016 : bool = aten::eq(%4015, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.16 : Tensor = prim::If(%4016) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4018 : Tensor = aten::__getitem__(%4010, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4018)
                block1():
                  %4019 : Tensor = aten::cat(%4010, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4019)
              %temp.16 : Tensor[] = prim::ListConstruct()
              %4021 : int = aten::len(%rois.52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %4022 : int[] = prim::ListConstruct(%44, %4021)
              %4023 : int = prim::min(%4022) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%4023, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.75 : int):
                  %b.34 : Tensor = aten::__getitem__(%rois.52, %i.75) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %4026 : Tensor = aten::slice(%b.34, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4027 : Tensor = aten::slice(%4026, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4028 : Tensor = aten::full_like(%4027, %i.75, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %4029 : Tensor[] = aten::append(%temp.16, %4028) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %4030 : int = aten::len(%temp.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4031 : bool = aten::eq(%4030, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.16 : Tensor = prim::If(%4031) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4033 : Tensor = aten::__getitem__(%temp.16, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4033)
                block1():
                  %4034 : Tensor = aten::cat(%temp.16, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4034)
              %4035 : Tensor[] = prim::ListConstruct(%ids.16, %concat_boxes.16)
              %rois.54 : Tensor = aten::cat(%4035, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.54)
            block1():
              -> (%3990)
          %4037 : Tensor = torchvision::roi_align(%input.55, %rois.50, %spatial_scale.15, %3995, %3996, %sampling_ratio.15, %aligned.15) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %4038 : Tensor?[] = prim::ListConstruct(%inds.69)
          %4039 : Tensor = aten::index_put_(%output.17, %4038, %4037, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          -> (%output.17)
      %mask_head.1 : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%roi_heads.1)
      %mask_fcn1.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn1"](%mask_head.1)
      %mask_fcn2.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn2"](%mask_head.1)
      %mask_fcn3.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn3"](%mask_head.1)
      %mask_fcn4.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn4"](%mask_head.1)
      %deconv.1 : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%mask_head.1)
      %predictor.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_45.Conv2d = prim::GetAttr[name="predictor"](%mask_head.1)
      %weight.121 : Tensor = prim::GetAttr[name="weight"](%mask_fcn1.1)
      %bias.121 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn1.1)
      %4049 : int[] = prim::ListConstruct(%48, %48)
      %4050 : int[] = prim::ListConstruct(%48, %48)
      %4051 : int[] = prim::ListConstruct(%48, %48)
      %x.117 : Tensor = aten::conv2d(%features.14, %weight.121, %bias.121, %4049, %4050, %4051, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.119 : Tensor = aten::relu(%x.117) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.123 : Tensor = prim::GetAttr[name="weight"](%mask_fcn2.1)
      %bias.123 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn2.1)
      %4056 : int[] = prim::ListConstruct(%48, %48)
      %4057 : int[] = prim::ListConstruct(%48, %48)
      %4058 : int[] = prim::ListConstruct(%48, %48)
      %x.121 : Tensor = aten::conv2d(%x.119, %weight.123, %bias.123, %4056, %4057, %4058, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.123 : Tensor = aten::relu(%x.121) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.125 : Tensor = prim::GetAttr[name="weight"](%mask_fcn3.1)
      %bias.125 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn3.1)
      %4063 : int[] = prim::ListConstruct(%48, %48)
      %4064 : int[] = prim::ListConstruct(%48, %48)
      %4065 : int[] = prim::ListConstruct(%48, %48)
      %x.125 : Tensor = aten::conv2d(%x.123, %weight.125, %bias.125, %4063, %4064, %4065, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.127 : Tensor = aten::relu(%x.125) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.127 : Tensor = prim::GetAttr[name="weight"](%mask_fcn4.1)
      %bias.127 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn4.1)
      %4070 : int[] = prim::ListConstruct(%48, %48)
      %4071 : int[] = prim::ListConstruct(%48, %48)
      %4072 : int[] = prim::ListConstruct(%48, %48)
      %x.129 : Tensor = aten::conv2d(%x.127, %weight.127, %bias.127, %4070, %4071, %4072, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.131 : Tensor = aten::relu(%x.129) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %ret.3 : int[] = prim::ListConstruct(%54, %54)
      %weight.129 : Tensor = prim::GetAttr[name="weight"](%deconv.1)
      %bias.129 : Tensor? = prim::GetAttr[name="bias"](%deconv.1)
      %4078 : int[] = prim::ListConstruct(%52, %52)
      %4079 : int[] = prim::ListConstruct(%54, %54)
      %4080 : int[] = prim::ListConstruct(%48, %48)
      %x.133 : Tensor = aten::conv_transpose2d(%x.131, %weight.129, %bias.129, %4078, %4079, %ret.3, %48, %4080) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/conv.py:923:15
      %x.135 : Tensor = aten::relu(%x.133) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.131 : Tensor = prim::GetAttr[name="weight"](%predictor.1)
      %bias.131 : Tensor? = prim::GetAttr[name="bias"](%predictor.1)
      %4085 : int[] = prim::ListConstruct(%48, %48)
      %4086 : int[] = prim::ListConstruct(%54, %54)
      %4087 : int[] = prim::ListConstruct(%48, %48)
      %x.137 : Tensor = aten::conv2d(%x.135, %weight.131, %bias.131, %4085, %4086, %4087, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %4089 : int = aten::size(%x.137, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:137:24
      %cls_agnostic_mask.2 : bool = aten::eq(%4089, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:137:24
      %mask_probs_pred.2 : Tensor = prim::If(%cls_agnostic_mask.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:139:4
        block0():
          %mask_probs_pred.4 : Tensor = aten::sigmoid(%x.137) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:140:26
          -> (%mask_probs_pred.4)
        block1():
          %4093 : int[] = aten::size(%x.137) # <string>:7:9
          %num_masks.2 : int = aten::__getitem__(%4093, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:143:20
          %4095 : Tensor[] = prim::ListConstruct()
          %4096 : int = aten::len(%pred_instances.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
           = prim::Loop(%4096, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
            block0(%4097 : int):
              %i.77 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4097) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
              %4099 : Tensor = prim::Uninitialized()
              %_pred_classes.1 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.77)
              %4101 : bool = aten::__isnot__(%_pred_classes.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:15
              %t.18 : Tensor = prim::If(%4101) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:8
                block0():
                  %t.20 : Tensor = prim::unchecked_cast(%_pred_classes.1)
                  -> (%t.20)
                block1():
                   = prim::RaiseException(%23) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:8
                  -> (%4099)
              %4104 : Tensor[] = aten::append(%4095, %t.18) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
              -> (%62)
          %4105 : int = aten::len(%4095) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4106 : bool = aten::eq(%4105, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %class_pred.2 : Tensor = prim::If(%4106) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %4108 : Tensor = aten::__getitem__(%4095, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%4108)
            block1():
              %4109 : Tensor = aten::cat(%4095, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%4109)
          %device.4 : Device = prim::device(%class_pred.2)
          %4111 : Tensor = aten::arange(%num_masks.2, %61, %61, %device.4, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:150:35
          %4112 : Device = prim::device(%class_pred.2)
          %indices.6 : Tensor = aten::to(%4111, %4112, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
          %4114 : Tensor?[] = prim::ListConstruct(%indices.6, %class_pred.2)
          %4115 : Tensor = aten::index(%x.137, %4114) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4116 : Tensor = aten::slice(%4115, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4117 : Tensor = aten::unsqueeze(%4116, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %mask_probs_pred.6 : Tensor = aten::sigmoid(%4117) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          -> (%mask_probs_pred.6)
      %num_boxes_per_image.2 : int[] = prim::ListConstruct()
      %4120 : int = aten::len(%pred_instances.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
       = prim::Loop(%4120, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
        block0(%4121 : int):
          %i.79 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4121) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
          %4123 : int = prim::Uninitialized()
          %_proposal_boxes.5 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.79)
          %4125 : bool = aten::__isnot__(%_proposal_boxes.5, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:11
          %4126 : int = prim::If(%4125) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:8
            block0():
              %t.12 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.5)
              %tensor.77 : Tensor = prim::GetAttr[name="tensor"](%t.12)
              %4129 : int[] = aten::size(%tensor.77) # <string>:7:9
              %4130 : int = aten::__getitem__(%4129, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              -> (%4130)
            block1():
              %_objectness_logits.4 : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.79)
              %4132 : bool = aten::__isnot__(%_objectness_logits.4, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:11
              %4133 : int = prim::If(%4132) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:8
                block0():
                  %t.148 : Tensor = prim::unchecked_cast(%_objectness_logits.4)
                  %4135 : int = aten::len(%t.148) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:140:19
                  -> (%4135)
                block1():
                  %_pred_boxes.12 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.79)
                  %4137 : bool = aten::__isnot__(%_pred_boxes.12, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:11
                  %4138 : int = prim::If(%4137) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:8
                    block0():
                      %t.204 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.12)
                      %tensor.81 : Tensor = prim::GetAttr[name="tensor"](%t.204)
                      %4141 : int[] = aten::size(%tensor.81) # <string>:7:9
                      %4142 : int = aten::__getitem__(%4141, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
                      -> (%4142)
                    block1():
                      %_scores.12 : Tensor? = prim::GetAttr[name="_scores"](%i.79)
                      %4144 : bool = aten::__isnot__(%_scores.12, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:11
                      %4145 : int = prim::If(%4144) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:8
                        block0():
                          %t.252 : Tensor = prim::unchecked_cast(%_scores.12)
                          %4147 : int = aten::len(%t.252) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:150:19
                          -> (%4147)
                        block1():
                          %_pred_classes.21 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.79)
                          %4149 : bool = aten::__isnot__(%_pred_classes.21, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:11
                          %4150 : int = prim::If(%4149) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:8
                            block0():
                              %t.292 : Tensor = prim::unchecked_cast(%_pred_classes.21)
                              %4152 : int = aten::len(%t.292) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:155:19
                              -> (%4152)
                            block1():
                              %_pred_masks.20 : Tensor? = prim::GetAttr[name="_pred_masks"](%i.79)
                              %4154 : bool = aten::__isnot__(%_pred_masks.20, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:11
                              %4155 : int = prim::If(%4154) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:8
                                block0():
                                  %t.324 : Tensor = prim::unchecked_cast(%_pred_masks.20)
                                  %4157 : int = aten::len(%t.324) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:160:19
                                  -> (%4157)
                                block1():
                                  %_pred_keypoints.24 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.79)
                                  %4159 : bool = aten::__isnot__(%_pred_keypoints.24, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:11
                                  %4160 : int = prim::If(%4159) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:8
                                    block0():
                                      %t.348 : Tensor = prim::unchecked_cast(%_pred_keypoints.24)
                                      %4162 : int = aten::len(%t.348) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:165:19
                                      -> (%4162)
                                    block1():
                                      %_pred_keypoint_heatmaps.28 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.79)
                                      %4164 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.28, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:11
                                      %4165 : int = prim::If(%4164) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:8
                                        block0():
                                          %t.364 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.28)
                                          %4167 : int = aten::len(%t.364) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:170:19
                                          -> (%4167)
                                        block1():
                                           = prim::RaiseException(%15) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:173:8
                                          -> (%4123)
                                      -> (%4165)
                                  -> (%4160)
                              -> (%4155)
                          -> (%4150)
                      -> (%4145)
                  -> (%4138)
              -> (%4133)
          %4168 : int[] = aten::append(%num_boxes_per_image.2, %4126) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
          -> (%62)
      %mask_probs_pred.16 : Tensor[] = aten::split(%mask_probs_pred.2, %num_boxes_per_image.2, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:155:22
      %4170 : int = aten::len(%mask_probs_pred.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4171 : int = aten::len(%pred_instances.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4172 : int[] = prim::ListConstruct(%4170, %4171)
      %4173 : int = prim::min(%4172) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
       = prim::Loop(%4173, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
        block0(%4174 : int):
          %prob.2 : Tensor = aten::__getitem__(%mask_probs_pred.16, %4174) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
          %instances.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4174) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
           = prim::SetAttr[name="_pred_masks"](%instances.2, %prob.2)
          -> (%62)
      %4177 : Dict(str, Tensor) = prim::DictConstruct()
      %4178 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%pred_instances.5, %4177)
      %results.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %4180 : Dict(str, Tensor) = prim::TupleUnpack(%4178)
      -> (%results.2)
    block1():
      %detected_instances.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::unchecked_cast(%3)
      %results.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %4183 : int = aten::len(%detected_instances.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:33
       = prim::Loop(%4183, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:33
        block0(%4184 : int):
          %x.77 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%detected_instances.7, %4184) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:33
          %pixel_mean : Tensor = prim::GetAttr[name="pixel_mean"](%model)
          %4187 : Device = prim::device(%pixel_mean)
          %image_size : (int, int) = prim::GetAttr[name="image_size"](%x.77)
          %ret.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%ret.5, %image_size)
           = prim::SetAttr[name="_field_names"](%ret.5, %29)
           = prim::SetAttr[name="_proposal_boxes"](%ret.5, %61)
           = prim::SetAttr[name="_objectness_logits"](%ret.5, %61)
           = prim::SetAttr[name="_pred_boxes"](%ret.5, %61)
           = prim::SetAttr[name="_scores"](%ret.5, %61)
           = prim::SetAttr[name="_pred_classes"](%ret.5, %61)
           = prim::SetAttr[name="_pred_masks"](%ret.5, %61)
           = prim::SetAttr[name="_pred_keypoints"](%ret.5, %61)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.5, %61)
          %_proposal_boxes.7 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.77)
          %4191 : bool = aten::__isnot__(%_proposal_boxes.7, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:219:11
           = prim::If(%4191) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:219:8
            block0():
              %t.22 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.7)
              %tensor.87 : Tensor = prim::GetAttr[name="tensor"](%t.22)
              %4194 : Tensor = aten::to(%tensor.87, %61, %61, %4187, %61, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:170:21
              %4195 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %tensor.12 : Tensor = aten::to(%4194, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
              %4197 : int = aten::numel(%tensor.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %4198 : bool = aten::eq(%4197, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %tensor.14 : Tensor = prim::If(%4198) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
                block0():
                  %4200 : int[] = prim::ListConstruct(%57, %60)
                  %4201 : Tensor = aten::reshape(%tensor.12, %4200) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  %tensor.18 : Tensor = aten::to(%4201, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  -> (%tensor.18)
                block1():
                  -> (%tensor.12)
              %4203 : int = aten::dim(%tensor.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %4204 : bool = aten::eq(%4203, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %4205 : bool = prim::If(%4204) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
                block0():
                  %4206 : int = aten::size(%tensor.14, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  %4207 : bool = aten::eq(%4206, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  -> (%4207)
                block1():
                  -> (%50)
               = prim::If(%4205) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %4208 : int[] = aten::size(%tensor.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
                  %4209 : str = aten::str(%4208) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  %4210 : str = aten::add(%55, %4209) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%4210) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%4195, %tensor.14)
               = prim::SetAttr[name="_proposal_boxes"](%ret.5, %4195)
              -> ()
            block1():
              -> ()
          %_objectness_logits.5 : Tensor? = prim::GetAttr[name="_objectness_logits"](%x.77)
          %4212 : bool = aten::__isnot__(%_objectness_logits.5, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:224:11
           = prim::If(%4212) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:224:8
            block0():
              %t.24 : Tensor = prim::unchecked_cast(%_objectness_logits.5)
              %4214 : Tensor = aten::to(%t.24, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:225:37
               = prim::SetAttr[name="_objectness_logits"](%ret.5, %4214)
              -> ()
            block1():
              -> ()
          %_pred_boxes.10 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.77)
          %4216 : bool = aten::__isnot__(%_pred_boxes.10, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:229:11
           = prim::If(%4216) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:229:8
            block0():
              %t.42 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.10)
              %tensor.91 : Tensor = prim::GetAttr[name="tensor"](%t.42)
              %4219 : Tensor = aten::to(%tensor.91, %61, %61, %4187, %61, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:170:21
              %4220 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %tensor.11 : Tensor = aten::to(%4219, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:150:21
              %4222 : int = aten::numel(%tensor.11) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %4223 : bool = aten::eq(%4222, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:11
              %tensor.93 : Tensor = prim::If(%4223) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:151:8
                block0():
                  %4225 : int[] = prim::ListConstruct(%57, %60)
                  %4226 : Tensor = aten::reshape(%tensor.11, %4225) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  %tensor.17 : Tensor = aten::to(%4226, %24, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:154:21
                  -> (%tensor.17)
                block1():
                  -> (%tensor.11)
              %4228 : int = aten::dim(%tensor.93) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %4229 : bool = aten::eq(%4228, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
              %4230 : bool = prim::If(%4229) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:15
                block0():
                  %4231 : int = aten::size(%tensor.93, %57) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  %4232 : bool = aten::eq(%4231, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:37
                  -> (%4232)
                block1():
                  -> (%50)
               = prim::If(%4230) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %4233 : int[] = aten::size(%tensor.93) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:59
                  %4234 : str = aten::str(%4233) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  %4235 : str = aten::add(%55, %4234) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%4235) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%4220, %tensor.93)
               = prim::SetAttr[name="_pred_boxes"](%ret.5, %4220)
              -> ()
            block1():
              -> ()
          %_scores.1 : Tensor? = prim::GetAttr[name="_scores"](%x.77)
          %4237 : bool = aten::__isnot__(%_scores.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:234:11
           = prim::If(%4237) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:234:8
            block0():
              %t.60 : Tensor = prim::unchecked_cast(%_scores.1)
              %4239 : Tensor = aten::to(%t.60, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:235:26
               = prim::SetAttr[name="_scores"](%ret.5, %4239)
              -> ()
            block1():
              -> ()
          %_pred_classes.19 : Tensor? = prim::GetAttr[name="_pred_classes"](%x.77)
          %4241 : bool = aten::__isnot__(%_pred_classes.19, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:239:11
           = prim::If(%4241) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:239:8
            block0():
              %t.78 : Tensor = prim::unchecked_cast(%_pred_classes.19)
              %4243 : Tensor = aten::to(%t.78, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:240:32
               = prim::SetAttr[name="_pred_classes"](%ret.5, %4243)
              -> ()
            block1():
              -> ()
          %_pred_masks.1 : Tensor? = prim::GetAttr[name="_pred_masks"](%x.77)
          %4245 : bool = aten::__isnot__(%_pred_masks.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:244:11
           = prim::If(%4245) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:244:8
            block0():
              %t.96 : Tensor = prim::unchecked_cast(%_pred_masks.1)
              %4247 : Tensor = aten::to(%t.96, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:245:30
               = prim::SetAttr[name="_pred_masks"](%ret.5, %4247)
              -> ()
            block1():
              -> ()
          %_pred_keypoints.1 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%x.77)
          %4249 : bool = aten::__isnot__(%_pred_keypoints.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:249:11
           = prim::If(%4249) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:249:8
            block0():
              %t.114 : Tensor = prim::unchecked_cast(%_pred_keypoints.1)
              %4251 : Tensor = aten::to(%t.114, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:250:34
               = prim::SetAttr[name="_pred_keypoints"](%ret.5, %4251)
              -> ()
            block1():
              -> ()
          %_pred_keypoint_heatmaps.1 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%x.77)
          %4253 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:254:11
           = prim::If(%4253) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:254:8
            block0():
              %t.132 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.1)
              %4255 : Tensor = aten::to(%t.132, %4187, %61, %50, %50) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:255:42
               = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.5, %4255)
              -> ()
            block1():
              -> ()
          %4256 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%results.3, %ret.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:33
          -> (%62)
      %roi_heads : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%model)
      %4258 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %_pred_boxes.6 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%4258)
      %4260 : bool = aten::__isnot__(%_pred_boxes.6, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:188:19
      %4261 : bool = prim::If(%4260) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %4262 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %_pred_classes.16 : Tensor? = prim::GetAttr[name="_pred_classes"](%4262)
          %4264 : bool = aten::__isnot__(%_pred_classes.16, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:196:19
          -> (%4264)
        block1():
          -> (%50)
       = prim::If(%4261) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      %features.5 : Tensor[] = prim::ListConstruct()
      %mask_in_features : str[] = prim::GetAttr[name="mask_in_features"](%roi_heads)
      %4267 : int = aten::len(%mask_in_features) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
       = prim::Loop(%4267, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
        block0(%4268 : int):
          %f.1 : str = aten::__getitem__(%mask_in_features, %4268) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
          %4270 : Tensor = aten::__getitem__(%features.1, %f.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:24
          %4271 : Tensor[] = aten::append(%features.5, %4270) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:841:23
          -> (%62)
      %boxes.3 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %4273 : int = aten::len(%results.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
       = prim::Loop(%4273, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
        block0(%4274 : int):
          %x.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4274) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
          %4276 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_pred_boxes.2 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.2)
          %4278 : bool = aten::__isnot__(%_pred_boxes.2, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:15
          %t.1 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%4278) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:8
            block0():
              %t.7 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.2)
              -> (%t.7)
            block1():
               = prim::RaiseException(%22) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:57:8
              -> (%4276)
          %4281 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%boxes.3, %t.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:842:20
          -> (%62)
      %mask_pooler : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="mask_pooler"](%roi_heads)
      %4283 : int = aten::len(%features.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
      %4284 : bool = aten::eq(%4283, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:12
       = prim::If(%4284) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
        block0():
          -> ()
        block1():
          %4285 : int = aten::len(%features.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:228:35
          %4286 : str = aten::format(%17, %60, %4285) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:227:11
          %4287 : str = aten::add(%55, %4286) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
           = prim::RaiseException(%4287) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:225:8
          -> ()
      %4288 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
      %4289 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %4290 : int = aten::size(%4289, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:33
      %4291 : bool = aten::eq(%4288, %4290) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:15
       = prim::If(%4291) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
        block0():
          -> ()
        block1():
          %4292 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %4293 : int = aten::size(%4292, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:12
          %4294 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:26
          %4295 : str = aten::format(%16, %4293, %4294) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:233:11
          %4296 : str = aten::add(%55, %4295) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
           = prim::RaiseException(%4296) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:8
          -> ()
      %4297 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %4298 : bool = aten::eq(%4297, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:11
      %features.9 : Tensor = prim::If(%4298) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:236:8
        block0():
          %4300 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %4301 : int[] = aten::size(%4300) # <string>:7:9
          %4302 : int = aten::__getitem__(%4301, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:39
          %output_size.1 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler)
          %4304 : int, %4305 : int = prim::TupleUnpack(%output_size.1)
          %4306 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:237:73
          %4307 : int = prim::dtype(%4306)
          %4308 : Device = prim::device(%4306)
          %4309 : int[] = prim::ListConstruct(%54, %4302, %4304, %4305)
          %4310 : Tensor = aten::zeros(%4309, %4307, %61, %4308, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          -> (%4310)
        block1():
          %4311 : Tensor[] = prim::ListConstruct()
          %4312 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
           = prim::Loop(%4312, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
            block0(%4313 : int):
              %x.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4313) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              %tensor.3 : Tensor = prim::GetAttr[name="tensor"](%x.1)
              %4316 : Tensor[] = aten::append(%4311, %tensor.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:22
              -> (%62)
          %boxes.2 : Tensor = aten::cat(%4311, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:94:12
          %4318 : int[] = prim::ListConstruct()
          %4319 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
           = prim::Loop(%4319, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
            block0(%4320 : int):
              %x.7 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4320) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              %tensor.2 : Tensor = prim::GetAttr[name="tensor"](%x.7)
              %4323 : int[] = aten::size(%tensor.2) # <string>:7:9
              %4324 : int = aten::__getitem__(%4323, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              %4325 : int[] = aten::append(%4318, %4324) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:96:29
              -> (%62)
          %sizes.1 : Tensor = aten::as_tensor(%4318, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
          %4327 : Device = prim::device(%boxes.2)
          %sizes.5 : Tensor = aten::to(%sizes.1, %61, %61, %4327, %61, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:64:12
          %4329 : int = aten::len(%sizes.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:21
          %4330 : int = prim::dtype(%boxes.2)
          %4331 : Device = prim::device(%boxes.2)
          %4332 : Tensor = aten::arange(%4329, %4330, %61, %4331, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:66:8
          %indices.2 : Tensor = aten::repeat_interleave(%4332, %sizes.5, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:65:14
          %4334 : Tensor = aten::slice(%indices.2, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %4335 : Tensor = aten::unsqueeze(%4334, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:68:16
          %4336 : Tensor[] = prim::ListConstruct(%4335, %boxes.2)
          %pooler_fmt_boxes.13 : Tensor = aten::cat(%4336, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          %min_level.5 : int = prim::GetAttr[name="min_level"](%mask_pooler)
          %max_level.5 : int = prim::GetAttr[name="max_level"](%mask_pooler)
          %canonical_box_size.5 : int = prim::GetAttr[name="canonical_box_size"](%mask_pooler)
          %canonical_level.5 : int = prim::GetAttr[name="canonical_level"](%mask_pooler)
          %4342 : Tensor[] = prim::ListConstruct()
          %4343 : int = aten::len(%boxes.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
           = prim::Loop(%4343, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
            block0(%4344 : int):
              %boxes.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4344) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              %tensor.5 : Tensor = prim::GetAttr[name="tensor"](%boxes.1)
              %4347 : Tensor = aten::slice(%tensor.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %4348 : Tensor = aten::select(%4347, %48, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %4349 : Tensor = aten::slice(%tensor.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %4350 : Tensor = aten::select(%4349, %48, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:28
              %4351 : Tensor = aten::sub(%4348, %4350, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %4352 : Tensor = aten::slice(%tensor.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %4353 : Tensor = aten::select(%4352, %48, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %4354 : Tensor = aten::slice(%tensor.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %4355 : Tensor = aten::select(%4354, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:54
              %4356 : Tensor = aten::sub(%4353, %4355, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:42
              %area.1 : Tensor = aten::mul(%4351, %4356) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:180:16
              %4358 : Tensor[] = aten::append(%4342, %area.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              -> (%62)
          %4359 : int = aten::len(%4342) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4360 : bool = aten::eq(%4359, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4361 : Tensor = prim::If(%4360) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %4362 : Tensor = aten::__getitem__(%4342, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%4362)
            block1():
              %4363 : Tensor = aten::cat(%4342, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%4363)
          %box_sizes.1 : Tensor = aten::sqrt(%4361) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:16
          %4365 : Tensor = aten::div(%box_sizes.1, %canonical_box_size.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %4366 : Tensor = aten::add(%4365, %18, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %4367 : Tensor = aten::log2(%4366) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:26
          %4368 : Tensor = aten::add(%4367, %canonical_level.5, %48) # <string>:5:9
          %level_assignments.1 : Tensor = aten::floor(%4368) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:52:24
          %level_assignments.5 : Tensor = aten::clamp(%level_assignments.1, %min_level.5, %max_level.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:57:24
          %4371 : Tensor = aten::to(%level_assignments.5, %60, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %level_assignments.13 : Tensor = aten::sub(%4371, %min_level.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %4373 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %4374 : int[] = aten::size(%4373) # <string>:7:9
          %num_channels.7 : int = aten::__getitem__(%4374, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:248:23
          %output_size.17 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler)
          %output_size.21 : int = prim::TupleIndex(%output_size.17, %54)
          %4378 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:251:89
          %4379 : int[] = aten::size(%pooler_fmt_boxes.13) # <string>:7:9
          %4380 : int = aten::__getitem__(%4379, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:108:14
          %4381 : int = prim::dtype(%4378)
          %4382 : Device = prim::device(%4378)
          %4383 : int[] = prim::ListConstruct(%4380, %num_channels.7, %output_size.21, %output_size.21)
          %output.15 : Tensor = aten::zeros(%4383, %4381, %61, %4382, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:110:11
          %level_poolers.13 : __torch__.torch.nn.modules.container.___torch_mangle_41.ModuleList = prim::GetAttr[name="level_poolers"](%mask_pooler)
          %_0.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.13)
          %_1.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.13)
          %_2.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.13)
          %_3.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.13)
          %4390 : Tensor = aten::eq(%level_assignments.13, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %4391 : int = aten::dim(%4390) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4392 : bool = aten::eq(%4391, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4393 : Tensor[] = prim::If(%4392) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %4394 : Tensor = aten::unsqueeze(%4390, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4395 : Tensor = aten::nonzero(%4394) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4396 : Tensor[] = aten::unbind(%4395, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%4396)
            block1():
              %4397 : Tensor = aten::nonzero(%4390) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %4398 : Tensor[] = aten::unbind(%4397, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%4398)
          %inds.55 : Tensor = aten::__getitem__(%4393, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %4400 : Tensor?[] = prim::ListConstruct(%inds.55)
          %pooler_fmt_boxes_level.31 : Tensor = aten::index(%pooler_fmt_boxes.13, %4400) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %4402 : Tensor = aten::__getitem__(%features.5, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %4403 : int = aten::dim(%pooler_fmt_boxes_level.31) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4404 : bool = aten::eq(%4403, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4405 : bool = prim::If(%4404) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4406 : int = aten::size(%pooler_fmt_boxes_level.31, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4407 : bool = aten::eq(%4406, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4407)
            block1():
              -> (%50)
           = prim::If(%4405) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4408 : bool = prim::is_quantized(%4402)
          %input.10 : Tensor = prim::If(%4408) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.12 : Tensor = aten::dequantize(%4402) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.12)
            block1():
              -> (%4402)
          %4411 : int = prim::dtype(%input.10)
          %4412 : Tensor = aten::to(%pooler_fmt_boxes_level.31, %4411, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.4 : (int, int) = prim::GetAttr[name="output_size"](%_0.11)
          %spatial_scale.3 : float = prim::GetAttr[name="spatial_scale"](%_0.11)
          %sampling_ratio.3 : int = prim::GetAttr[name="sampling_ratio"](%_0.11)
          %aligned.3 : bool = prim::GetAttr[name="aligned"](%_0.11)
          %4417 : int, %4418 : int = prim::TupleUnpack(%output_size.4)
          %4419 : bool = prim::isinstance[types=[list, tuple]](%4412)
           = prim::If(%4419) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.10 : Tensor[] = prim::unchecked_cast(%4412)
              %4421 : int = aten::len(%boxes.10) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%4421, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%4422 : int):
                  %_tensor.4 : Tensor = aten::__getitem__(%boxes.10, %4422) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %4424 : int = aten::size(%_tensor.4, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %4425 : bool = aten::eq(%4424, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%4425) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %4426 : int = aten::size(%4412, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %4427 : bool = aten::eq(%4426, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%4427) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %4428 : bool = prim::isinstance[types=[Tensor]](%4412)
          %4429 : bool = aten::__not__(%4428) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.14 : Tensor = prim::If(%4429) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.16 : Tensor[] = prim::unchecked_cast(%4412)
              %4432 : Tensor[] = prim::ListConstruct()
              %4433 : int = aten::len(%rois.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%4433, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%4434 : int):
                  %b.8 : Tensor = aten::__getitem__(%rois.16, %4434) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %4436 : Tensor[] = aten::append(%4432, %b.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %4437 : int = aten::len(%4432) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4438 : bool = aten::eq(%4437, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.4 : Tensor = prim::If(%4438) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4440 : Tensor = aten::__getitem__(%4432, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4440)
                block1():
                  %4441 : Tensor = aten::cat(%4432, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4441)
              %temp.4 : Tensor[] = prim::ListConstruct()
              %4443 : int = aten::len(%rois.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %4444 : int[] = prim::ListConstruct(%44, %4443)
              %4445 : int = prim::min(%4444) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%4445, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.4 : int):
                  %b.10 : Tensor = aten::__getitem__(%rois.16, %i.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %4448 : Tensor = aten::slice(%b.10, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4449 : Tensor = aten::slice(%4448, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4450 : Tensor = aten::full_like(%4449, %i.4, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %4451 : Tensor[] = aten::append(%temp.4, %4450) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %4452 : int = aten::len(%temp.4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4453 : bool = aten::eq(%4452, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.4 : Tensor = prim::If(%4453) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4455 : Tensor = aten::__getitem__(%temp.4, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4455)
                block1():
                  %4456 : Tensor = aten::cat(%temp.4, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4456)
              %4457 : Tensor[] = prim::ListConstruct(%ids.4, %concat_boxes.4)
              %rois.18 : Tensor = aten::cat(%4457, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.18)
            block1():
              -> (%4412)
          %4459 : Tensor = torchvision::roi_align(%input.10, %rois.14, %spatial_scale.3, %4417, %4418, %sampling_ratio.3, %aligned.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %4460 : Tensor?[] = prim::ListConstruct(%inds.55)
          %4461 : Tensor = aten::index_put_(%output.15, %4460, %4459, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %4462 : Tensor = aten::eq(%level_assignments.13, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %4463 : int = aten::dim(%4462) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4464 : bool = aten::eq(%4463, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4465 : Tensor[] = prim::If(%4464) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %4466 : Tensor = aten::unsqueeze(%4462, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4467 : Tensor = aten::nonzero(%4466) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4468 : Tensor[] = aten::unbind(%4467, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%4468)
            block1():
              %4469 : Tensor = aten::nonzero(%4462) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %4470 : Tensor[] = aten::unbind(%4469, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%4470)
          %inds.59 : Tensor = aten::__getitem__(%4465, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %4472 : Tensor?[] = prim::ListConstruct(%inds.59)
          %pooler_fmt_boxes_level.35 : Tensor = aten::index(%pooler_fmt_boxes.13, %4472) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %4474 : Tensor = aten::__getitem__(%features.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %4475 : int = aten::dim(%pooler_fmt_boxes_level.35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4476 : bool = aten::eq(%4475, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4477 : bool = prim::If(%4476) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4478 : int = aten::size(%pooler_fmt_boxes_level.35, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4479 : bool = aten::eq(%4478, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4479)
            block1():
              -> (%50)
           = prim::If(%4477) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4480 : bool = prim::is_quantized(%4474)
          %input.14 : Tensor = prim::If(%4480) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.16 : Tensor = aten::dequantize(%4474) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.16)
            block1():
              -> (%4474)
          %4483 : int = prim::dtype(%input.14)
          %4484 : Tensor = aten::to(%pooler_fmt_boxes_level.35, %4483, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.6 : (int, int) = prim::GetAttr[name="output_size"](%_1.11)
          %spatial_scale.5 : float = prim::GetAttr[name="spatial_scale"](%_1.11)
          %sampling_ratio.5 : int = prim::GetAttr[name="sampling_ratio"](%_1.11)
          %aligned.5 : bool = prim::GetAttr[name="aligned"](%_1.11)
          %4489 : int, %4490 : int = prim::TupleUnpack(%output_size.6)
          %4491 : bool = prim::isinstance[types=[list, tuple]](%4484)
           = prim::If(%4491) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.12 : Tensor[] = prim::unchecked_cast(%4484)
              %4493 : int = aten::len(%boxes.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%4493, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%4494 : int):
                  %_tensor.6 : Tensor = aten::__getitem__(%boxes.12, %4494) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %4496 : int = aten::size(%_tensor.6, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %4497 : bool = aten::eq(%4496, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%4497) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %4498 : int = aten::size(%4484, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %4499 : bool = aten::eq(%4498, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%4499) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %4500 : bool = prim::isinstance[types=[Tensor]](%4484)
          %4501 : bool = aten::__not__(%4500) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.20 : Tensor = prim::If(%4501) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.22 : Tensor[] = prim::unchecked_cast(%4484)
              %4504 : Tensor[] = prim::ListConstruct()
              %4505 : int = aten::len(%rois.22) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%4505, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%4506 : int):
                  %b.12 : Tensor = aten::__getitem__(%rois.22, %4506) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %4508 : Tensor[] = aten::append(%4504, %b.12) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %4509 : int = aten::len(%4504) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4510 : bool = aten::eq(%4509, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.6 : Tensor = prim::If(%4510) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4512 : Tensor = aten::__getitem__(%4504, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4512)
                block1():
                  %4513 : Tensor = aten::cat(%4504, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4513)
              %temp.6 : Tensor[] = prim::ListConstruct()
              %4515 : int = aten::len(%rois.22) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %4516 : int[] = prim::ListConstruct(%44, %4515)
              %4517 : int = prim::min(%4516) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%4517, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.6 : int):
                  %b.14 : Tensor = aten::__getitem__(%rois.22, %i.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %4520 : Tensor = aten::slice(%b.14, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4521 : Tensor = aten::slice(%4520, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4522 : Tensor = aten::full_like(%4521, %i.6, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %4523 : Tensor[] = aten::append(%temp.6, %4522) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %4524 : int = aten::len(%temp.6) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4525 : bool = aten::eq(%4524, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.6 : Tensor = prim::If(%4525) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4527 : Tensor = aten::__getitem__(%temp.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4527)
                block1():
                  %4528 : Tensor = aten::cat(%temp.6, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4528)
              %4529 : Tensor[] = prim::ListConstruct(%ids.6, %concat_boxes.6)
              %rois.24 : Tensor = aten::cat(%4529, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.24)
            block1():
              -> (%4484)
          %4531 : Tensor = torchvision::roi_align(%input.14, %rois.20, %spatial_scale.5, %4489, %4490, %sampling_ratio.5, %aligned.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %4532 : Tensor?[] = prim::ListConstruct(%inds.59)
          %4533 : Tensor = aten::index_put_(%output.15, %4532, %4531, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %4534 : Tensor = aten::eq(%level_assignments.13, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %4535 : int = aten::dim(%4534) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4536 : bool = aten::eq(%4535, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4537 : Tensor[] = prim::If(%4536) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %4538 : Tensor = aten::unsqueeze(%4534, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4539 : Tensor = aten::nonzero(%4538) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4540 : Tensor[] = aten::unbind(%4539, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%4540)
            block1():
              %4541 : Tensor = aten::nonzero(%4534) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %4542 : Tensor[] = aten::unbind(%4541, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%4542)
          %inds.63 : Tensor = aten::__getitem__(%4537, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %4544 : Tensor?[] = prim::ListConstruct(%inds.63)
          %pooler_fmt_boxes_level.39 : Tensor = aten::index(%pooler_fmt_boxes.13, %4544) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %4546 : Tensor = aten::__getitem__(%features.5, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %4547 : int = aten::dim(%pooler_fmt_boxes_level.39) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4548 : bool = aten::eq(%4547, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4549 : bool = prim::If(%4548) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4550 : int = aten::size(%pooler_fmt_boxes_level.39, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4551 : bool = aten::eq(%4550, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4551)
            block1():
              -> (%50)
           = prim::If(%4549) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4552 : bool = prim::is_quantized(%4546)
          %input.18 : Tensor = prim::If(%4552) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.20 : Tensor = aten::dequantize(%4546) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.20)
            block1():
              -> (%4546)
          %4555 : int = prim::dtype(%input.18)
          %4556 : Tensor = aten::to(%pooler_fmt_boxes_level.39, %4555, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size.8 : (int, int) = prim::GetAttr[name="output_size"](%_2.11)
          %spatial_scale.7 : float = prim::GetAttr[name="spatial_scale"](%_2.11)
          %sampling_ratio.7 : int = prim::GetAttr[name="sampling_ratio"](%_2.11)
          %aligned.7 : bool = prim::GetAttr[name="aligned"](%_2.11)
          %4561 : int, %4562 : int = prim::TupleUnpack(%output_size.8)
          %4563 : bool = prim::isinstance[types=[list, tuple]](%4556)
           = prim::If(%4563) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.14 : Tensor[] = prim::unchecked_cast(%4556)
              %4565 : int = aten::len(%boxes.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%4565, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%4566 : int):
                  %_tensor.8 : Tensor = aten::__getitem__(%boxes.14, %4566) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %4568 : int = aten::size(%_tensor.8, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %4569 : bool = aten::eq(%4568, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%4569) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %4570 : int = aten::size(%4556, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %4571 : bool = aten::eq(%4570, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%4571) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %4572 : bool = prim::isinstance[types=[Tensor]](%4556)
          %4573 : bool = aten::__not__(%4572) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois.26 : Tensor = prim::If(%4573) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.28 : Tensor[] = prim::unchecked_cast(%4556)
              %4576 : Tensor[] = prim::ListConstruct()
              %4577 : int = aten::len(%rois.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%4577, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%4578 : int):
                  %b.16 : Tensor = aten::__getitem__(%rois.28, %4578) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %4580 : Tensor[] = aten::append(%4576, %b.16) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %4581 : int = aten::len(%4576) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4582 : bool = aten::eq(%4581, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.8 : Tensor = prim::If(%4582) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4584 : Tensor = aten::__getitem__(%4576, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4584)
                block1():
                  %4585 : Tensor = aten::cat(%4576, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4585)
              %temp.8 : Tensor[] = prim::ListConstruct()
              %4587 : int = aten::len(%rois.28) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %4588 : int[] = prim::ListConstruct(%44, %4587)
              %4589 : int = prim::min(%4588) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%4589, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.8 : int):
                  %b.18 : Tensor = aten::__getitem__(%rois.28, %i.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %4592 : Tensor = aten::slice(%b.18, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4593 : Tensor = aten::slice(%4592, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4594 : Tensor = aten::full_like(%4593, %i.8, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %4595 : Tensor[] = aten::append(%temp.8, %4594) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %4596 : int = aten::len(%temp.8) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4597 : bool = aten::eq(%4596, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.8 : Tensor = prim::If(%4597) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4599 : Tensor = aten::__getitem__(%temp.8, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4599)
                block1():
                  %4600 : Tensor = aten::cat(%temp.8, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4600)
              %4601 : Tensor[] = prim::ListConstruct(%ids.8, %concat_boxes.8)
              %rois.30 : Tensor = aten::cat(%4601, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.30)
            block1():
              -> (%4556)
          %4603 : Tensor = torchvision::roi_align(%input.18, %rois.26, %spatial_scale.7, %4561, %4562, %sampling_ratio.7, %aligned.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %4604 : Tensor?[] = prim::ListConstruct(%inds.63)
          %4605 : Tensor = aten::index_put_(%output.15, %4604, %4603, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          %4606 : Tensor = aten::eq(%level_assignments.13, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:33
          %4607 : int = aten::dim(%4606) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4608 : bool = aten::eq(%4607, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:11
          %4609 : Tensor[] = prim::If(%4608) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:133:8
            block0():
              %4610 : Tensor = aten::unsqueeze(%4606, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4611 : Tensor = aten::nonzero(%4610) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              %4612 : Tensor[] = aten::unbind(%4611, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:134:19
              -> (%4612)
            block1():
              %4613 : Tensor = aten::nonzero(%4606) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              %4614 : Tensor[] = aten::unbind(%4613, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:135:15
              -> (%4614)
          %inds.67 : Tensor = aten::__getitem__(%4609, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:254:19
          %4616 : Tensor?[] = prim::ListConstruct(%inds.67)
          %pooler_fmt_boxes_level.43 : Tensor = aten::index(%pooler_fmt_boxes.13, %4616) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:255:37
          %4618 : Tensor = aten::__getitem__(%features.5, %35) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:46
          %4619 : int = aten::dim(%pooler_fmt_boxes_level.43) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4620 : bool = aten::eq(%4619, %52) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4621 : bool = prim::If(%4620) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4622 : int = aten::size(%pooler_fmt_boxes_level.43, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4623 : bool = aten::eq(%4622, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4623)
            block1():
              -> (%50)
           = prim::If(%4621) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%55) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4624 : bool = prim::is_quantized(%4618)
          %input : Tensor = prim::If(%4624) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.7 : Tensor = aten::dequantize(%4618) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.7)
            block1():
              -> (%4618)
          %4627 : int = prim::dtype(%input)
          %4628 : Tensor = aten::to(%pooler_fmt_boxes_level.43, %4627, %50, %50, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %output_size : (int, int) = prim::GetAttr[name="output_size"](%_3.11)
          %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%_3.11)
          %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%_3.11)
          %aligned : bool = prim::GetAttr[name="aligned"](%_3.11)
          %4633 : int, %4634 : int = prim::TupleUnpack(%output_size)
          %4635 : bool = prim::isinstance[types=[list, tuple]](%4628)
           = prim::If(%4635) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:28:4
            block0():
              %boxes.7 : Tensor[] = prim::unchecked_cast(%4628)
              %4637 : int = aten::len(%boxes.7) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
               = prim::Loop(%4637, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                block0(%4638 : int):
                  %_tensor.1 : Tensor = aten::__getitem__(%boxes.7, %4638) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:8
                  %4640 : int = aten::size(%_tensor.1, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                  %4641 : bool = aten::eq(%4640, %60) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:19
                   = prim::If(%4641) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%19) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:12
                      -> ()
                  -> (%62)
              -> ()
            block1():
              %4642 : int = aten::size(%4628, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
              %4643 : bool = aten::eq(%4642, %41) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
               = prim::If(%4643) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%20) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
                  -> ()
              -> ()
          %4644 : bool = prim::isinstance[types=[Tensor]](%4628)
          %4645 : bool = aten::__not__(%4644) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:7
          %rois : Tensor = prim::If(%4645) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:54:4
            block0():
              %rois.5 : Tensor[] = prim::unchecked_cast(%4628)
              %4648 : Tensor[] = prim::ListConstruct()
              %4649 : int = aten::len(%rois.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
               = prim::Loop(%4649, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                block0(%4650 : int):
                  %b.1 : Tensor = aten::__getitem__(%rois.5, %4650) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  %4652 : Tensor[] = aten::append(%4648, %b.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:18:24
                  -> (%62)
              %4653 : int = aten::len(%4648) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4654 : bool = aten::eq(%4653, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %concat_boxes.1 : Tensor = prim::If(%4654) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4656 : Tensor = aten::__getitem__(%4648, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4656)
                block1():
                  %4657 : Tensor = aten::cat(%4648, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4657)
              %temp.1 : Tensor[] = prim::ListConstruct()
              %4659 : int = aten::len(%rois.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
              %4660 : int[] = prim::ListConstruct(%44, %4659)
              %4661 : int = prim::min(%4660) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
               = prim::Loop(%4661, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                block0(%i.2 : int):
                  %b.5 : Tensor = aten::__getitem__(%rois.5, %i.2) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:20:4
                  %4664 : Tensor = aten::slice(%b.5, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4665 : Tensor = aten::slice(%4664, %48, %61, %48, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:36
                  %4666 : Tensor = aten::full_like(%4665, %i.2, %61, %61, %61, %61, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:20
                  %4667 : Tensor[] = aten::append(%temp.1, %4666) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:8
                  -> (%62)
              %4668 : int = aten::len(%temp.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %4669 : bool = aten::eq(%4668, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:7
              %ids.1 : Tensor = prim::If(%4669) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:12:4
                block0():
                  %4671 : Tensor = aten::__getitem__(%temp.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:15
                  -> (%4671)
                block1():
                  %4672 : Tensor = aten::cat(%temp.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:11
                  -> (%4672)
              %4673 : Tensor[] = prim::ListConstruct(%ids.1, %concat_boxes.1)
              %rois.11 : Tensor = aten::cat(%4673, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/_utils.py:23:11
              -> (%rois.11)
            block1():
              -> (%4628)
          %4675 : Tensor = torchvision::roi_align(%input, %rois, %spatial_scale, %4633, %4634, %sampling_ratio, %aligned) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torchvision/ops/roi_align.py:56:11
          %4676 : Tensor?[] = prim::ListConstruct(%inds.67)
          %4677 : Tensor = aten::index_put_(%output.15, %4676, %4675, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/poolers.py:257:12
          -> (%output.15)
      %mask_head : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%roi_heads)
      %mask_fcn1 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn1"](%mask_head)
      %mask_fcn2 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn2"](%mask_head)
      %mask_fcn3 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn3"](%mask_head)
      %mask_fcn4 : __torch__.detectron2.layers.wrappers.___torch_mangle_39.Conv2d = prim::GetAttr[name="mask_fcn4"](%mask_head)
      %deconv : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%mask_head)
      %predictor : __torch__.detectron2.layers.wrappers.___torch_mangle_45.Conv2d = prim::GetAttr[name="predictor"](%mask_head)
      %weight.1 : Tensor = prim::GetAttr[name="weight"](%mask_fcn1)
      %bias.1 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn1)
      %4687 : int[] = prim::ListConstruct(%48, %48)
      %4688 : int[] = prim::ListConstruct(%48, %48)
      %4689 : int[] = prim::ListConstruct(%48, %48)
      %x.14 : Tensor = aten::conv2d(%features.9, %weight.1, %bias.1, %4687, %4688, %4689, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.6 : Tensor = aten::relu(%x.14) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.3 : Tensor = prim::GetAttr[name="weight"](%mask_fcn2)
      %bias.3 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn2)
      %4694 : int[] = prim::ListConstruct(%48, %48)
      %4695 : int[] = prim::ListConstruct(%48, %48)
      %4696 : int[] = prim::ListConstruct(%48, %48)
      %x.18 : Tensor = aten::conv2d(%x.6, %weight.3, %bias.3, %4694, %4695, %4696, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.10 : Tensor = aten::relu(%x.18) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.5 : Tensor = prim::GetAttr[name="weight"](%mask_fcn3)
      %bias.5 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn3)
      %4701 : int[] = prim::ListConstruct(%48, %48)
      %4702 : int[] = prim::ListConstruct(%48, %48)
      %4703 : int[] = prim::ListConstruct(%48, %48)
      %x.22 : Tensor = aten::conv2d(%x.10, %weight.5, %bias.5, %4701, %4702, %4703, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.13 : Tensor = aten::relu(%x.22) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight.7 : Tensor = prim::GetAttr[name="weight"](%mask_fcn4)
      %bias.7 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn4)
      %4708 : int[] = prim::ListConstruct(%48, %48)
      %4709 : int[] = prim::ListConstruct(%48, %48)
      %4710 : int[] = prim::ListConstruct(%48, %48)
      %x.30 : Tensor = aten::conv2d(%x.13, %weight.7, %bias.7, %4708, %4709, %4710, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %x.17 : Tensor = aten::relu(%x.30) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %ret.4 : int[] = prim::ListConstruct(%54, %54)
      %weight.9 : Tensor = prim::GetAttr[name="weight"](%deconv)
      %bias.9 : Tensor? = prim::GetAttr[name="bias"](%deconv)
      %4716 : int[] = prim::ListConstruct(%52, %52)
      %4717 : int[] = prim::ListConstruct(%54, %54)
      %4718 : int[] = prim::ListConstruct(%48, %48)
      %x.21 : Tensor = aten::conv_transpose2d(%x.17, %weight.9, %bias.9, %4716, %4717, %ret.4, %48, %4718) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/modules/conv.py:923:15
      %x.25 : Tensor = aten::relu(%x.21) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/torch/nn/functional.py:1299:17
      %weight : Tensor = prim::GetAttr[name="weight"](%predictor)
      %bias : Tensor? = prim::GetAttr[name="bias"](%predictor)
      %4723 : int[] = prim::ListConstruct(%48, %48)
      %4724 : int[] = prim::ListConstruct(%54, %54)
      %4725 : int[] = prim::ListConstruct(%48, %48)
      %x.5 : Tensor = aten::conv2d(%x.25, %weight, %bias, %4723, %4724, %4725, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:111:12
      %4727 : int = aten::size(%x.5, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:137:24
      %cls_agnostic_mask.1 : bool = aten::eq(%4727, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:137:24
      %mask_probs_pred : Tensor = prim::If(%cls_agnostic_mask.1) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:139:4
        block0():
          %mask_probs_pred.1 : Tensor = aten::sigmoid(%x.5) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:140:26
          -> (%mask_probs_pred.1)
        block1():
          %4731 : int[] = aten::size(%x.5) # <string>:7:9
          %num_masks.1 : int = aten::__getitem__(%4731, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:143:20
          %4733 : Tensor[] = prim::ListConstruct()
          %4734 : int = aten::len(%results.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
           = prim::Loop(%4734, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
            block0(%4735 : int):
              %i.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4735) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
              %4737 : Tensor = prim::Uninitialized()
              %_pred_classes.2 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.1)
              %4739 : bool = aten::__isnot__(%_pred_classes.2, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:15
              %t : Tensor = prim::If(%4739) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:8
                block0():
                  %t.6 : Tensor = prim::unchecked_cast(%_pred_classes.2)
                  -> (%t.6)
                block1():
                   = prim::RaiseException(%23) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:83:8
                  -> (%4737)
              %4742 : Tensor[] = aten::append(%4733, %t) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:25
              -> (%62)
          %4743 : int = aten::len(%4733) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4744 : bool = aten::eq(%4743, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %class_pred.1 : Tensor = prim::If(%4744) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %4746 : Tensor = aten::__getitem__(%4733, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%4746)
            block1():
              %4747 : Tensor = aten::cat(%4733, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%4747)
          %device.1 : Device = prim::device(%class_pred.1)
          %4749 : Tensor = aten::arange(%num_masks.1, %61, %61, %device.1, %61) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:150:35
          %4750 : Device = prim::device(%class_pred.1)
          %indices.1 : Tensor = aten::to(%4749, %4750, %61, %50, %50) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/layers/wrappers.py:146:11
          %4752 : Tensor?[] = prim::ListConstruct(%indices.1, %class_pred.1)
          %4753 : Tensor = aten::index(%x.5, %4752) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4754 : Tensor = aten::slice(%4753, %54, %61, %61, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4755 : Tensor = aten::unsqueeze(%4754, %48) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          %mask_probs_pred.3 : Tensor = aten::sigmoid(%4755) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:151:26
          -> (%mask_probs_pred.3)
      %num_boxes_per_image.1 : int[] = prim::ListConstruct()
      %4758 : int = aten::len(%results.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
       = prim::Loop(%4758, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
        block0(%4759 : int):
          %i.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4759) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
          %4761 : int = prim::Uninitialized()
          %_proposal_boxes.6 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.5)
          %4763 : bool = aten::__isnot__(%_proposal_boxes.6, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:11
          %4764 : int = prim::If(%4763) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:134:8
            block0():
              %t.17 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.6)
              %tensor.42 : Tensor = prim::GetAttr[name="tensor"](%t.17)
              %4767 : int[] = aten::size(%tensor.42) # <string>:7:9
              %4768 : int = aten::__getitem__(%4767, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
              -> (%4768)
            block1():
              %_objectness_logits.1 : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.5)
              %4770 : bool = aten::__isnot__(%_objectness_logits.1, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:11
              %4771 : int = prim::If(%4770) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:139:8
                block0():
                  %t.145 : Tensor = prim::unchecked_cast(%_objectness_logits.1)
                  %4773 : int = aten::len(%t.145) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:140:19
                  -> (%4773)
                block1():
                  %_pred_boxes.5 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.5)
                  %4775 : bool = aten::__isnot__(%_pred_boxes.5, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:11
                  %4776 : int = prim::If(%4775) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:144:8
                    block0():
                      %t.201 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.5)
                      %tensor.44 : Tensor = prim::GetAttr[name="tensor"](%t.201)
                      %4779 : int[] = aten::size(%tensor.44) # <string>:7:9
                      %4780 : int = aten::__getitem__(%4779, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/structures/boxes.py:240:15
                      -> (%4780)
                    block1():
                      %_scores.9 : Tensor? = prim::GetAttr[name="_scores"](%i.5)
                      %4782 : bool = aten::__isnot__(%_scores.9, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:11
                      %4783 : int = prim::If(%4782) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:149:8
                        block0():
                          %t.249 : Tensor = prim::unchecked_cast(%_scores.9)
                          %4785 : int = aten::len(%t.249) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:150:19
                          -> (%4785)
                        block1():
                          %_pred_classes.13 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.5)
                          %4787 : bool = aten::__isnot__(%_pred_classes.13, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:11
                          %4788 : int = prim::If(%4787) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:154:8
                            block0():
                              %t.289 : Tensor = prim::unchecked_cast(%_pred_classes.13)
                              %4790 : int = aten::len(%t.289) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:155:19
                              -> (%4790)
                            block1():
                              %_pred_masks.17 : Tensor? = prim::GetAttr[name="_pred_masks"](%i.5)
                              %4792 : bool = aten::__isnot__(%_pred_masks.17, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:11
                              %4793 : int = prim::If(%4792) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:159:8
                                block0():
                                  %t.321 : Tensor = prim::unchecked_cast(%_pred_masks.17)
                                  %4795 : int = aten::len(%t.321) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:160:19
                                  -> (%4795)
                                block1():
                                  %_pred_keypoints.21 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.5)
                                  %4797 : bool = aten::__isnot__(%_pred_keypoints.21, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:11
                                  %4798 : int = prim::If(%4797) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:164:8
                                    block0():
                                      %t.345 : Tensor = prim::unchecked_cast(%_pred_keypoints.21)
                                      %4800 : int = aten::len(%t.345) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:165:19
                                      -> (%4800)
                                    block1():
                                      %_pred_keypoint_heatmaps.25 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.5)
                                      %4802 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.25, %61) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:11
                                      %4803 : int = prim::If(%4802) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:169:8
                                        block0():
                                          %t.361 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.25)
                                          %4805 : int = aten::len(%t.361) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:170:19
                                          -> (%4805)
                                        block1():
                                           = prim::RaiseException(%15) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:173:8
                                          -> (%4761)
                                      -> (%4803)
                                  -> (%4798)
                              -> (%4793)
                          -> (%4788)
                      -> (%4783)
                  -> (%4776)
              -> (%4771)
          %4806 : int[] = aten::append(%num_boxes_per_image.1, %4764) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:154:26
          -> (%62)
      %mask_probs_pred.15 : Tensor[] = aten::split(%mask_probs_pred, %num_boxes_per_image.1, %54) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:155:22
      %4808 : int = aten::len(%mask_probs_pred.15) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4809 : int = aten::len(%results.3) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4810 : int[] = prim::ListConstruct(%4808, %4809)
      %4811 : int = prim::min(%4810) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
       = prim::Loop(%4811, %62) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
        block0(%4812 : int):
          %prob.1 : Tensor = aten::__getitem__(%mask_probs_pred.15, %4812) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
          %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4812) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/roi_heads/mask_head.py:157:4
           = prim::SetAttr[name="_pred_masks"](%instances.1, %prob.1)
          -> (%62)
      -> (%results.3)
   = prim::If(%4) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:218:8
    block0():
       = prim::RaiseException(%63) # /home/aicenter/pyven/pytorch/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:219:12
      -> ()
    block1():
      -> ()
  %9 : Dict(str, Tensor)[] = prim::ListConstruct()
  %10 : int = aten::len(%instances.3) # export_model.py:91:23
   = prim::Loop(%10, %2) # export_model.py:91:23
    block0(%11 : int):
      %i.76 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.3, %11) # export_model.py:91:23
      %4815 : NoneType = prim::Constant() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:391:20
      %4816 : str = prim::Constant[value="proposal_boxes"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:392:16
      %4817 : str = prim::Constant[value="objectness_logits"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:397:16
      %4818 : str = prim::Constant[value="pred_boxes"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:402:16
      %4819 : str = prim::Constant[value="scores"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:407:16
      %4820 : str = prim::Constant[value="pred_classes"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:412:16
      %4821 : str = prim::Constant[value="pred_masks"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:417:16
      %4822 : str = prim::Constant[value="pred_keypoints"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:422:16
      %4823 : str = prim::Constant[value="pred_keypoint_heatmaps"]() # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:427:16
      %ret.1 : Dict(str, Tensor) = prim::DictConstruct()
      %_proposal_boxes : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.76)
      %4826 : bool = aten::__isnot__(%_proposal_boxes, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:391:11
       = prim::If(%4826) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:391:8
        block0():
          %t.5 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes)
          %tensor.1 : Tensor = prim::GetAttr[name="tensor"](%t.5)
           = aten::_set_item(%ret.1, %4816, %tensor.1) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:392:12
          -> ()
        block1():
          -> ()
      %_objectness_logits : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.76)
      %4830 : bool = aten::__isnot__(%_objectness_logits, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:396:11
       = prim::If(%4830) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:396:8
        block0():
          %t.23 : Tensor = prim::unchecked_cast(%_objectness_logits)
           = aten::_set_item(%ret.1, %4817, %t.23) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:397:12
          -> ()
        block1():
          -> ()
      %_pred_boxes : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.76)
      %4833 : bool = aten::__isnot__(%_pred_boxes, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:401:11
       = prim::If(%4833) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:401:8
        block0():
          %t.41 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes)
          %tensor : Tensor = prim::GetAttr[name="tensor"](%t.41)
           = aten::_set_item(%ret.1, %4818, %tensor) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:402:12
          -> ()
        block1():
          -> ()
      %_scores : Tensor? = prim::GetAttr[name="_scores"](%i.76)
      %4837 : bool = aten::__isnot__(%_scores, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:406:11
       = prim::If(%4837) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:406:8
        block0():
          %t.59 : Tensor = prim::unchecked_cast(%_scores)
           = aten::_set_item(%ret.1, %4819, %t.59) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:407:12
          -> ()
        block1():
          -> ()
      %_pred_classes : Tensor? = prim::GetAttr[name="_pred_classes"](%i.76)
      %4840 : bool = aten::__isnot__(%_pred_classes, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:411:11
       = prim::If(%4840) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:411:8
        block0():
          %t.77 : Tensor = prim::unchecked_cast(%_pred_classes)
           = aten::_set_item(%ret.1, %4820, %t.77) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:412:12
          -> ()
        block1():
          -> ()
      %_pred_masks : Tensor? = prim::GetAttr[name="_pred_masks"](%i.76)
      %4843 : bool = aten::__isnot__(%_pred_masks, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:416:11
       = prim::If(%4843) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:416:8
        block0():
          %t.95 : Tensor = prim::unchecked_cast(%_pred_masks)
           = aten::_set_item(%ret.1, %4821, %t.95) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:417:12
          -> ()
        block1():
          -> ()
      %_pred_keypoints : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.76)
      %4846 : bool = aten::__isnot__(%_pred_keypoints, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:421:11
       = prim::If(%4846) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:421:8
        block0():
          %t.113 : Tensor = prim::unchecked_cast(%_pred_keypoints)
           = aten::_set_item(%ret.1, %4822, %t.113) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:422:12
          -> ()
        block1():
          -> ()
      %_pred_keypoint_heatmaps : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.76)
      %4849 : bool = aten::__isnot__(%_pred_keypoint_heatmaps, %4815) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:426:11
       = prim::If(%4849) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:426:8
        block0():
          %t.131 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps)
           = aten::_set_item(%ret.1, %4823, %t.131) # /tmp/detectron2gsvl5gec/tmpi2j_2njj.py:427:12
          -> ()
        block1():
          -> ()
      %14 : Dict(str, Tensor)[] = aten::append(%9, %ret.1) # export_model.py:91:23
      -> (%2)
  return (%9)
